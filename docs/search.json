[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science for Political Science",
    "section": "",
    "text": "Course Notes\nThis document will include important links and course notes for 01:790:391:01: Data Science for Political Science for the fall 2025 semester.\n\nThis site will be updated throughout the semester with new content.\nThe Canvas modules will provide links to the relevant sections to review for a given week of the course.\nThe primary recommended textbook for the course is Quantitative Social Science: An Introduction by Kosuke Imai. We will refer to this as QSS in the notes.\nThis is a living document. If you spot errors or have questions or suggestions, please email me at k.mccabe@rutgers.edu or post to the course Canvas site.\nOccasionally the notes are updated with embedded video explainers of portions of the code in different sections.",
    "crumbs": [
      "Course Notes"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "1.1 What have I signed up for?\nFirst: What is Data Science?\nNext: What is political science?",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#what-have-i-signed-up-for",
    "href": "intro.html#what-have-i-signed-up-for",
    "title": "1  Introduction",
    "section": "",
    "text": "Data Science involves a combination of math/statistics and programming/coding skills, which, for our purposes, we will combine with social science knowledge.\n\nDrew Conway has a nice venn diagram of how these different skill sets intersect.\nNote: This course will not assume prior familiarity with data science in general or coding, specifically. For those brand new to data science, the idea of learning to code may seem intimidating, but anyone can succeed with a bit of patience and an open mind.\n\n\n\n\n\nThe science of politics, of course! Politics focuses on studying governance and the distribution of power in society, broadly conceived.\n\nHow else might you define politics and political science? What do we study in political science?\n\n\n\n1.1.1 Data Science Can Help Social Scientists\nExample: Mapping poverty using mobile phone and satellite data\nResearchers used modern data sources, including mobile phone data, as a way to predict and describe poverty in different geographic regions. These tools helped social scientists come up with methods that are much more cost-effective and efficient, but still as accurate as traditional methods for this type of measurement.\n\nHow might measures of global poverty be useful to political scientists?\n\n\nSteele et al. 2017: “Poverty is one of the most important determinants of adverse health outcomes globally, a major cause of societal instability and one of the largest causes of lost human potential. Traditional approaches to measuring and targeting poverty rely heavily on census data, which in most low- and middle-income countries (LMICs) are unavailable or out-of-date. Alternat emeasures are needed to complement and update estimates between censuses. This study demonstrates how public and private data sources that are commonly available for LMICs can be used to provide novel insight into the spatial distribution of poverty.We evaluate the relative value of modelling three traditional poverty measures using aggregate data from mobile operators and widely available geospatial data.”\n\n\n1.1.2 Course Goals\nSocial Science Goals\nWe have several goals in social science. Here are four that data science can help us pursue:\n\nDescribe and measure\n\nHas the U.S. population increased?\n\nExplain, evaluate, and recommend (study of causation)\n\nDoes expanding Medicaid improve health outcomes?\n\nPredict\n\nWho will win the next election?\n\nDiscover\n\nHow do policies diffuse across states?\n\n\nWhat are other examples of these goals?\nNote: In this course, we are exploiting the benefits of quantitative data to help achieve goals of social science. However, quantitative data have their shortcomings, too. We will also discuss the limitations of various applications of social science data, and we encourage you to always think critically about how we are using data.\nThis course will provide you with a taste of each of these social science goals, and how the use of data can help achieve these goals. By the end of the course, you should be able to\n\nProvide examples of how quantitative data may be used to help answer social science research questions.\nCompare and contrast the goals of description, causation, prediction, and discovery in social science research.\nUse the programming language R to import and explore social science data and conduct basic statistical analyses.\nInterpret and describe visual displays of social science data, such as graphs and maps.\nDevelop your own analyses and visualizations to understand social science phenomena.\n\nIf you are someone that loves data, we hope you will find this course engaging. If you are someone who loathes or finds the idea of working with data and statistics alarming, we hope you keep an open mind. We will meet you where you are. This course will not assume knowledge of statistical software, and there will be plenty of opportunities to ask questions and seek help from classmates and the instructor throughout the semester.\nThe first section of course will walk people through how to use the statistical program– R– that we will employ this semester.\nWill this course help me in the future?\nEven if you do not plan on becoming a social scientist or a data scientist, an introduction to these skills may prove helpful throughout your academic and professional careers.\n\nTo become an informed consumer of news articles and research involving quantitative analyses.\nTo practice analytical thinking to make informed arguments and decisions.\nTo expand your toolkit for getting a job that may involve consuming or performing some data analysis, even if that is not the traditional role.\n\nExample: Journalism- How 5 Data Dynamos Do Their Jobs",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#rsetup",
    "href": "intro.html#rsetup",
    "title": "1  Introduction",
    "section": "1.2 Setup in R",
    "text": "1.2 Setup in R\nGoal\nBy the end of the first week of the course, you will want to have R and RStudio installed on your computer (both free), feel comfortable using R as a calculator, and making documents using the R Markdown file type within RStudio.\nR is an application that processes the R programming language. RStudio is also an application, which serves as a user interface that makes working in R easier. We will primarily open and use RStudio to work with R.\nIn other classes, you may come across Stata, SPSS, Excel, or SAS, which are programs that also conduct data analysis. R has the advantage of being free and open-source. Even after you leave the university setting, you will be able to use R/RStudio for free. As an open-source program, it is very flexible, and a community of active R/RStudio users is constantly adding to and improving the program. You might also encounter the Python language at some point. R and Python have similarities, and learning R can also make learning Python easier down the road.\nR and RStudio Installation\nIMPORTANT: Note the 2 Steps. These are 2 separate applications you must install. Installing one without the other will not work for our purposes.\nThis content follows and reinforces section QSS 1.3 in our book. Additional resources are also linked below.\n\nThis video from Professor Christopher Bail explains why many social scientists use R and describes the R and RStudio installation process. This involves\n\nGoing to cran, select the link that matches your operating system, and then follow the installation instructions, and\nVisiting RStudio and follow the download and installation instructions. R is the statistical software and programming language used for analysis. RStudio provides a convenient user interface for running R code.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#open-r-script-in-rstudio",
    "href": "intro.html#open-r-script-in-rstudio",
    "title": "1  Introduction",
    "section": "1.3 Open R Script in RStudio",
    "text": "1.3 Open R Script in RStudio\nThis next section provides a few notes on using R and RStudio now that you have installed it. In this section, we cover the following materials:\n\nUsing R as a calculator and assigning objects using &lt;-\nSetting your working directory and the setwd() function.\nCreating and saving an R script (.R file)\nCreating, saving, and compiling an R Markdown document (.Rmd) into an html document (.html)\n\nThis section highlights important concepts from QSS chapter 1.\nRStudio is an open-source and free program that greatly facilitates the use of R, especially for users new to programming. Once you have downloaded and installed R and RStudio, to work in R, all you need to do now is open RStudio (it will open R). It should look like this, though your version numbers will be different:\n\nNote: The first time you open RStudio, you likely only have the three windows above. We will want to create a fourth window by opening an R script to create the fourth window.\n\nTo do this, in RStudio, click on File -&gt; New -&gt; R script in your computer’s toolbar. This will open a blank document for text editing in the upper left of the RStudio window. We will return to this window in a moment.\n\nYou can alternatively click on the green + sign indicator in the top-left corner of the RStudio window, which should give you the option to create a new R script document.\n\n\nNow you should have something that looks like this, similar to Figure 1.1. in QSS:\n\n\nThe upper-left window has our .R script document that will contain code.\nThe lower-left window is the console. This will show the output of the code we run. We will also be able to type directly in the console.\nThe upper-right window shows the environment (and other tabs, such as the history of commands). When we load and store data in RStudio, we will see a summary of that in the environment.\nThe lower-right window will enable us to view plots and search help files, among other things.\n\n\n1.3.1 Using R as a Calculator\nThe bottom left window in your RStudio is the Console. You can type in this window to use R as a calculator or to try out commands. It will show the raw output of any commands you type. For example, we can try to use R as a calculator. Type the following in the Console (the bottom left window) and hit “enter” or “return” on your keyboard:\n\n5 + 3\n\n[1] 8\n\n5 - 3\n\n[1] 2\n\n5^2\n\n[1] 25\n\n5 * 3\n\n[1] 15\n\n5/3\n\n[1] 1.666667\n\n(5 + 3) * 2\n\n[1] 16\n\n\nAgain, in the other RStudio windows, the upper right will show a history of commands that you have sent from the text editor to the R console, along with other items. The lower right will show graphs, help documents and other features. These will be useful later in the course.\n\n\n1.3.2 Working in an R Script\nEarlier, I asked you to open an R script in the upper left window by doing File, then New File, then R Script. Let’s go back to working in that window.\nSet your working directory setwd()\nMany times you work in RStudio, the first thing you will do is set your working directory. This is a designated folder in your computer where you will save your R scripts and datasets.\nThere are many ways to do this.\n\nAn easy way is to go to Session -&gt; Set Working Directory -&gt; Choose Directory. I suggest choosing a folder in your computer that you can easily find and that you will routinely use for this class. Go ahead and create/select it.\nNote: when you selected your directory, code came out in the bottom left Console window. This is the setwd() command which can also be used directly to set your working directory in the future.\nIf you aren’t sure where your directory has been set, you can also type getwd() in your Console. Try it now\n\n\n## Example of where my directory was\ngetwd()\n\n[1] \"/Users/ktmccabe/Dropbox/GitHub2/dsps25\"\n\n\nIf I want to change the working directory, I can go to the top toolbar of my computer and use Session -&gt; Set Working Directory -&gt; Choose Directory or just type my file pathway using the setwd() below:\n\n## Example of setting the working directory using setwd().\n## Your computer will have your own file path.\nsetwd(\"/Users/ktmccabe/Dropbox/Rutgers Teaching/\")\n\n\n\n1.3.3 Saving the R Script\nLet’s now save our R script to our working directory and give it an informative name. To do so, go to File, then Save As, make sure you are in the same folder on your computer as the folder you chose for your working directory.\nGive the file an informative name, such as: “McCabeWeek1.R”. Note: all of your R scripts will have the .R extension.\n\n\n1.3.4 Annotating your R script\nNow that we have saved our R script, let’s work inside of it. Remember, we are in the top-left RStudio window now.\n\nJust like the beginning of a paper, you will want to title your R script. In R, any line that you start with a # will not be treated as a programming command. You can use this to your advantage to write titles/comments– annotations that explain what your code is doing. Below is a screenshot example of a template R script.\nYou can specify your working directory at the top, too. Add your own filepath inside setwd()\n\n\n\nThen you can start answering problems in the rest of the script.\nThink of the R script as where you write the final draft of your paper. In the Console (the bottom-left window), you can mess around and try different things, like you might when you are taking notes or outlining an essay. Then, write the final programming steps that lead you to your answer in the R script. For example, if I wanted to add 5 + 3, I might try different ways of typing it in the Console, and then when I found out 5 + 3 is the right approach, I would type that into my script.\n\n\n\n1.3.5 Running Commands in your R script\nThe last thing we will note in this section is how to execute commands in your R script.\nTo run / execute a command in your R script (the upper left window), you can\n\nHighlight the code you want to run, and then hold down “command + return” on a Mac or “control + enter” on Windows\nPlace your cursor at the end of the line of code (far right), and hit “command + return” on a Mac or “control + return” on Windows, or\nDo 1 or 2, but instead of using the keyboard to execute the commands, click “Run” in the top right corner of the upper-left window.\n\nTry it: Type 5 + 3 in the R script. Then, try to execute 5 + 3. It should look something like this:\n\nAfter you executed the code, you should see it pop out in your Console:\n\n5 + 3\n\n[1] 8\n\n\n\nNote: The symbol # also allows for annotation behind commands or on a separate line. Everything that follows # will be ignored by R. You can annotate your own code so that you and others can understand what each part of the code is designed to do.\n\n## Example\nsum53 &lt;- 5 + 3 # example of assigning an addition calculation\n\n\n\n1.3.6 Objects\nSometimes we will want to store our calculations as “objects” in R. We use &lt;- to assign objects by placing it to the left of what we want to store. For example, let’s store the calculation 5 + 3 as an object named sum53:\n\nsum53 &lt;- 5 + 3\n\nAfter we execute this code, sum53 now stores the calculation. This means, that if we execute a line of code that just has sum53, it will output 8. Try it:\n\nsum53\n\n[1] 8\n\n\nNow we no longer have to type 5 + 3, we can just type sum53. For example, let’s say we wanted to subtract 2 from this calculation. We could do:\n\nsum53 - 2\n\n[1] 6\n\n\nLet’s say we wanted to divide two stored calculations:\n\nten &lt;- 5 + 5\ntwo &lt;- 1 + 1\nten / two\n\n[1] 5\n\n\nThe information stored does not have to be numeric. For example, it can be a word, or what we would call a character string, in which case you need to use quotation marks.\n\nmccabe &lt;- \"professor for this course\"\nmccabe\n\n[1] \"professor for this course\"\n\n\nNote: Object names cannot begin with numbers and no spacing is allowed. Avoid using special characters such as % and $, which have specific meanings in R. Finally, use concise and intuitive object names.\n\nGOOD CODE: practice.calc &lt;- 5 + 3\nBAD CODE: meaningless.and.unnecessarily.long.name &lt;- 5 + 3\n\nWhile these are simple examples, we will use objects all the time for more complicated things to store (e.g., like full datasets!) throughout the course.\nWe can also store an array or “vector” of information using c()\n\nsomenumbers &lt;- c(3, 6, 8, 9)\nsomenumbers\n\n[1] 3 6 8 9\n\n\nImportance of Clean Code\nIdeally, when you are done with your R script, you should be able to highlight the entire script and execute it without generating any error messages. This means your code is clean. Code with typos in it may generate a red error message in the Console upon execution. This can happen when there are typos or commands are misused.\nFor example, R is case sensitive. Let’s say we assigned our object like before:\n\nsum53 &lt;- 5 + 3\n\nHowever, when we went to execute sum53, we accidentally typed Sum53:\n\nSum53\n\nError: object 'Sum53' not found\n\n\nOnly certain types of objects can be used in mathematical calculations. Let’s say we tried to divide mccabe by 2:\n\nmccabe / 2\n\nError in mccabe/2: non-numeric argument to binary operator\n\n\nA big part of learning to use R will be learning how to troubleshoot and detect typos in your code that generate error messages.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#r-markdown",
    "href": "intro.html#r-markdown",
    "title": "1  Introduction",
    "section": "1.4 R Markdown",
    "text": "1.4 R Markdown\nAn R Markdown document, which you can also create in RStudio, allows you to weave together regular text, R code, and the output of R code in the same document. This can be very convenient when conducting data analysis because it allows you more space to explain what you are doing in each step. We will use it as an effective platform for writing up problem sets.\nR Markdown documents can be “compiled” into html, pdf, or docx documents by clicking the Knit button on top of the upper-left window. Below is an example of what a compiled html file looks like.\n\nNote that the image has both written text and a gray chunk, within which there is some R code, as well as the output of the R code (e.g., the number 8 and the image of the histogram plot. \n\nWe say this is a “compiled” RMarkdown document because it differs from the raw version of the file, which is a .Rmd file format. Below is an example of what the raw .Rmd version looks like, compared to the compiled html version.\n \n\n1.4.1 Getting started with RMarkdown\nJust like with a regular R script, to work in R Markdown, you will open up RStudio.\n\nFor additional support beyond the notes below, you can also follow the materials provided by RStudio for getting started with R Markdown https://rmarkdown.rstudio.com/lesson-1.html.\n\nThe first time you will be working in R Markdown, you will want to install two packages: rmarkdown and knitr. You can do this in the Console window in RStudio (remember the lower-left window!).\nType the following into the Console window and hit enter/return.\n\ninstall.packages(\"rmarkdown\")\ninstall.packages(\"knitr\")\n\nOnce you have those installed, now, each time you want to create an R Markdown document, you will open up a .Rmd R Markdown file and get to work.\n\nGo to File -&gt; New File -&gt; R Markdown in RStudio\n\nAlternatively, you can click the green + symbol at the top left of your RStudio window\n\nThis should open up a window with several options, similar to the image below\n\nCreate an informative title and change the author name to match your own\nFor now, we will keep the file type as html. In the future, you can create pdf or .doc documents. However, these require additional programs installed on your computer, which we will not cover in the course.\n\n\n\n\nAfter you hit “OK” a new .Rmd script file will open in your top-left window with some template language and code chunks, similar to the image below. Alternatively, you can start from scratch by clicking “Create Empty Document” or open a template .Rmd file of your own saved on your computer.\n\n\n\nSave as .Rmd file. Save the file by going to “File -&gt; Save as” in RStudio\n\n\nGive the file an informative name like your LastnamePractice1.Rmd\n\n\nKey Components. Now you are ready to work within the Rmd script file. We will point to four basic components of this file, and you can build your knowledge of RMarkdown from there.\n\nThe top part bracketed by --- on top and bottom is the YAML component. This tells RStudio the pertinent information about how to “compile” the Rmd file.\n\nMost of the time you can leave this alone, but you can always edit the title, author, or date as you wish.\n\nThe next component are the global options for the document. It is conveniently labeled “setup.” By default what this is saying is that the compiled version will “echo” (i.e., display all code chunks and output) unless you specifically specify otherwise. For example, note that it says include = FALSE for the setup chunk. That setting means that this code chunk will “run” but it will not appear in the nicely compiled .html file.\n\nMost of the time you will not need to edit those settings.\n\nThe third component I want to bring attention to is the body text. The # symbol in RMarkdown is used to indicate that you have a new section of the document. For example, in the compiled images at the beginning, this resulted in the text being larger and bolded when it said “Problem 2.” In addition to just using a single #, using ## or ### can indicate subsections or subsubsections. Other than that symbol, you can generally write text just as you would in any word processing program, with some exceptions, such as how to make text bold or italicized.\nThe final component I want to call attention to are the other main body code chunks. These are specific parts of the document where you want to create a mini R script. To create these, you can simply click the + C symbol toward the top of the top left window of RStudio and indicate you want an R chunk.\n\n\n\n\nWriting R Code. Within a code chunk, you can type R code just like you would in any R script, as explained in the previous section. However, in RMarkdown, you also have the option of running an entire code chunk at once by hitting the green triangle at the top-right of a given code chunk.\n\n\n\nKnitting the document. Once you have added a code chunk and/or some text, you are ready to compile or “Knit” the document. This is what generates the .html document.\n\nTo do so, click on the Knit button toward the top of the top-left window of Rstudio. After a few moments, this should open up a preview window displaying the compiled html file.\nIt will also save an actual .html file in your working directory (the same location on your computer where you have saved the .Rmd file)\nTry to locate this compiled .html file on your computer and open it. For most computers, .html files will open in your default web browser, such as Google Chrome or Safari.\nThis step is a common place where errors are detected and generated. Sometimes the compiling process fails due to errors in the R code in your code chunks or an error in the Markdown syntax. If your document fails to knit, the next step is to try to troubleshoot the error messages the compiling process generates. The best way to reduce and more easily detect errors is to “knit as you go.” Try to knit your document after each chunk of code you create.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#assignment-1",
    "href": "intro.html#assignment-1",
    "title": "1  Introduction",
    "section": "1.5 Assignment 1",
    "text": "1.5 Assignment 1\nBelow is an exercise that will demonstrate you are able to use R as a calculator, create R scripts, and create and compile R Markdown files. You should be able to complete this assignment after reviewing the course notes from this section and QSS chapter 1.\nWe will start walking through this assignment together during class, but you are welcome to try to do this ahead of time on your own.\nYou will submit three documents on Canvas:\n\nAn R script (.R) file with your code. Follow the best practices by titling your script and using # comments to explain your steps. This code should be clean. I should be able to run your code to verify that the code produces the answers you write down.\nAn .Rmd document and\nA compiled RMarkdown .html document that you get after “knitting” the .Rmd file. This should also have a title including your name and use text or # comments to explain your steps.\n\nYou can create these documents from scratch using the guidance in the previous sections, or you can download and open the .R and .Rmd templates, provided on Canvas, in RStudio to get started.\nThis video provides a brief overview of opening an R script and R Markdown file in RStudio with similar problems to those asked of you in the assignment. The notes in previous sections provide additional details.\n\nAssignment Exercises\n\nCreate a .R script saved as “LastnameSetup1.R” (use your last name). If you use the template on Canvas, after opening in RStudio, use File -&gt; Save As to change to create this file name. Within the body of this file, make sure to title it and provide your name.\n\nSet your working directory using the Session tab in RStudio.\nDo the calculation 8 + 3 - 5 in your R script. Store it as an object with an informative name. Report the answer as a comment # below the code.\nDo the calculation 7 x 3 in your R script. Store it as an object with an informative name. Report the answer as a comment # below the code.\nAdd these two calculations together. Note: do this by adding together the objects you created, not the underlying raw calculations. Report the answer as a # below the code.\n\nIn this problem, we will just re-format what we did in the first problem in an R Markdown format. Create a .Rmd R Markdown file saved as “LastnameSetup1.Rmd.” If you use the template on Canvas, after opening in RStudio, use File -&gt; Save As to change to create this file name. Within this file, make sure to title it and provide your name.\n\nCreate a Markdown heading # Problem 2.1. Underneath this, create an R code chunk in which you do the calculation 8 + 3 - 5. Store it as an object with an informative name. Report the answer in plain language below the code chunk.\nCreate a Markdown heading # Problem 2.2. Underneath this, create an R code chunk in which you do the calculation 7 x 3 in your R script. Store it as an object with an informative name. Report the answer in plain language below the code chunk.\nCreate a Markdown heading # Problem 2.3. Underneath this, create an R code chunk in which you add the previous two calculations together. Note: do this by adding together the objects you created, not the underlying raw calculations. Report the answer in plain language below the code chunk.\nCreate a Markdown heading # Problem 2.4. Write down how you will complete your R assignments this semester. For example, if you have a personal laptop with R and RStudio on it, you will simply write “I will use my personal laptop.” If you don’t have a personal computer or laptop, please indicate where on campus or off-campus you will have regular access to a computer with R/RStudio to do your work. It is essential that you have regular access to a computer so that you will not fall behind in this course.\n\nCreate a compiled .html file by “knitting” the .Rmd file into a .html document. Save the file as “LastnameSetup1.html.” This should happen automatically. The file will be located in the folder where the .Rmd file is also saved.\n\nAll done! Submit the three documents (.R, .Rmd, and .html) on Canvas.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "02-Description.html",
    "href": "02-Description.html",
    "title": "2  Description",
    "section": "",
    "text": "2.1 Process of Describing\nWhat are things we want to describe in political science?\nWhat else? What does description help us achieve?\nGenerate ideas for other goals, such as explanation and prediction\nHow do we go about a descriptive quantitative analysis?",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Description</span>"
    ]
  },
  {
    "objectID": "02-Description.html#process-of-describing",
    "href": "02-Description.html#process-of-describing",
    "title": "2  Description",
    "section": "",
    "text": "Substantive Expertise: Start with a topic, puzzle, or question (e.g., How is the economy doing?)\nFind outcome data relevant to that question (e.g., GDP)\n\nStart from a concept: what we want to describe (i.e., health of the economy)\nMove toward an “operationalization” (i.e., a way to measure it)\nEasy! except… social science is messy. Our concepts are rich, while our measures may be very narrow or concrete.\n\nFor example, GDP is one way to measure economic health, but is it the only measure?\nChoose measures based on validity, reliability, cost\nValidity: how well does the empirical measure reflect the concept it is trying to measure (too broad vs. narrow, susceptible to external biases?)\nReliability: how reproducible and stable is the measure across different researchers and slight variation in sample or measures\n\n\nFind multiple relevant units or “data points” depending on the descriptions and comparisons you want to make\n\nE.g., Multiple years of data (e.g., U.S., from 1900 to 2020)\nE.g., Multiple countries from one year (e.g., U.S. to Germany to other countries)\n\nSummarize the data to help answer the question\n\n\n2.1.1 Example Process\n\nHow is the economy doing?\nFind outcome data relevant to that question\n\nLet’s ask people\n\nFind multiple relevant units or data points\n\nWe will ask several people. Each person will be a data point.\n\nSummarize the data\n\nLet’s take the mean\n\n\n\nHow would you summarize information in explaining it to another person? You would probably want to describe how most people feel about the economy. In other words, you would describe the “central tendency” of people’s responses (the central tendency of the data).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Description</span>"
    ]
  },
  {
    "objectID": "02-Description.html#summarizing-univariate-data",
    "href": "02-Description.html#summarizing-univariate-data",
    "title": "2  Description",
    "section": "2.2 Summarizing univariate data",
    "text": "2.2 Summarizing univariate data\nFor a video explainer of the code in this section, see below. The video only discusses the code. Use the notes and lecture discussion for additional context. (Via youtube, you can speed up the playback to 1.5 or 2x speed.)\n\nUnivariate data refers to data coming from one “variable,” where a variable captures the values of a changing characteristic.\nOur set of values is Outcome = {0,0,0,0,1,1,0,1,0,1}.\n\nWe will call this a vector of values, where a vector is just a collection of things.\nBecause our vector contains only numbers, we will call it a numeric vector.\nEach value can be indexed by i, denoting the position of the value in the\nFor example, Jesse is in position i=10 of the vector, and his value is 1\n\nWe can create vectors in R by using c() and assigning &lt;- it to an object we will call Outcome. Note: you will use the c() and &lt;- assignment tool all of the time in this course!\n\nOutcome &lt;- c(0,0,0,0,1,1,0,1,0,1) # Use commas to separate values\n\nWe can extract a particular value within our vector using brackets and the value’s numeric position in the vector.\n\nOutcome[10] # what value is in the 10th position?\n\n[1] 1\n\n\nWe can overwrite whole vectors or values within a vector\n\nOutcome &lt;- c(5,0,2, 6,1,1, 7, 8, 0, 1) # oops we put the wrong numbers\nOutcome\n\n [1] 5 0 2 6 1 1 7 8 0 1\n\nOutcome &lt;- c(0,0,0,0,1,1,0,1,0,1) # no problem, just overwrite it\nOutcome\n\n [1] 0 0 0 0 1 1 0 1 0 1\n\n\nOops we accidentally type a 0 for Jesse.\n\nOutcome &lt;- c(0,0,0,0,1,1,0,1,0,0) # oops typo for Jesse\nOutcome\n\n [1] 0 0 0 0 1 1 0 1 0 0\n\nOutcome[10] &lt;- 1 # no prob bob. Assign a 1 in position 10\nOutcome\n\n [1] 0 0 0 0 1 1 0 1 0 1\n\n\nVectors do not have to be numeric. Character vectors contain a collection of words and phrases. In R, we use quotations around character values\nExample: let’s create a vector of names that we will call People.\n\nPeople &lt;- c(\"Joe\",\"Sally\", \"Trevor\", \"Emily\", \"Mark\", \"Sarah Jane\", \"Stacey\", \"Steve\", \"Phoebe\", \"Jesse\")\nPeople[10]\n\n[1] \"Jesse\"\n\n\nWe can use the R function class() to tell us the type of object we have.\n\nclass(Outcome)\n\n[1] \"numeric\"\n\nclass(People)\n\n[1] \"character\"",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Description</span>"
    ]
  },
  {
    "objectID": "02-Description.html#functions-to-summarize-univariate-data",
    "href": "02-Description.html#functions-to-summarize-univariate-data",
    "title": "2  Description",
    "section": "2.3 Functions to summarize univariate data",
    "text": "2.3 Functions to summarize univariate data\nWe will use many “functions” in R, which are actions that we request R to perform with data. Functions take one or more inputs that you provide, “under the hood” perform a series of actions, and then produces one or more outputs. For example, if we supply the mean() function in R with a set of numbers, R will take the average of those numbers and then report the result.\nFor univariate data (data based on a single variable or changing characteristic), often we are interested in describing the range of the values and their central tendency. A central tendency reflects the mean or median.\n\nrange: the minimum (min()) and maximum (max()) values\nmean: the average value (mean())\n\nThe average is the sum of the values divided by the number of values:\n\\(\\bar{X} = \\frac{\\text{sum of values}}{\\text{number of values}} = \\frac{x_1 + x_2 + ... + x_N}{N}=\\frac{1}{N}\\sum_{i=1}^{i=N} x_i\\)\nLet’s do this in R for our set of 10 values\n\n(0 + 0 + 0 + 0 + 1 + 1 + 0 + 1 + 0 + 1)/10\n\n[1] 0.4\n\n\nThe average outcome is .4. Note: when a variable contains only 0’s and 1’s its mean is the proportion of 1’s. 40% of people think the economy is doing well.\n\n2.3.1 Step-by-step: Using functions in R (overview)\nA function is an action(s) that you request R to perform on an object or set of objects. For example, we will use the mean() function to ask R to take the mean or “average” of a vector.\n\nInside the function you place inputs or “arguments.”\n\n\nmean(Outcome)\n\n[1] 0.4\n\n\nR also has functions that take the sum sum() of a vector of values.\n\nsumofvalues &lt;- sum(Outcome)\n\nAnd that count the total number of values or “length” length() of the vector.\n\nnumberofvalues &lt;- length(Outcome)\n\nNote that the below is also equivalent to the mean\n\nsumofvalues / numberofvalues\n\n[1] 0.4",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Description</span>"
    ]
  },
  {
    "objectID": "02-Description.html#combining-vectors-into-a-dataframe",
    "href": "02-Description.html#combining-vectors-into-a-dataframe",
    "title": "2  Description",
    "section": "2.4 Combining vectors into a dataframe",
    "text": "2.4 Combining vectors into a dataframe\nWhen we know multiple things about a person (or any type of “unit”), it can be helpful to organize them so it is easier to access all of the information from the same place. This will take us to our first experience working with “dataframes,” a type of rectangular data object.\nWe will first manually create a dataframe, and in future sections, we will load pre-existing datasets as dataframe objects.\nWe can use the data.frame(tag = value) function to create a rectangular dataset by supplying multiple labels or “tags,” followed by a vector of the values associated with those tags. The tags become the column names of the dataframe.\nThis is easiest to understand when you see it in practice. We will supply the tags “Outcome” and “People” as column names, and for each, the vectors containing the values.\n\n## creating a dataframe\nsurveyresults &lt;- data.frame(Outcome = c(0,0,0,0,1,1,0,1,0,1),\n                            People = c(\"Joe\",\"Sally\", \"Trevor\", \"Emily\", \"Mark\", \n                                       \"Sarah Jane\", \"Stacey\", \"Steve\", \"Phoebe\", \"Jesse\"))\n\nsurveyresults\n\n   Outcome     People\n1        0        Joe\n2        0      Sally\n3        0     Trevor\n4        0      Emily\n5        1       Mark\n6        1 Sarah Jane\n7        0     Stacey\n8        1      Steve\n9        0     Phoebe\n10       1      Jesse\n\n\nNote that this has created a single object called surveyresults.\n\n## Object type\nclass(surveyresults)\n\n[1] \"data.frame\"\n\n## ## How many observations (the rows)?\nnrow(surveyresults)\n\n[1] 10\n\n## ## How many variables (the columns)?\nncol(surveyresults)\n\n[1] 2\n\n\nIn a dataframe, we can still access a single column of values using the syntax dataframename$columnname\n\n## Access the individual columns using $\nsurveyresults$Outcome\n\n [1] 0 0 0 0 1 1 0 1 0 1\n\nsurveyresults$People\n\n [1] \"Joe\"        \"Sally\"      \"Trevor\"     \"Emily\"      \"Mark\"      \n [6] \"Sarah Jane\" \"Stacey\"     \"Steve\"      \"Phoebe\"     \"Jesse\"     \n\n\nWe can even take the mean() of these columns in the same way we did above outside of a dataframe.\n\n## Taking the mean\nmean(surveyresults$Outcome)\n\n[1] 0.4",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Description</span>"
    ]
  },
  {
    "objectID": "02-Description.html#summing-up-univariate-description",
    "href": "02-Description.html#summing-up-univariate-description",
    "title": "2  Description",
    "section": "2.5 Summing up univariate description",
    "text": "2.5 Summing up univariate description\nReturning to our example, we found that 40% of people surveyed thought the economy was doing well. Surveying people about their opinions on how the country doing is a common way that social scientists use description. We could extend this exercise in many ways going forward, even with the same question.\n\nStart with a question: How is the economy doing?\nLet’s find a measure: Ask people if the economy is doing well.\nFind data points: Multiple people (we could stop there with the average!), or add more variables:\n\nAcross time: Survey people across multiple years\nAcross type of people: Survey different partisan groups\n\n\nThese types of trends are often used by news organizations and public opinion organizations like, Gallup.\n\nThis was just a first example of description in political science. There are many other ways to describe how the economy is doing and many other topics we might want to describe in politics.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Description</span>"
    ]
  },
  {
    "objectID": "02-Description.html#loading-data-into-r",
    "href": "02-Description.html#loading-data-into-r",
    "title": "2  Description",
    "section": "2.6 Loading data into R",
    "text": "2.6 Loading data into R\nFor this section, our motivating example will be methods to measure voter turnout in the United States.\nDescribing voter turnout\n\nWhat is a typical level of voter turnout?\nHow has turnout changed over time?\nIs turnout higher in presidential years or in midterm years?\n\nHow can we measure turnout? Think about the validity, reliability, and cost of different approaches.\nExample: Dataset on Voter Turnout in the U.S. across multiple years\n\nIn this dataset, each row is an election year. Each column contains information about the population, potential voters, or voter turnout. These will help us compute the turnout rate in a given year. To work with this dataset, we need to load it into R.\n\n2.6.1 Working with datasets in R\nFor a video explainer of the code in this section, see below. The video only discusses the code. Use the notes and lecture discussion for additional context. (Via youtube, you can speed up the playback to 1.5 or 2x speed.)\n\nOften the variables we care about are stored inside of rectangular datasets that we load into R (or have created manually, like the simple example in the previous section.)\n\nThese have a number of rows nrow() and columns ncol()\nEach row is an “observation,” representing the information collected from an individual or entity\nEach column is a variable, representing a changing characteristic across multiple observations\n\nWhen we import a dataset into R, we have a few options.\nOption 1: Download dataset to your computer\n\nMove the dataset to your working directory\nIdentify the file type (e.g., csv, dta, RData, txt)\nPick the appropriate R function to match the type (e.g., read.csv(), read.dta(), load(), read.table())\nAssign the dataset to an object. This object will now be class() of data.frame\n\n\nturnout &lt;- read.csv(\"turnout.csv\")\n\n\n\nClick here for an alternative function for csv files.\n\nSome scholars prefer to use the function read_csv to load csv data. It is better at handling more complicated types of data. We will not need to use this function in this course, but you may encounter it elsewhere.\nTo use this function, the first time we will go about using it, we have to first install a “package” called readr. Packages in R give us additional tools beyond what the base version of R provides. It is like installing an extra app on your phone.\n\ninstall.packages(\"readr\")\n\nOnce we have that installed, now anytime we want to use the function, we will call (open) the “readr” package using library(), and then the syntax is just like using the read.csv function.\n\nlibrary(readr)\nturnout &lt;- read_csv(\"turnout.csv\")\n\n\nOption 2: Read file from a url provided\n\nNeed an active internet connection for this to work\nURL generally must be public\nInclude the url inside the function used to read the data\n\n\nturnout &lt;- read.csv(\"https://raw.githubusercontent.com/ktmccabe/teachingdata/main/turnout.csv\")\n\n\nclass(turnout)\n\n[1] \"data.frame\"\n\n\nYou can also open up a window to view the data:\n\nView(turnout)\n\n\n\n2.6.2 Measuring the Turnout in the US Elections\nRelevant questions with voter turnout\n\nWhat is a typical level of voter turnout?\nIs turnout higher in presidential years or in midterm years?\nIs turnout higher or lower based on voting-eligible (VEP) or voting-age (VAP) populations? We have a lot of people who are citizens 18 and older who are ineligible to vote. This makes the VEP denominator smaller than the VAP.\n\nVoter Turnout in the U.S.\n\nNumerator: total: Total votes cast (in thousands)\nDenominator:\n\nVAP: (voting-age population) from Census\nVEP (voting-eligible population) VEP = VAP + overseas voters - ineligible voters\n\nAdditional Variables and Descriptions\n\nyear: election year\nANES: ANES self-reported estimated turnout rate\nVEP: Voting Eligible Population (in thousands)\nVAP: Voting Age Population (in thousands)\ntotal: total ballots cast for highest office (in thousands)\nfelons: total ineligible felons (in thousands)\nnoncitizens: total non-citizens (in thousands)\noverseas: total eligible overseas voters (in thousands)\nosvoters: total ballots counted by overseas voters (in thousands)\n\n\n\n\n2.6.3 Getting to know your data\n\n## How many observations (the rows)?\nnrow(turnout)\n\n[1] 14\n\n## How many variables (the columns)?\nncol(turnout)\n\n[1] 9\n\n## What are the variable names?\nnames(turnout)\n\n[1] \"year\"     \"VEP\"      \"VAP\"      \"total\"    \"ANES\"     \"felons\"   \"noncit\"  \n[8] \"overseas\" \"osvoters\"\n\n## Show the first six rows\nhead(turnout)\n\n  year    VEP    VAP total ANES felons noncit overseas osvoters\n1 1980 159635 164445 86515   71    802   5756     1803       NA\n2 1982 160467 166028 67616   60    960   6641     1982       NA\n3 1984 167702 173995 92653   74   1165   7482     2361       NA\n4 1986 170396 177922 64991   53   1367   8362     2216       NA\n5 1988 173579 181955 91595   70   1594   9280     2257       NA\n6 1990 176629 186159 67859   47   1901  10239     2659       NA\n\n\nExtract a particular column (vector) from the data using the $.\n\nturnout$year\n\n [1] 1980 1982 1984 1986 1988 1990 1992 1994 1996 1998 2000 2002 2004 2008\n\n\nExtract the 10th year. Just like before! We use 10 to indicate the value of the year column in position (row 10) of the data.\n\nturnout$year[10]\n\n[1] 1998\n\n\nWe can take the mean() of a particular column, too. Let’s take it of the total number of voters.\n\nmean(turnout$total)\n\n[1] 89778.29\n\n\nAnd get the class() (Note: integer is just a type of numeric variable)\n\nclass(turnout$total)\n\n[1] \"integer\"\n\n\nWe can also use brackets in the full data frame, but because our data frame has BOTH rows and columns, we cannot just supply one position i. Instead, we have to tell R which row AND which column by using a comma between the positions.\n\nturnout[1,2] # value in row 1, column 2\n\n[1] 159635\n\n\nWe can use the column name instead\n\nturnout[1, \"VEP\"]\n\n[1] 159635\n\n\nIf we leave the second entry blank, it will return all columns for the specified row\n\nturnout[1,] # All variable values for row 1\n\n  year    VEP    VAP total ANES felons noncit overseas osvoters\n1 1980 159635 164445 86515   71    802   5756     1803       NA\n\n\nThe opposite is true if we leave the first entry blank.\n\nturnout[,2] # VEP for all rows\n\n [1] 159635 160467 167702 170396 173579 176629 179656 182623 186347 190420\n[11] 194331 198382 203483 213314",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Description</span>"
    ]
  },
  {
    "objectID": "02-Description.html#comparing-vep-and-vap-turnout",
    "href": "02-Description.html#comparing-vep-and-vap-turnout",
    "title": "2  Description",
    "section": "2.7 Comparing VEP and VAP turnout",
    "text": "2.7 Comparing VEP and VAP turnout\n\n2.7.1 Creating new variables in R\nLet’s create a new variable that is VAP that adds overseas voters.\n\n# Use $ to add a new variable (i.e., column) to a dataframe\nturnout$VAPplusoverseas &lt;- turnout$VAP + turnout$overseas\n\nUnder the hood, what this is doing is taking each value of turnout$VAP and adding it to its corresponding values of turnout$overseas.\nAnd, yes, this new variable shows up as a new column in turnout. Go ahead, View() it\n\nView(turnout)\n\nThis does not change the underlying turnout.csv file, only the turnout data.frame we are working with in the current R session.\n\nThis is an advantage of using an R script.\nYou don’t have to worry about overwriting/messing up the raw data.\nYou start from the original raw data when you load turnout.csv, and then everything else is done within R.\n\nThis is our new denominator. Now we can calculate turnout based on this denominator.\n\nturnout$newVAPturnout &lt;- turnout$total / turnout$VAPplusoverseas\n\nJust like with adding two vectors, when we divide, each value in the first vector is divided by its corresponding value in the second vector.\n\nturnout$newVAPturnout\n\n [1] 0.5203972 0.4024522 0.5253748 0.3607845 0.4972260 0.3593884 0.5404097\n [8] 0.3803086 0.4753376 0.3483169 0.4934211 0.3582850 0.5454777 0.5567409\n\n\nLet’s calculate the VEP turnout rate and turn it into a percentage. This time, we do it in one step.\n\n(total votes / VEP) \\(\\times\\) 100:\n\n\nturnout$newVEPturnout &lt;- (turnout$total / turnout$VEP) * 100\nturnout$newVEPturnout\n\n [1] 54.19551 42.13701 55.24860 38.14115 52.76848 38.41895 58.11384 41.12625\n [9] 51.65793 38.09316 54.22449 39.51064 60.10084 61.55433\n\n\nLet’s change it from a proportion to a percentage. How? Multiply each value of turnout$newVAP by 100\n\nturnout$newVAPturnout &lt;- turnout$newVAPturnout * 100\n\nThis multiplies each number within the vector by 100.\n\nturnout$newVAPturnout\n\n [1] 52.03972 40.24522 52.53748 36.07845 49.72260 35.93884 54.04097 38.03086\n [9] 47.53376 34.83169 49.34211 35.82850 54.54777 55.67409\n\n\nWhat is typical turnout?\n\nmean(turnout$newVAPturnout)\n\n[1] 45.45658\n\nmean(turnout$newVEPturnout)\n\n[1] 48.94937\n\n\nWe find that turnout based on the voting age population is lower than turnout based on the voting eligible population. This is a pattern that political scientists have examined, going back several decades. For example, in a 2001 article McDonald and Popkin show that is it the ineligible population that grew from the 1970s onward and not the population of people who simply prefer not to vote. (See more here.)\n\n\n\nMcDonald and Popkin 2001",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Description</span>"
    ]
  },
  {
    "objectID": "02-Description.html#comparing-presidential-vs.-midterm-turnout",
    "href": "02-Description.html#comparing-presidential-vs.-midterm-turnout",
    "title": "2  Description",
    "section": "2.8 Comparing Presidential vs. Midterm turnout",
    "text": "2.8 Comparing Presidential vs. Midterm turnout\nHow does turnout compare in presidential vs. midterm years? Sometimes using a single summary of turnout may obscure important underlying differences in the data. To detect these differences, we may want to summarize different parts of the data.\nOh dear. We need to extract specific years from the turnout data frame. Which rows contain the years we want?\n\nturnout$year\n\n [1] 1980 1982 1984 1986 1988 1990 1992 1994 1996 1998 2000 2002 2004 2008\n\n\nOk: rows 1,3,5,7,9,11,13,14 are the presidential. And rows 2,4,6,8,10,12 are midterms.\n\n## we can extract all of these at once by using c()\nturnout$year[c(1,3,5,7,9,11,13,14)] # presidential\n\n[1] 1980 1984 1988 1992 1996 2000 2004 2008\n\n\nLet’s take the mean VEP turnout for presidential years.\n\nmean(turnout$newVEPturnout[c(1,3,5,7,9,11,13,14)])\n\n[1] 55.983\n\n\nLet’s take the mean VEP turnout for midterm years.\n\nmean(turnout$newVEPturnout[c(2,4,6,8,10,12)])\n\n[1] 39.5712\n\n\nLet’s take the difference by storing each mean and then subtracting\n\nmean.VEP.pres &lt;- mean(turnout$newVEPturnout[c(1,3,5,7,9,11,13,14)])\nmean.VEP.mid &lt;- mean(turnout$newVEPturnout[c(2,4,6,8,10,12)])\nmean.VEP.pres -  mean.VEP.mid\n\n[1] 16.41181\n\n\nPresidential turnout, on average, is higher than midterm turnout.\n\n2.8.1 R shortcut for writing vectors\nSometimes we write numbers that are in a predictable sequence (e.g., 1,2,3,4,5). In R, we have functions that prevent us from having to type each number when this is the case.\n\nc(1,2,3,4,5) # is equivalent to:\n\n[1] 1 2 3 4 5\n\n1:5 # is equivalent to:\n\n[1] 1 2 3 4 5\n\nseq(from = 1, to = 5, by = 1)\n\n[1] 1 2 3 4 5\n\n\nWe can use the last one to our advantage to extract the midterm years, which go by 2\n\nmean(turnout$newVEPturnout[c(2,4,6,8,10,12)]) # is the same as\n\n[1] 39.5712\n\nmean(turnout$newVEPturnout[seq(2, 12, 2)])\n\n[1] 39.5712\n\n\nNot a big deal now, but imagine if you had to write 100 numbers or 1 MILLION NUMBERS!",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Description</span>"
    ]
  },
  {
    "objectID": "02-Description.html#creating-dataframes-from-within-r",
    "href": "02-Description.html#creating-dataframes-from-within-r",
    "title": "2  Description",
    "section": "2.9 Creating dataframes from within R",
    "text": "2.9 Creating dataframes from within R\nA reminder that while importing data from outside of R is the most common way to work with dataframes in R, you can create dataframes from inside R. Ultimately, a dataframe just binds together multiple vectors / columns to create a rectangular object. Let’s get additional practice with this using our voter turnout data.\nLet’s say we want to create a dataframe with columns indicating just the midterm years and their VEP turnout. These correspond to the two vectors:\n\nturnout$newVEPturnout[seq(2, 12, 2)]\nturnout$year[seq(2, 12, 2)]\n\nIn R, you can create a rectangular data.frame object with the data.frame function.\n\nWithin this function, you can make several entries that follow the syntax colname = values. We supply what we would like the name of the column to be, such as midyear, and then provide R with a set of values. We can then provide a comma and add more columns.\n\nYou just want to make sure each column has the same number of values.\n\n\n\nmidtermdata &lt;- data.frame(midyear = turnout$year[seq(2, 12, 2)], \n                          VEPturnout = turnout$newVEPturnout[seq(2, 12, 2)])\n\nYou can supply the values for each column using objects or just vectors of raw numeric values like the below:\n\nmidtermdata &lt;- data.frame(midyear = c(1982, 1986, 1990, 1994, 1998, 2002), \n                          VEPturnout = c(42.13701, 38.14115, 38.41895, 41.12625, 38.09316, 39.51064))\n\nThe result is a nice rectangular dataframe similar to what we loaded using the turnout.csv dataset from outside of R.\n\nmidtermdata\n\n  midyear VEPturnout\n1    1982   42.13701\n2    1986   38.14115\n3    1990   38.41895\n4    1994   41.12625\n5    1998   38.09316\n6    2002   39.51064\n\n\nNow, because our dataframe has a different name. If we want to access columns from this dataframe, we start with midterm$ followed by the variable name.\n\nmidtermdata$midyear\n\n[1] 1982 1986 1990 1994 1998 2002",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Description</span>"
    ]
  },
  {
    "objectID": "02-Description.html#wrapping-up-description",
    "href": "02-Description.html#wrapping-up-description",
    "title": "2  Description",
    "section": "2.10 Wrapping Up Description",
    "text": "2.10 Wrapping Up Description\nIn this section, we have described voter turnout using multiple measures and types of elections. There are several other questions that political scientists may be interested in when it comes to voter turnout.\nFor example, during and following the 2020 elections, many states passed laws that changed election procedures: Ability to vote by mail, Ballot dropboxes, Length of early voting. What else?\n\nWhat effect (if any) do these laws have on voter turnout?\n\nIn the next section, we start to examine how to evaluate causal claims.\n\n2.10.1 Summary of R tools\nWe have touched on a number of R tools thus far. Here is a summary of some of the key items to remember going forward:\n\nsetwd(): sets the working directory in R, which tells R which folder on your computer contains the datasets or other R files where you will be working. You should get into the habit of setting your working directory each time you work in RStudio.\n\nCan set this in the toolbar Session -&gt; Set Working Directory -&gt; Choose Directory, followed by clicking the “Open” button on the folder where you want to work.\nExample: setwd(\"~/Downloads/Data Science\")\n\n##: Hashtags are used to help annotate your code. Anything behind a hashtag is treated as plain text\n+ - * /: These are some of the mathematical operators you can use in R\n\nYou can also control which operations are performed first using () just like you would do with math outside of R. For example, try to compare the answer to 6 + 4 * 3 with (6 + 4) * 3\n\n&lt;-: This is an assignment tool that allows us to store calculations, vectors, datasets, and more as objects in R.\n\nExample: sum53 &lt;- 5 + 3 creates an object called sum53 that stores the calculation on the right.\n\n[]: Brackets are used to extract specific components of objects we create. The number(s) inside the brackets tell us which entries to extract.\n\nExample: Outcome[2] will tell us to extract the second entry in the object Outcome\nNote: when we use datasets, the brackets will have two entries, one corresponding to the row entry and one corresponding to the column. Example turnout[1,2] means the entry in the first row and second column.\n\n\nFunctions We have already started using a number of functions in R, which are operations we ask R to do for us, such as creating vectors, importing data, or summarizing data by finding the mean, range, etc. Functions come in the same format, which starts with the function name followed by parentheses. Example: mean(). Each function then takes a particular input(s). When you “run” a line of code with a function, R applies the function to the input.\n\nc(): This is a function that combines a set of values into a vector in R. The values can be numbers or text items and should be separated by commas. If text, each text item should be in quotation marks.\n\nExample: Outcome &lt;- c(3, 4, 6, 2, 1)\nExample: People &lt;- c(\"Sam\", \"Julie\", \"Mark\")\n\nmean(), median(), min(), max(), range(): These functions summarize vectors that are numeric/integers in nature.\n\nExample mean(Outcome) takes the average of the values in the Outcome vector\n\nread.csv(): This function loads a rectangular .csv file into R as a data.frame\n\nExample: turnout &lt;- read.csv(\"turnout.csv\")\nNot all datasets will be .csv files. In the future, we will use other functions, such as load() or read.dta() to import datasets of different file types.\n\n\nDataframes\nWe have started working with dataframes in R. These objects are rectangular datasets that include a collection of vectors. Every column in a dataframe generally represents a different concept or “variable,” while each row represents a different unit or “observation.”\n\n$: When we are working with vectors that are inside of a dataframe (the columns inside of a dataframe), we use the $ to access them.\n\nExample: turnout$year will show us the values in the year column vector inside our turnout rectangular dataframe\n\nnrow(), ncol(), dim(), head(), names(): These functions help us explore the dataframes by telling us the number of rows and columns (the dimensions), giving us a sneak peek of the first 6 rows of the dataframe, or showing us the names of the variables (columns) in the data.\n\nExample: nrow(turnout)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Description</span>"
    ]
  },
  {
    "objectID": "03-CausalityI.html",
    "href": "03-CausalityI.html",
    "title": "3  Causation with Experiments",
    "section": "",
    "text": "3.1 What separates causation from correlation?\nRecall that we said, four primary goals of social science include:\nIn this section, we start to explore the goal of explanation–making causal claims.\nHere’s an example. In 2016, researchers at the NY Times noticed that areas in the country where the television show Duck Dynasty was popular also tended to support Donald Trump at higher rates.\nIf we put our social scientist hat on, we might want to distinguish whether this is a causal or, more likely, just a correlational relationship:\nCausal Question: Does the manipulation of one factor (the treatment), (holding everything else constant), cause a change in an outcome?",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Causation with Experiments</span>"
    ]
  },
  {
    "objectID": "03-CausalityI.html#what-separates-causation-from-correlation",
    "href": "03-CausalityI.html#what-separates-causation-from-correlation",
    "title": "3  Causation with Experiments",
    "section": "",
    "text": "Correlation: Areas that watch Duck Dynasty are more likely to support Trump (degree to which two variables “move together”)\nCausality: Watching Duck Dynasty (vs. not watching) increases your support of Trump.\n\n\n\n3.1.1 Potential Outcomes Framework\nWhen studying causal relationships, we distinguish two concepts:\n\ntreatment: variable whose change may produce a change in the outcome (e.g., watching vs. not watching Duck Dynasty)\noutcome (\\(Y\\)): what may change as a result (e.g., their support for Trump)\n\nWe imagine two states of the world or “potential outcomes.”\n\n\\(Y(1)\\): the outcome if the treatment is administered (e.g., watching the show)\n\\(Y(0)\\): the outcome if the treatment is NOT administered or maybe something else is (e.g., not watching the show)\n\nPolitical Science Example: How does voter turnout (\\(Y\\)) change as a result of varying whether someone receives a mail-in ballot (the treatment)?\n\n\\(Y(\\text{sent a mail-in ballot})\\): do you vote or not\n\\(Y(\\text{not sent a mail-in ballot})\\): do you vote or not\n\nWe compare your likelihood of turning out to vote in a world where you did receive a mail-in ballot vs. a counterfactual state of the world in which you did not receive a mail-in ballot, generally assuming that this is the only thing that is different between these two potential states of the world.\nIn many cases in social science, we might start by observing some connection in the real world. To make a causal claim, we then have to imagine what that counterfactual state of the world would be. Examples:\nCausal Question: Does the minimum wage increase the unemployment rate?\n\n(Hypothetical) Factual: An unemployment rate went up after the minimum wage increased\nImplied Counterfactual: Would the unemployment rate have gone up, had the minimum wage increase not occurred?\n\nCausal Question: Does the gender of a political messenger influence the persuasiveness of the message?\n\n(Hypothetical) Factual: Suppose a political messenger perceived as a man had a somewhat persuasive effect delivering a message on abortion.\nImplied Counterfactual: Would a political messenger perceived as a woman have a similar or different persuasive effect?\n\nWe use causal logic all of the time outside of social science.\nFor example, many viewers get angry after watching the movie Titanic because they believe Jack did not have to die. We can place their claims in our causal framework:\n\n\nOutcome: Jack Surviving the Titanic\nPotential Outcomes in two states of the world\n\nRose did not share the floating door, and Jack died.\nCounterfactual question: If Rose had shared the floating door, would Jack have lived?\n\n\nIn Bit by Bit, Matt Salganik notes that sometimes cause-and-effect questions are implicit. For example, in more general questions about maximization of some performance metric, we might want to compare several alternatives:\nThe question “What color should the donate button be on an NGO’s website?” is really lots of questions about the effect of different button colors on donations.\n\nFactual: A voter donates some amount with a black button\nCounterfactual: What would a voter donate if the button were blue?\nCounterfactual: What would a voter donate if the button were red?\n\nWhat other causal questions might social scientists or data scientists ask?\n\n\n3.1.2 Causal Effects\nWhen we are conducting a causal analysis, we will want to estimate a causal effect.\n\nCausal effects are all about ideal comparisons between treated vs. untreated\n\nA causal effect is the change in the outcome Y that is caused by a change in the treatment variable.\n\n\\(Y(1) - Y(0)\\) = causal effect or “treatment effect”\ne.g., Donation if contacted - Donation if not contacted\n\nWe often want to know the average treatment effect in some population, not just the causal effect for a single individual. Here, we might ask, on average, how much would our outcome change if our units were treated instead of untreated. To do so, we simply sum up all of the causal effects and divide them by the number of units in our population.\n\n\\(\\frac{1}{N} \\sum_{i=1}^N (Y_i (1)-Y_i (0))\\) = “average treatment effect” (ATE)\n\ne.g., Average donations if contacted - Average donations if not contacted\n\n\nNote: If the math above is helpful, you can use it. If it is difficult to read, focus on the plain language definitions that go before it. The notation here is less important than the conceptual understanding.\n\n\n3.1.3 Fundamental Problem of Causal Inference\nThe problem: Fundamental Problem of Causal Inference\nWhat makes the evaluation of causal claims difficult, is that in the real world, we suffer from the fundamental problem of causal inference:\n\nFor any individual, we only get to see (observe) the result from one state of the world\n\nThis makes that subtraction of potential outcomes impossible.\n\n\n(Unless we are in Groundhog Day)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Causation with Experiments</span>"
    ]
  },
  {
    "objectID": "03-CausalityI.html#randomized-controlled-trials",
    "href": "03-CausalityI.html#randomized-controlled-trials",
    "title": "3  Causation with Experiments",
    "section": "3.2 Randomized Controlled Trials",
    "text": "3.2 Randomized Controlled Trials\nOne approach for addressing the fundamental problem of causal inference is to simulate two potential states of the world through random assignment: Randomized Controlled Trials / Experiments\nExperiments approximate an ideal factual vs. counterfactual comparison\n\nWe randomly assign one group to receive a “treatment” and another not to receive a treatment (the control)\n\nThere can be more than two groups. The key is that each group varies (is manipulated) in some way.\n\nWhen treatment assignment is randomized, the only thing that distinguishes the treatment group from the control group, besides the treatment itself, is chance.\n\n\n\n\nSalganik Bit by Bit Chapter 4.4\n\n\nThis allows us to compare the average outcomes between groups in order to estimate our causal effects (more on this below).\n\n3.2.1 Experiments: Why Randomize?\nRandomization is essential for being able to identify and isolate the causal effect of the treatment on the outcome.\nWithout randomization, there may be several reasons why two groups differ beyond the treatment of interest.\n\nFor example, if we randomly assigned half of Rutgers seniors to go to a Sabrina Carpenter concert and half to go to a Bruce Springsteen concert we would expect the groups to have about equal proportions of female students, average age, racial composition, majors, etc.\n\n(If we didn’t randomly assign, and just let people “select” into watching a particular concert, the groups could look very different.)\n\n\nBut because we randomized assignment, on average, we’d expect the two groups to be identical except for the treatment– in this case, which concert they attended.\n\nGreat news! This means any differences in the outcomes between the two groups can be attributed to the treatment. So if we wanted to see if going to a Bruce Springsteen show leads people to hold more favorable opinions of New Jersey, we could compare the average attitudes toward NJ among seniors who attended the show vs. attended the Carpenter show.\n\n\n\n3.2.2 Experiments: How to Analyze\nDifference in Means: We compare each group’s average outcome by subtracting one from the other to estimate the average treatment effect (ATE) aka the average causal effect of the treatment.\n\n\\(\\widehat{ATE} = \\bar{Y}(treatment) - \\bar{Y}(control)\\)\n\nThis is an estimate of, on average, how much our outcome would change if units went from being untreated to treated.\n\nE.g., on average how much a person donates to a campaign if contacted by phone compared to if not contacted by phone.\n\n\n\n3.2.3 Ingredients of an Experiment\nFrom Bit by Bit\n\nFor every experiment, you should be able to\n\nState the causal question or relationship of interest\nDescribe how the experiment will be implemented (e.g., recruitment of subjects)\nIdentify and describe the randomization into treatment group(s) and control group and what happens in each group\nIdentify the outcome of interest, how it is measured\nEvaluate the relevant comparison (between two different experimental conditions)\n\nWe will turn to an example in the next section.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Causation with Experiments</span>"
    ]
  },
  {
    "objectID": "03-CausalityI.html#application-is-there-racial-discrimination-in-the-labor-market",
    "href": "03-CausalityI.html#application-is-there-racial-discrimination-in-the-labor-market",
    "title": "3  Causation with Experiments",
    "section": "3.3 Application: Is there racial discrimination in the labor market?",
    "text": "3.3 Application: Is there racial discrimination in the labor market?\nMarianne Bertrand and Sendhil Mullainathan. 2004. “Are Emily and Greg more employable than Lakisha and Jamal? A field experiment on labor market discrimination.”\n“We perform a field experiment to measure racial discrimination in the labor market. We respond with fictitious resumes to help-wanted ads in Boston and Chicago newspapers.”\n\nRecruitment: Construct resumes to send to ads\nRandomization: To manipulate perception of race, each resume is (randomly) assigned\nTreatment: either a very African American sounding name\nControl: or a very White sounding name\nOutcome: Does the resume receive a callback?\nComparison: Callback rates for African American (sounding) names vs. White (sounding) names (the difference in means between groups)\n\nFor a video explainer of the code in this section, see below. The video only discusses the code. Use the notes and lecture discussion for additional context. (Via youtube, you can speed up the playback to 1.5 or 2x speed.)\n\nLet’s load the data. Note: When we have variables that are text-based categories, we may want to tell R to treat these “strings” of text information as factor variables, a particular type of variable that represents data as a set of nominal (unordered) or ordinal (ordered) categories. We do this with the stringsAsFactors argument.\n\nresume &lt;- read.csv(\"resume.csv\", stringsAsFactors = T)\n\n\nresume &lt;- read.csv(\"https://raw.githubusercontent.com/ktmccabe/teachingdata/main/resume.csv\",\n                   stringsAsFactors = T)\n\nVariables and Description\n\nfirstname: first name of the fictitious job applicant\nsex: sex of applicant (female or male)\nrace: race of applicant (black or white)\ncall: whether a callback was made (1 = yes, 0 = no)\n\nThe data contain 4870 resumes and 4 variables.\n\nnrow(resume) # number of rows\n\n[1] 4870\n\nncol(resume) # number of columns\n\n[1] 4\n\ndim(resume) # number of rows and columns\n\n[1] 4870    4\n\n\nNote: These data look a little different from what we used last week. For example, the sex and race variables contain words, not numbers.\n\nhead(resume)\n\n  firstname    sex  race call\n1   Allison female white    0\n2   Kristen female white    0\n3   Lakisha female black    0\n4   Latonya female black    0\n5    Carrie female white    0\n6       Jay   male white    0\n\n\n\n3.3.1 Variable classes\nWe can check the class of each variable: Look, we have a new type, a “factor” variable.\n\nclass(resume$firstname)\n\n[1] \"factor\"\n\nclass(resume$sex)\n\n[1] \"factor\"\n\nclass(resume$race)\n\n[1] \"factor\"\n\nclass(resume$call)\n\n[1] \"integer\"\n\n\nWe have now encountered numeric, character, and factor vectors and/or variables in R. Note: This is simply how R understands them. Sometimes R can get it wrong. For example, if we write:\n\nsomenumbers &lt;- c(\"1\", \"3\", \"4\")\nclass(somenumbers)\n\n[1] \"character\"\n\n\nBecause we put our numbers in quotation marks, R thinks the values in somenumbers are text. The number “3” might as well be the word “blue” for all R knows. Fortunately, we can easily switch between classes.\n\nsomenumbers &lt;- as.numeric(somenumbers)\nclass(somenumbers)\n\n[1] \"numeric\"\n\n\nHere, we used as.numeric() to overwrite and change the character vector into a numeric vector.\nRules of Thumb\n\nUsually, we want character variables to store text (e.g., open-ended survey responses)\nWe want numeric variables to store numbers.\nUsually, we want factor variables to store categories.\n\nWithin R, factor variables assign a number to each category, which is given a label or level in the form of text.\nCategories might be ordinal or “ordered” (e.g., Very likely, Somewhat likely, Not likely) or\nUnordered (e.g., “male”, “female”)\nR won’t know if a factor variable is ordered or unordered. Alas, we have to be smarter than R.\nR might think you have a character variable when you want it to be a factor or the reverse.\n\nThat’s when as.factor() and as.character() are useful.\n\n\nAlways check class() to find out the variable type",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Causation with Experiments</span>"
    ]
  },
  {
    "objectID": "03-CausalityI.html#making-tables",
    "href": "03-CausalityI.html#making-tables",
    "title": "3  Causation with Experiments",
    "section": "3.4 Making tables",
    "text": "3.4 Making tables\nA nice thing about numeric and factor variables is we can use the table command to see how many observations in our data fall into each category or numerical value.\n\n## Example: how many black vs. white sounding resumes\ntable(resume$race)\n\n\nblack white \n 2435  2435 \n\n\nAs mentioned, factor variables have levels:\n\nlevels(resume$race)\n\n[1] \"black\" \"white\"\n\n\n\n3.4.1 Crosstabulation\nWe can also use the table command to show a crosstabulation: a table that displays the frequency of observations across two variables.\n\n## Example: how many black vs. white sounding resumes by call backs\n## We can label the two dimensions of the table with the =\ntable(calledback = resume$call, race = resume$race)\n\n          race\ncalledback black white\n         0  2278  2200\n         1   157   235",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Causation with Experiments</span>"
    ]
  },
  {
    "objectID": "03-CausalityI.html#conditional-means",
    "href": "03-CausalityI.html#conditional-means",
    "title": "3  Causation with Experiments",
    "section": "3.5 Conditional Means",
    "text": "3.5 Conditional Means\nRecall how to take a mean of a variable in our data. For example, let’s take the mean of the variable call.\n\nmean(resume$call)\n\n[1] 0.08049281\n\n\nThis gives us the average callbacks (or callback rate) for everyone in our data. In experiments, we want to take the mean for a specific group within our data– the treatment group, and then the mean for the control group.\nSomehow, we have to identify, within our data, which rows were part of the treatment group and which were a part of the control group. In this study, we want to identify resumes with an assigned name perceived to be black vs. perceived to be white. This is in our race variable.\nWe will cover a couple of tools to do this, with the first being tapply.\nTo find how the average of one variable (e.g., our outcome- the callback rate) varies across different categories of our factor variable, we use tapply().\n\n## take the mean of input1 by categories of input2\n## mean of the call variable conducted separately by race\ntapply(resume$call, INDEX=resume$race, mean)\n\n     black      white \n0.06447639 0.09650924 \n\n\nThis tells us the callback rate for each group of people in our data. That’s not the only way to do this, however. We can also use the tools below.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Causation with Experiments</span>"
    ]
  },
  {
    "objectID": "03-CausalityI.html#relational-operators-in-r",
    "href": "03-CausalityI.html#relational-operators-in-r",
    "title": "3  Causation with Experiments",
    "section": "3.6 Relational Operators in R",
    "text": "3.6 Relational Operators in R\nGoal: Compare callback rates for white sounding names to black sounding names, so we need to be able to filter by race.\nGood news: We have several relational operators in R that evaluate logical statements:\n\n==, &lt;, &gt;, &lt;=, &gt;=, !=\nWe have a statement and R evaluates it as TRUE or FALSE\n\n\n## for each observation, does the value of race equal \"black\"?\nresume$race == \"black\"\n\nBy putting this logical statement within [ ], we are asking R to take the mean() of the variable resume$call for the subset of observations for which this logical statement is TRUE.\n\nmean(resume$call[resume$race == \"black\"])\n\n[1] 0.06447639\n\n\nUltimately, each of these paths has led us to a place where we can estimate the average treatment effect by calculation the difference in means: the difference in callback rates for black and white applicants.\nWe said the ATE = \\(\\bar{Y}(treatment) - \\bar{Y}(control)\\)\n\nate &lt;- mean(resume$call[resume$race == \"black\"]) - \n  mean(resume$call[resume$race == \"white\"])\nate\n\n[1] -0.03203285\n\n\nHow can we interpret this? Do white applicants have an advantage?",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Causation with Experiments</span>"
    ]
  },
  {
    "objectID": "03-CausalityI.html#subsetting-data-in-r",
    "href": "03-CausalityI.html#subsetting-data-in-r",
    "title": "3  Causation with Experiments",
    "section": "3.7 Subsetting data in R",
    "text": "3.7 Subsetting data in R\nSubsetting Dataframes in R\nMaybe we are interested in differences in callbacks for females. One approach for looking at the treatment effect for female applicants, only, is to subset our data to include only female names.\n\nTo do this, we will assign a new data.frame object that keeps only those rows where sex == \"female\" and retains all columns\nBelow are two approaches for this subsetting, one that uses brackets and one that uses the subset function\n\n\n## option one\nfemales &lt;- resume[resume$sex == \"female\", ]\n## option two using subset()- preferred\nfemales &lt;- subset(resume, sex == \"female\")\n\nNow that we have subset the data, this simplifies estimating the ATE for female applicants only.\nWe said the ATE = \\(\\bar{Y}(treatment) - \\bar{Y}(control)\\)\n\nate.females &lt;- mean(females$call[females$race == \"black\"]) -\n  mean(females$call[females$race == \"white\"])\nate.females\n\n[1] -0.03264689\n\n\n\n3.7.1 Getting Booooooooolean\nWe can make this slightly more complex by adding more criteria. Let’s say we wanted to know the callback rates for just female black (sounding) names.\n\nR allows use to use & (and) and | (or)\n\n\nfemaleblack &lt;- subset(resume, sex == \"female\" & race == \"black\")\n\nWe could now find the callback rate for Black females using the tools from above:\n\nmean(femaleblack$call)\n\n[1] 0.06627784",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Causation with Experiments</span>"
    ]
  },
  {
    "objectID": "03-CausalityI.html#creating-new-variables-using-conditional-statements",
    "href": "03-CausalityI.html#creating-new-variables-using-conditional-statements",
    "title": "3  Causation with Experiments",
    "section": "3.8 Creating New Variables using Conditional statements",
    "text": "3.8 Creating New Variables using Conditional statements\nNote: We will cover each of these tools in this section, time permitting. Otherwise, we will return to it in a future section.\nWe can instead create a new variable in our main dataframe. Let’s make a variable that takes the value 1 if a name is female and black sounding and 0, otherwise\n\n# Initialize a new variable called femaleblackname\nresume$femaleblackname &lt;- NA\n# Assign a 1 to our new variable where sex is female and race is black\nresume$femaleblackname[resume$sex == \"female\" & resume$race == \"black\"] &lt;- 1\n# Assign a 0 if sex is not female OR if race is not black\nresume$femaleblackname[resume$sex != \"female\" | resume$race != \"black\"] &lt;- 0\n\nWe can check our work\n\ntable(name = resume$firstname, femaleblack = resume$femaleblackname)\n\n          femaleblack\nname         0   1\n  Aisha      0 180\n  Allison  232   0\n  Anne     242   0\n  Brad      63   0\n  Brendan   65   0\n  Brett     59   0\n  Carrie   168   0\n  Darnell   42   0\n  Ebony      0 208\n  Emily    227   0\n  Geoffrey  59   0\n  Greg      51   0\n  Hakim     55   0\n  Jamal     61   0\n  Jay       67   0\n  Jermaine  52   0\n  Jill     203   0\n  Kareem    64   0\n  Keisha     0 183\n  Kenya      0 196\n  Kristen  213   0\n  Lakisha    0 200\n  Latonya    0 230\n  Latoya     0 226\n  Laurie   195   0\n  Leroy     64   0\n  Matthew   67   0\n  Meredith 187   0\n  Neil      76   0\n  Rasheed   67   0\n  Sarah    193   0\n  Tamika     0 256\n  Tanisha    0 207\n  Todd      68   0\n  Tremayne  69   0\n  Tyrone    75   0\n\n\nLet’s say we wanted to know the callback rates for just female black (sounding) names.\n\nmean(femaleblack$call)\n\n[1] 0.06627784\n\nmean(resume$call[resume$femaleblackname == 1])\n\n[1] 0.06627784\n\n\nBINGO: two ways to do the same thing.\n\n3.8.1 ifelse statements\nRemember how we created the variable femaleblack, well there is another way to do that in R using what are called conditional statements with ifelse().\n\nCan be read: If this relational statement is TRUE, I assign you A, otherwise I assign you B\n\n\nresume$femaleblackname &lt;- ifelse(resume$sex == \"female\" &\n                                   resume$race == \"black\", 1, 0)\n\nCan be read: If sex is female and race is black, give the observation in the new variable a 1, otherwise give it a 0.\nLike most things, we can also get more complicated here. Let’s say we wanted to create a variable that indicated both race and sex.\n\nCan be read: If this relational statement is TRUE, I assign you A,\nOtherwise if this second relational statement is TRUE, I assign you B,\nOtherwise if this third relational statement is TRUE, I assign you C,\nOtherwise I assign you D\n\n\nresume$racesex &lt;- ifelse(resume$sex == \"female\" &\n                                   resume$race == \"black\", \"FemaleBlack\", \n                         ifelse(resume$sex == \"female\" &\n                                   resume$race == \"white\", \"FemaleWhite\",\n                                ifelse(resume$sex == \"male\" &\n                                   resume$race == \"white\", \"MaleWhite\", \"MaleBlack\")))\n\nNote: what you assign can be numeric or text.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Causation with Experiments</span>"
    ]
  },
  {
    "objectID": "03-CausalityI.html#types-of-experiments",
    "href": "03-CausalityI.html#types-of-experiments",
    "title": "3  Causation with Experiments",
    "section": "3.9 Types of Experiments",
    "text": "3.9 Types of Experiments\nExperiments can vary:\n\nSetting: Lab, Survey, Field\nMode: Analog vs. Digital\nAnd in Validity\n\nInternal: were the processes conducted in a correct, reliable way?\nExternal: can we generalize from the experiment to the real world, or would the results change?\nContext: Would people act the same way outside of the experiment?\nRecruitment: Are the people in our experiment representative of the people we care about?\nConstruct\n\nTreatment: Is the experimental treatment similar to what people see in the real world?\nOutcome: Is the outcome something we care about in the real world? Are we measuring it in a realistic, accurate way?\n\n\n\nReview Bit by Bit chapter 4 for more examples of social science experiments.\nExample: Televised Incivility, Trust and Emotions (Mutz and Reeves)\n\nParticipants sat alone in a room with electrodes attached to their hands to measure skin conductance. Subjects viewed 20 minutes of a political debate created for the experiment, which varied in civility and politeness. Results showed respondents had more of an emotional response to the uncivil condition and expressed less trust in politicians.\nExample: Online Survey Experiment\nAudience Costs (Tomz)\nA country sent its military to take over a neighboring country. The attacking country was led by a [dictator, who invaded OR democratically elected government, which invaded] [to get more power and resources OR because of a longstanding historical feud.\nThe attacking country had a [strong military, so it would OR weak military, so it would not] have taken a major effort for the United States to help push them out.\nA victory by the attacking country would [hurt OR not affect] the safety and economy of the United States.\n\nParticipants provided a different version of the vignette above, and a reaction by the president\nPresidential approval varies depending on the president’s response and the nature of the situation\n\nExample: Digital Field Experiments in Campaigns\nExample: A/B Testing in Campaigns\n\nEmails are virtually costless. Very easy to ask: Are people more likely to open them with X subject or Y subject or Z subject?",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Causation with Experiments</span>"
    ]
  },
  {
    "objectID": "03-CausalityI.html#wrapping-up-causation-with-experiments",
    "href": "03-CausalityI.html#wrapping-up-causation-with-experiments",
    "title": "3  Causation with Experiments",
    "section": "3.10 Wrapping Up Causation with Experiments",
    "text": "3.10 Wrapping Up Causation with Experiments\nIn this section, we have discussed what it means to make a causal claim, why it is essentially impossible to make causal comparisons in real life due to the fundamental problem of causal inferences, and how experiments can help us make comparisons that approximate our causal ideals.\nIn the next section, we start to examine how to visualize data.\n\n3.10.1 Summary of R tools in this section\nHere are some of the R tools we used in this section:\n\ntable(): this function summarizes the frequency of observations that take a particular value. The input is one or more variables in your data.\n\nE.g., table(resume$sex) or table(resume$sex, resume$call)\n\ntapply(): this function applies a given operation like mean to whichever variable is in the first position, separately or “conditionally” by different values of the variable in the second “index” position.\n\nE.g., tapply(resume$call, INDEX=resume$race, mean) finds the average callbacks for applicants separately for different races of applicants in the data.\n\n== &gt; &lt; &gt;= &lt;= !=: Relational operators help us set up “logical statements” in R that are evaluated as TRUE or FALSE\n\nE.g., resume$race == \"black\" evaluates whether for each observation in the race column is “black” in which case the statement is TRUE or not black, in which case the statement is FALSE\nE.g., resume$call &lt; 1 evaluates whether for each observation in the call column has a value less than one in which case the statement is TRUE or not less than 1, in which case the statement is FALSE\nWe can then isolate certain parts of columns using relational operators and the brackets []. For example we can take the mean callbacks for applicants who are black using mean(resume$call[resume$race == \"black\"])\n\n& and |: These are boolean operators that allow us to combine multiple relational operators using an AND statement (&) or an OR statement |. Note the bar is a bar that is usually above your backslash key and not a capitalized i.\n\nE.g., mean(resume$call[resume$race == \"black\" & resume$sex == \"female\"])\n\nsubset(): We can subset whole rows of our data using this function. It takes two inputs– the first is the name of the original dataframe, and the second is a relational statement. Usually we store this output in R by assigning the results to a new object, a dataframe that contains only those rows for which the logical statement using the relational operators is true. E.g., females &lt;- subset(resume, sex == \"female\") subsets our data to keep only those rows where applicants were female.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Causation with Experiments</span>"
    ]
  }
]