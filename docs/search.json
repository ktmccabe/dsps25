[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science for Political Science",
    "section": "",
    "text": "Course Notes\nThis document will include important links and course notes for 01:790:391:01: Data Science for Political Science for the fall 2025 semester.\n\nThis site will be updated throughout the semester with new content.\nThe Canvas modules will provide links to the relevant sections to review for a given week of the course.\nThe primary recommended textbook for the course is Quantitative Social Science: An Introduction by Kosuke Imai. We will refer to this as QSS in the notes.\nThis is a living document. If you spot errors or have questions or suggestions, please email me at k.mccabe@rutgers.edu or post to the course Canvas site.\nOccasionally the notes are updated with embedded video explainers of portions of the code in different sections.",
    "crumbs": [
      "Course Notes"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "1.1 What have I signed up for?\nFirst: What is Data Science?\nNext: What is political science?",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#what-have-i-signed-up-for",
    "href": "intro.html#what-have-i-signed-up-for",
    "title": "1  Introduction",
    "section": "",
    "text": "Data Science involves a combination of math/statistics and programming/coding skills, which, for our purposes, we will combine with social science knowledge.\n\nDrew Conway has a nice venn diagram of how these different skill sets intersect.\nNote: This course will not assume prior familiarity with data science in general or coding, specifically. For those brand new to data science, the idea of learning to code may seem intimidating, but anyone can succeed with a bit of patience and an open mind.\n\n\n\n\n\nThe science of politics, of course! Politics focuses on studying governance and the distribution of power in society, broadly conceived.\n\nHow else might you define politics and political science? What do we study in political science?\n\n\n\n1.1.1 Data Science Can Help Social Scientists\nExample: Mapping poverty using mobile phone and satellite data\nResearchers used modern data sources, including mobile phone data, as a way to predict and describe poverty in different geographic regions. These tools helped social scientists come up with methods that are much more cost-effective and efficient, but still as accurate as traditional methods for this type of measurement.\n\nHow might measures of global poverty be useful to political scientists?\n\n\nSteele et al. 2017: “Poverty is one of the most important determinants of adverse health outcomes globally, a major cause of societal instability and one of the largest causes of lost human potential. Traditional approaches to measuring and targeting poverty rely heavily on census data, which in most low- and middle-income countries (LMICs) are unavailable or out-of-date. Alternat emeasures are needed to complement and update estimates between censuses. This study demonstrates how public and private data sources that are commonly available for LMICs can be used to provide novel insight into the spatial distribution of poverty.We evaluate the relative value of modelling three traditional poverty measures using aggregate data from mobile operators and widely available geospatial data.”\n\n\n1.1.2 Course Goals\nSocial Science Goals\nWe have several goals in social science. Here are four that data science can help us pursue:\n\nDescribe and measure\n\nHas the U.S. population increased?\n\nExplain, evaluate, and recommend (study of causation)\n\nDoes expanding Medicaid improve health outcomes?\n\nPredict\n\nWho will win the next election?\n\nDiscover\n\nHow do policies diffuse across states?\n\n\nWhat are other examples of these goals?\nNote: In this course, we are exploiting the benefits of quantitative data to help achieve goals of social science. However, quantitative data have their shortcomings, too. We will also discuss the limitations of various applications of social science data, and we encourage you to always think critically about how we are using data.\nThis course will provide you with a taste of each of these social science goals, and how the use of data can help achieve these goals. By the end of the course, you should be able to\n\nProvide examples of how quantitative data may be used to help answer social science research questions.\nCompare and contrast the goals of description, causation, prediction, and discovery in social science research.\nUse the programming language R to import and explore social science data and conduct basic statistical analyses.\nInterpret and describe visual displays of social science data, such as graphs and maps.\nDevelop your own analyses and visualizations to understand social science phenomena.\n\nIf you are someone that loves data, we hope you will find this course engaging. If you are someone who loathes or finds the idea of working with data and statistics alarming, we hope you keep an open mind. We will meet you where you are. This course will not assume knowledge of statistical software, and there will be plenty of opportunities to ask questions and seek help from classmates and the instructor throughout the semester.\nThe first section of course will walk people through how to use the statistical program– R– that we will employ this semester.\nWill this course help me in the future?\nEven if you do not plan on becoming a social scientist or a data scientist, an introduction to these skills may prove helpful throughout your academic and professional careers.\n\nTo become an informed consumer of news articles and research involving quantitative analyses.\nTo practice analytical thinking to make informed arguments and decisions.\nTo expand your toolkit for getting a job that may involve consuming or performing some data analysis, even if that is not the traditional role.\n\nExample: Journalism- How 5 Data Dynamos Do Their Jobs",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#rsetup",
    "href": "intro.html#rsetup",
    "title": "1  Introduction",
    "section": "1.2 Setup in R",
    "text": "1.2 Setup in R\nGoal\nBy the end of the first week of the course, you will want to have R and RStudio installed on your computer (both free), feel comfortable using R as a calculator, and making documents using the R Markdown file type within RStudio.\nR is an application that processes the R programming language. RStudio is also an application, which serves as a user interface that makes working in R easier. We will primarily open and use RStudio to work with R.\nIn other classes, you may come across Stata, SPSS, Excel, or SAS, which are programs that also conduct data analysis. R has the advantage of being free and open-source. Even after you leave the university setting, you will be able to use R/RStudio for free. As an open-source program, it is very flexible, and a community of active R/RStudio users is constantly adding to and improving the program. You might also encounter the Python language at some point. R and Python have similarities, and learning R can also make learning Python easier down the road.\nR and RStudio Installation\nIMPORTANT: Note the 2 Steps. These are 2 separate applications you must install. Installing one without the other will not work for our purposes.\nThis content follows and reinforces section QSS 1.3 in our book. Additional resources are also linked below.\n\nThis video from Professor Christopher Bail explains why many social scientists use R and describes the R and RStudio installation process. This involves\n\nGoing to cran, select the link that matches your operating system, and then follow the installation instructions, and\nVisiting RStudio and follow the download and installation instructions. R is the statistical software and programming language used for analysis. RStudio provides a convenient user interface for running R code.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#open-r-script-in-rstudio",
    "href": "intro.html#open-r-script-in-rstudio",
    "title": "1  Introduction",
    "section": "1.3 Open R Script in RStudio",
    "text": "1.3 Open R Script in RStudio\nThis next section provides a few notes on using R and RStudio now that you have installed it. In this section, we cover the following materials:\n\nUsing R as a calculator and assigning objects using &lt;-\nSetting your working directory and the setwd() function.\nCreating and saving an R script (.R file)\nCreating, saving, and compiling an R Markdown document (.Rmd) into an html document (.html)\n\nThis section highlights important concepts from QSS chapter 1.\nRStudio is an open-source and free program that greatly facilitates the use of R, especially for users new to programming. Once you have downloaded and installed R and RStudio, to work in R, all you need to do now is open RStudio (it will open R). It should look like this, though your version numbers will be different:\n\nNote: The first time you open RStudio, you likely only have the three windows above. We will want to create a fourth window by opening an R script to create the fourth window.\n\nTo do this, in RStudio, click on File -&gt; New -&gt; R script in your computer’s toolbar. This will open a blank document for text editing in the upper left of the RStudio window. We will return to this window in a moment.\n\nYou can alternatively click on the green + sign indicator in the top-left corner of the RStudio window, which should give you the option to create a new R script document.\n\n\nNow you should have something that looks like this, similar to Figure 1.1. in QSS:\n\n\nThe upper-left window has our .R script document that will contain code.\nThe lower-left window is the console. This will show the output of the code we run. We will also be able to type directly in the console.\nThe upper-right window shows the environment (and other tabs, such as the history of commands). When we load and store data in RStudio, we will see a summary of that in the environment.\nThe lower-right window will enable us to view plots and search help files, among other things.\n\n\n1.3.1 Using R as a Calculator\nThe bottom left window in your RStudio is the Console. You can type in this window to use R as a calculator or to try out commands. It will show the raw output of any commands you type. For example, we can try to use R as a calculator. Type the following in the Console (the bottom left window) and hit “enter” or “return” on your keyboard:\n\n5 + 3\n\n[1] 8\n\n5 - 3\n\n[1] 2\n\n5^2\n\n[1] 25\n\n5 * 3\n\n[1] 15\n\n5/3\n\n[1] 1.666667\n\n(5 + 3) * 2\n\n[1] 16\n\n\nAgain, in the other RStudio windows, the upper right will show a history of commands that you have sent from the text editor to the R console, along with other items. The lower right will show graphs, help documents and other features. These will be useful later in the course.\n\n\n1.3.2 Working in an R Script\nEarlier, I asked you to open an R script in the upper left window by doing File, then New File, then R Script. Let’s go back to working in that window.\nSet your working directory setwd()\nMany times you work in RStudio, the first thing you will do is set your working directory. This is a designated folder in your computer where you will save your R scripts and datasets.\nThere are many ways to do this.\n\nAn easy way is to go to Session -&gt; Set Working Directory -&gt; Choose Directory. I suggest choosing a folder in your computer that you can easily find and that you will routinely use for this class. Go ahead and create/select it.\nNote: when you selected your directory, code came out in the bottom left Console window. This is the setwd() command which can also be used directly to set your working directory in the future.\nIf you aren’t sure where your directory has been set, you can also type getwd() in your Console. Try it now\n\n\n## Example of where my directory was\ngetwd()\n\n[1] \"/Users/ktmccabe/Dropbox/GitHub2/dsps25\"\n\n\nIf I want to change the working directory, I can go to the top toolbar of my computer and use Session -&gt; Set Working Directory -&gt; Choose Directory or just type my file pathway using the setwd() below:\n\n## Example of setting the working directory using setwd().\n## Your computer will have your own file path.\nsetwd(\"/Users/ktmccabe/Dropbox/Rutgers Teaching/\")\n\n\n\n1.3.3 Saving the R Script\nLet’s now save our R script to our working directory and give it an informative name. To do so, go to File, then Save As, make sure you are in the same folder on your computer as the folder you chose for your working directory.\nGive the file an informative name, such as: “McCabeWeek1.R”. Note: all of your R scripts will have the .R extension.\n\n\n1.3.4 Annotating your R script\nNow that we have saved our R script, let’s work inside of it. Remember, we are in the top-left RStudio window now.\n\nJust like the beginning of a paper, you will want to title your R script. In R, any line that you start with a # will not be treated as a programming command. You can use this to your advantage to write titles/comments– annotations that explain what your code is doing. Below is a screenshot example of a template R script.\nYou can specify your working directory at the top, too. Add your own filepath inside setwd()\n\n\n\nThen you can start answering problems in the rest of the script.\nThink of the R script as where you write the final draft of your paper. In the Console (the bottom-left window), you can mess around and try different things, like you might when you are taking notes or outlining an essay. Then, write the final programming steps that lead you to your answer in the R script. For example, if I wanted to add 5 + 3, I might try different ways of typing it in the Console, and then when I found out 5 + 3 is the right approach, I would type that into my script.\n\n\n\n1.3.5 Running Commands in your R script\nThe last thing we will note in this section is how to execute commands in your R script.\nTo run / execute a command in your R script (the upper left window), you can\n\nHighlight the code you want to run, and then hold down “command + return” on a Mac or “control + enter” on Windows\nPlace your cursor at the end of the line of code (far right), and hit “command + return” on a Mac or “control + return” on Windows, or\nDo 1 or 2, but instead of using the keyboard to execute the commands, click “Run” in the top right corner of the upper-left window.\n\nTry it: Type 5 + 3 in the R script. Then, try to execute 5 + 3. It should look something like this:\n\nAfter you executed the code, you should see it pop out in your Console:\n\n5 + 3\n\n[1] 8\n\n\n\nNote: The symbol # also allows for annotation behind commands or on a separate line. Everything that follows # will be ignored by R. You can annotate your own code so that you and others can understand what each part of the code is designed to do.\n\n## Example\nsum53 &lt;- 5 + 3 # example of assigning an addition calculation\n\n\n\n1.3.6 Objects\nSometimes we will want to store our calculations as “objects” in R. We use &lt;- to assign objects by placing it to the left of what we want to store. For example, let’s store the calculation 5 + 3 as an object named sum53:\n\nsum53 &lt;- 5 + 3\n\nAfter we execute this code, sum53 now stores the calculation. This means, that if we execute a line of code that just has sum53, it will output 8. Try it:\n\nsum53\n\n[1] 8\n\n\nNow we no longer have to type 5 + 3, we can just type sum53. For example, let’s say we wanted to subtract 2 from this calculation. We could do:\n\nsum53 - 2\n\n[1] 6\n\n\nLet’s say we wanted to divide two stored calculations:\n\nten &lt;- 5 + 5\ntwo &lt;- 1 + 1\nten / two\n\n[1] 5\n\n\nThe information stored does not have to be numeric. For example, it can be a word, or what we would call a character string, in which case you need to use quotation marks.\n\nmccabe &lt;- \"professor for this course\"\nmccabe\n\n[1] \"professor for this course\"\n\n\nNote: Object names cannot begin with numbers and no spacing is allowed. Avoid using special characters such as % and $, which have specific meanings in R. Finally, use concise and intuitive object names.\n\nGOOD CODE: practice.calc &lt;- 5 + 3\nBAD CODE: meaningless.and.unnecessarily.long.name &lt;- 5 + 3\n\nWhile these are simple examples, we will use objects all the time for more complicated things to store (e.g., like full datasets!) throughout the course.\nWe can also store an array or “vector” of information using c()\n\nsomenumbers &lt;- c(3, 6, 8, 9)\nsomenumbers\n\n[1] 3 6 8 9\n\n\nImportance of Clean Code\nIdeally, when you are done with your R script, you should be able to highlight the entire script and execute it without generating any error messages. This means your code is clean. Code with typos in it may generate a red error message in the Console upon execution. This can happen when there are typos or commands are misused.\nFor example, R is case sensitive. Let’s say we assigned our object like before:\n\nsum53 &lt;- 5 + 3\n\nHowever, when we went to execute sum53, we accidentally typed Sum53:\n\nSum53\n\nError: object 'Sum53' not found\n\n\nOnly certain types of objects can be used in mathematical calculations. Let’s say we tried to divide mccabe by 2:\n\nmccabe / 2\n\nError in mccabe/2: non-numeric argument to binary operator\n\n\nA big part of learning to use R will be learning how to troubleshoot and detect typos in your code that generate error messages.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#r-markdown",
    "href": "intro.html#r-markdown",
    "title": "1  Introduction",
    "section": "1.4 R Markdown",
    "text": "1.4 R Markdown\nAn R Markdown document, which you can also create in RStudio, allows you to weave together regular text, R code, and the output of R code in the same document. This can be very convenient when conducting data analysis because it allows you more space to explain what you are doing in each step. We will use it as an effective platform for writing up problem sets.\nR Markdown documents can be “compiled” into html, pdf, or docx documents by clicking the Knit button on top of the upper-left window. Below is an example of what a compiled html file looks like.\n\nNote that the image has both written text and a gray chunk, within which there is some R code, as well as the output of the R code (e.g., the number 8 and the image of the histogram plot. \n\nWe say this is a “compiled” RMarkdown document because it differs from the raw version of the file, which is a .Rmd file format. Below is an example of what the raw .Rmd version looks like, compared to the compiled html version.\n \n\n1.4.1 Getting started with RMarkdown\nJust like with a regular R script, to work in R Markdown, you will open up RStudio.\n\nFor additional support beyond the notes below, you can also follow the materials provided by RStudio for getting started with R Markdown https://rmarkdown.rstudio.com/lesson-1.html.\n\nThe first time you will be working in R Markdown, you will want to install two packages: rmarkdown and knitr. You can do this in the Console window in RStudio (remember the lower-left window!).\nType the following into the Console window and hit enter/return.\n\ninstall.packages(\"rmarkdown\")\ninstall.packages(\"knitr\")\n\nOnce you have those installed, now, each time you want to create an R Markdown document, you will open up a .Rmd R Markdown file and get to work.\n\nGo to File -&gt; New File -&gt; R Markdown in RStudio\n\nAlternatively, you can click the green + symbol at the top left of your RStudio window\n\nThis should open up a window with several options, similar to the image below\n\nCreate an informative title and change the author name to match your own\nFor now, we will keep the file type as html. In the future, you can create pdf or .doc documents. However, these require additional programs installed on your computer, which we will not cover in the course.\n\n\n\n\nAfter you hit “OK” a new .Rmd script file will open in your top-left window with some template language and code chunks, similar to the image below. Alternatively, you can start from scratch by clicking “Create Empty Document” or open a template .Rmd file of your own saved on your computer.\n\n\n\nSave as .Rmd file. Save the file by going to “File -&gt; Save as” in RStudio\n\n\nGive the file an informative name like your LastnamePractice1.Rmd\n\n\nKey Components. Now you are ready to work within the Rmd script file. We will point to four basic components of this file, and you can build your knowledge of RMarkdown from there.\n\nThe top part bracketed by --- on top and bottom is the YAML component. This tells RStudio the pertinent information about how to “compile” the Rmd file.\n\nMost of the time you can leave this alone, but you can always edit the title, author, or date as you wish.\n\nThe next component are the global options for the document. It is conveniently labeled “setup.” By default what this is saying is that the compiled version will “echo” (i.e., display all code chunks and output) unless you specifically specify otherwise. For example, note that it says include = FALSE for the setup chunk. That setting means that this code chunk will “run” but it will not appear in the nicely compiled .html file.\n\nMost of the time you will not need to edit those settings.\n\nThe third component I want to bring attention to is the body text. The # symbol in RMarkdown is used to indicate that you have a new section of the document. For example, in the compiled images at the beginning, this resulted in the text being larger and bolded when it said “Problem 2.” In addition to just using a single #, using ## or ### can indicate subsections or subsubsections. Other than that symbol, you can generally write text just as you would in any word processing program, with some exceptions, such as how to make text bold or italicized.\nThe final component I want to call attention to are the other main body code chunks. These are specific parts of the document where you want to create a mini R script. To create these, you can simply click the + C symbol toward the top of the top left window of RStudio and indicate you want an R chunk.\n\n\n\n\nWriting R Code. Within a code chunk, you can type R code just like you would in any R script, as explained in the previous section. However, in RMarkdown, you also have the option of running an entire code chunk at once by hitting the green triangle at the top-right of a given code chunk.\n\n\n\nKnitting the document. Once you have added a code chunk and/or some text, you are ready to compile or “Knit” the document. This is what generates the .html document.\n\nTo do so, click on the Knit button toward the top of the top-left window of Rstudio. After a few moments, this should open up a preview window displaying the compiled html file.\nIt will also save an actual .html file in your working directory (the same location on your computer where you have saved the .Rmd file)\nTry to locate this compiled .html file on your computer and open it. For most computers, .html files will open in your default web browser, such as Google Chrome or Safari.\nThis step is a common place where errors are detected and generated. Sometimes the compiling process fails due to errors in the R code in your code chunks or an error in the Markdown syntax. If your document fails to knit, the next step is to try to troubleshoot the error messages the compiling process generates. The best way to reduce and more easily detect errors is to “knit as you go.” Try to knit your document after each chunk of code you create.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#assignment-1",
    "href": "intro.html#assignment-1",
    "title": "1  Introduction",
    "section": "1.5 Assignment 1",
    "text": "1.5 Assignment 1\nBelow is an exercise that will demonstrate you are able to use R as a calculator, create R scripts, and create and compile R Markdown files. You should be able to complete this assignment after reviewing the course notes from this section and QSS chapter 1.\nWe will start walking through this assignment together during class, but you are welcome to try to do this ahead of time on your own.\nYou will submit three documents on Canvas:\n\nAn R script (.R) file with your code. Follow the best practices by titling your script and using # comments to explain your steps. This code should be clean. I should be able to run your code to verify that the code produces the answers you write down.\nAn .Rmd document and\nA compiled RMarkdown .html document that you get after “knitting” the .Rmd file. This should also have a title including your name and use text or # comments to explain your steps.\n\nYou can create these documents from scratch using the guidance in the previous sections, or you can download and open the .R and .Rmd templates, provided on Canvas, in RStudio to get started.\nThis video provides a brief overview of opening an R script and R Markdown file in RStudio with similar problems to those asked of you in the assignment. The notes in previous sections provide additional details.\n\nAssignment Exercises\n\nCreate a .R script saved as “LastnameSetup1.R” (use your last name). If you use the template on Canvas, after opening in RStudio, use File -&gt; Save As to change to create this file name. Within the body of this file, make sure to title it and provide your name.\n\nSet your working directory using the Session tab in RStudio.\nDo the calculation 8 + 3 - 5 in your R script. Store it as an object with an informative name. Report the answer as a comment # below the code.\nDo the calculation 7 x 3 in your R script. Store it as an object with an informative name. Report the answer as a comment # below the code.\nAdd these two calculations together. Note: do this by adding together the objects you created, not the underlying raw calculations. Report the answer as a # below the code.\n\nIn this problem, we will just re-format what we did in the first problem in an R Markdown format. Create a .Rmd R Markdown file saved as “LastnameSetup1.Rmd.” If you use the template on Canvas, after opening in RStudio, use File -&gt; Save As to change to create this file name. Within this file, make sure to title it and provide your name.\n\nCreate a Markdown heading # Problem 2.1. Underneath this, create an R code chunk in which you do the calculation 8 + 3 - 5. Store it as an object with an informative name. Report the answer in plain language below the code chunk.\nCreate a Markdown heading # Problem 2.2. Underneath this, create an R code chunk in which you do the calculation 7 x 3 in your R script. Store it as an object with an informative name. Report the answer in plain language below the code chunk.\nCreate a Markdown heading # Problem 2.3. Underneath this, create an R code chunk in which you add the previous two calculations together. Note: do this by adding together the objects you created, not the underlying raw calculations. Report the answer in plain language below the code chunk.\nCreate a Markdown heading # Problem 2.4. Write down how you will complete your R assignments this semester. For example, if you have a personal laptop with R and RStudio on it, you will simply write “I will use my personal laptop.” If you don’t have a personal computer or laptop, please indicate where on campus or off-campus you will have regular access to a computer with R/RStudio to do your work. It is essential that you have regular access to a computer so that you will not fall behind in this course.\n\nCreate a compiled .html file by “knitting” the .Rmd file into a .html document. Save the file as “LastnameSetup1.html.” This should happen automatically. The file will be located in the folder where the .Rmd file is also saved.\n\nAll done! Submit the three documents (.R, .Rmd, and .html) on Canvas.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "02-Description.html",
    "href": "02-Description.html",
    "title": "2  Description",
    "section": "",
    "text": "2.1 Process of Describing\nWhat are things we want to describe in political science?\nWhat else? What does description help us achieve?\nGenerate ideas for other goals, such as explanation and prediction\nHow do we go about a descriptive quantitative analysis?",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Description</span>"
    ]
  },
  {
    "objectID": "02-Description.html#process-of-describing",
    "href": "02-Description.html#process-of-describing",
    "title": "2  Description",
    "section": "",
    "text": "Substantive Expertise: Start with a topic, puzzle, or question (e.g., How is the economy doing?)\nFind outcome data relevant to that question (e.g., GDP)\n\nStart from a concept: what we want to describe (i.e., health of the economy)\nMove toward an “operationalization” (i.e., a way to measure it)\nEasy! except… social science is messy. Our concepts are rich, while our measures may be very narrow or concrete.\n\nFor example, GDP is one way to measure economic health, but is it the only measure?\nChoose measures based on validity, reliability, cost\nValidity: how well does the empirical measure reflect the concept it is trying to measure (too broad vs. narrow, susceptible to external biases?)\nReliability: how reproducible and stable is the measure across different researchers and slight variation in sample or measures\n\n\nFind multiple relevant units or “data points” depending on the descriptions and comparisons you want to make\n\nE.g., Multiple years of data (e.g., U.S., from 1900 to 2020)\nE.g., Multiple countries from one year (e.g., U.S. to Germany to other countries)\n\nSummarize the data to help answer the question\n\n\n2.1.1 Example Process\n\nHow is the economy doing?\nFind outcome data relevant to that question\n\nLet’s ask people\n\nFind multiple relevant units or data points\n\nWe will ask several people. Each person will be a data point.\n\nSummarize the data\n\nLet’s take the mean\n\n\n\nHow would you summarize information in explaining it to another person? You would probably want to describe how most people feel about the economy. In other words, you would describe the “central tendency” of people’s responses (the central tendency of the data).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Description</span>"
    ]
  },
  {
    "objectID": "02-Description.html#summarizing-univariate-data",
    "href": "02-Description.html#summarizing-univariate-data",
    "title": "2  Description",
    "section": "2.2 Summarizing univariate data",
    "text": "2.2 Summarizing univariate data\nFor a video explainer of the code in this section, see below. The video only discusses the code. Use the notes and lecture discussion for additional context. (Via youtube, you can speed up the playback to 1.5 or 2x speed.)\n\nUnivariate data refers to data coming from one “variable,” where a variable captures the values of a changing characteristic.\nOur set of values is Outcome = {0,0,0,0,1,1,0,1,0,1}.\n\nWe will call this a vector of values, where a vector is just a collection of things.\nBecause our vector contains only numbers, we will call it a numeric vector.\nEach value can be indexed by i, denoting the position of the value in the\nFor example, Jesse is in position i=10 of the vector, and his value is 1\n\nWe can create vectors in R by using c() and assigning &lt;- it to an object we will call Outcome. Note: you will use the c() and &lt;- assignment tool all of the time in this course!\n\nOutcome &lt;- c(0,0,0,0,1,1,0,1,0,1) # Use commas to separate values\n\nWe can extract a particular value within our vector using brackets and the value’s numeric position in the vector.\n\nOutcome[10] # what value is in the 10th position?\n\n[1] 1\n\n\nWe can overwrite whole vectors or values within a vector\n\nOutcome &lt;- c(5,0,2, 6,1,1, 7, 8, 0, 1) # oops we put the wrong numbers\nOutcome\n\n [1] 5 0 2 6 1 1 7 8 0 1\n\nOutcome &lt;- c(0,0,0,0,1,1,0,1,0,1) # no problem, just overwrite it\nOutcome\n\n [1] 0 0 0 0 1 1 0 1 0 1\n\n\nOops we accidentally type a 0 for Jesse.\n\nOutcome &lt;- c(0,0,0,0,1,1,0,1,0,0) # oops typo for Jesse\nOutcome\n\n [1] 0 0 0 0 1 1 0 1 0 0\n\nOutcome[10] &lt;- 1 # no prob bob. Assign a 1 in position 10\nOutcome\n\n [1] 0 0 0 0 1 1 0 1 0 1\n\n\nVectors do not have to be numeric. Character vectors contain a collection of words and phrases. In R, we use quotations around character values\nExample: let’s create a vector of names that we will call People.\n\nPeople &lt;- c(\"Joe\",\"Sally\", \"Trevor\", \"Emily\", \"Mark\", \"Sarah Jane\", \"Stacey\", \"Steve\", \"Phoebe\", \"Jesse\")\nPeople[10]\n\n[1] \"Jesse\"\n\n\nWe can use the R function class() to tell us the type of object we have.\n\nclass(Outcome)\n\n[1] \"numeric\"\n\nclass(People)\n\n[1] \"character\"",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Description</span>"
    ]
  },
  {
    "objectID": "02-Description.html#functions-to-summarize-univariate-data",
    "href": "02-Description.html#functions-to-summarize-univariate-data",
    "title": "2  Description",
    "section": "2.3 Functions to summarize univariate data",
    "text": "2.3 Functions to summarize univariate data\nWe will use many “functions” in R, which are actions that we request R to perform with data. Functions take one or more inputs that you provide, “under the hood” perform a series of actions, and then produces one or more outputs. For example, if we supply the mean() function in R with a set of numbers, R will take the average of those numbers and then report the result.\nFor univariate data (data based on a single variable or changing characteristic), often we are interested in describing the range of the values and their central tendency. A central tendency reflects the mean or median.\n\nrange: the minimum (min()) and maximum (max()) values\nmean: the average value (mean())\n\nThe average is the sum of the values divided by the number of values:\n\\(\\bar{X} = \\frac{\\text{sum of values}}{\\text{number of values}} = \\frac{x_1 + x_2 + ... + x_N}{N}=\\frac{1}{N}\\sum_{i=1}^{i=N} x_i\\)\nLet’s do this in R for our set of 10 values\n\n(0 + 0 + 0 + 0 + 1 + 1 + 0 + 1 + 0 + 1)/10\n\n[1] 0.4\n\n\nThe average outcome is .4. Note: when a variable contains only 0’s and 1’s its mean is the proportion of 1’s. 40% of people think the economy is doing well.\n\n2.3.1 Step-by-step: Using functions in R (overview)\nA function is an action(s) that you request R to perform on an object or set of objects. For example, we will use the mean() function to ask R to take the mean or “average” of a vector.\n\nInside the function you place inputs or “arguments.”\n\n\nmean(Outcome)\n\n[1] 0.4\n\n\nR also has functions that take the sum sum() of a vector of values.\n\nsumofvalues &lt;- sum(Outcome)\n\nAnd that count the total number of values or “length” length() of the vector.\n\nnumberofvalues &lt;- length(Outcome)\n\nNote that the below is also equivalent to the mean\n\nsumofvalues / numberofvalues\n\n[1] 0.4",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Description</span>"
    ]
  },
  {
    "objectID": "02-Description.html#combining-vectors-into-a-dataframe",
    "href": "02-Description.html#combining-vectors-into-a-dataframe",
    "title": "2  Description",
    "section": "2.4 Combining vectors into a dataframe",
    "text": "2.4 Combining vectors into a dataframe\nWhen we know multiple things about a person (or any type of “unit”), it can be helpful to organize them so it is easier to access all of the information from the same place. This will take us to our first experience working with “dataframes,” a type of rectangular data object.\nWe will first manually create a dataframe, and in future sections, we will load pre-existing datasets as dataframe objects.\nWe can use the data.frame(tag = value) function to create a rectangular dataset by supplying multiple labels or “tags,” followed by a vector of the values associated with those tags. The tags become the column names of the dataframe.\nThis is easiest to understand when you see it in practice. We will supply the tags “Outcome” and “People” as column names, and for each, the vectors containing the values.\n\n## creating a dataframe\nsurveyresults &lt;- data.frame(Outcome = c(0,0,0,0,1,1,0,1,0,1),\n                            People = c(\"Joe\",\"Sally\", \"Trevor\", \"Emily\", \"Mark\", \n                                       \"Sarah Jane\", \"Stacey\", \"Steve\", \"Phoebe\", \"Jesse\"))\n\nsurveyresults\n\n   Outcome     People\n1        0        Joe\n2        0      Sally\n3        0     Trevor\n4        0      Emily\n5        1       Mark\n6        1 Sarah Jane\n7        0     Stacey\n8        1      Steve\n9        0     Phoebe\n10       1      Jesse\n\n\nNote that this has created a single object called surveyresults.\n\n## Object type\nclass(surveyresults)\n\n[1] \"data.frame\"\n\n## ## How many observations (the rows)?\nnrow(surveyresults)\n\n[1] 10\n\n## ## How many variables (the columns)?\nncol(surveyresults)\n\n[1] 2\n\n\nIn a dataframe, we can still access a single column of values using the syntax dataframename$columnname\n\n## Access the individual columns using $\nsurveyresults$Outcome\n\n [1] 0 0 0 0 1 1 0 1 0 1\n\nsurveyresults$People\n\n [1] \"Joe\"        \"Sally\"      \"Trevor\"     \"Emily\"      \"Mark\"      \n [6] \"Sarah Jane\" \"Stacey\"     \"Steve\"      \"Phoebe\"     \"Jesse\"     \n\n\nWe can even take the mean() of these columns in the same way we did above outside of a dataframe.\n\n## Taking the mean\nmean(surveyresults$Outcome)\n\n[1] 0.4",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Description</span>"
    ]
  },
  {
    "objectID": "02-Description.html#summing-up-univariate-description",
    "href": "02-Description.html#summing-up-univariate-description",
    "title": "2  Description",
    "section": "2.5 Summing up univariate description",
    "text": "2.5 Summing up univariate description\nReturning to our example, we found that 40% of people surveyed thought the economy was doing well. Surveying people about their opinions on how the country doing is a common way that social scientists use description. We could extend this exercise in many ways going forward, even with the same question.\n\nStart with a question: How is the economy doing?\nLet’s find a measure: Ask people if the economy is doing well.\nFind data points: Multiple people (we could stop there with the average!), or add more variables:\n\nAcross time: Survey people across multiple years\nAcross type of people: Survey different partisan groups\n\n\nThese types of trends are often used by news organizations and public opinion organizations like, Gallup.\n\nThis was just a first example of description in political science. There are many other ways to describe how the economy is doing and many other topics we might want to describe in politics.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Description</span>"
    ]
  },
  {
    "objectID": "02-Description.html#loading-data-into-r",
    "href": "02-Description.html#loading-data-into-r",
    "title": "2  Description",
    "section": "2.6 Loading data into R",
    "text": "2.6 Loading data into R\nFor this section, our motivating example will be methods to measure voter turnout in the United States.\nDescribing voter turnout\n\nWhat is a typical level of voter turnout?\nHow has turnout changed over time?\nIs turnout higher in presidential years or in midterm years?\n\nHow can we measure turnout? Think about the validity, reliability, and cost of different approaches.\nExample: Dataset on Voter Turnout in the U.S. across multiple years\n\nIn this dataset, each row is an election year. Each column contains information about the population, potential voters, or voter turnout. These will help us compute the turnout rate in a given year. To work with this dataset, we need to load it into R.\n\n2.6.1 Working with datasets in R\nFor a video explainer of the code in this section, see below. The video only discusses the code. Use the notes and lecture discussion for additional context. (Via youtube, you can speed up the playback to 1.5 or 2x speed.)\n\nOften the variables we care about are stored inside of rectangular datasets that we load into R (or have created manually, like the simple example in the previous section.)\n\nThese have a number of rows nrow() and columns ncol()\nEach row is an “observation,” representing the information collected from an individual or entity\nEach column is a variable, representing a changing characteristic across multiple observations\n\nWhen we import a dataset into R, we have a few options.\nOption 1: Download dataset to your computer\n\nMove the dataset to your working directory\nIdentify the file type (e.g., csv, dta, RData, txt)\nPick the appropriate R function to match the type (e.g., read.csv(), read.dta(), load(), read.table())\nAssign the dataset to an object. This object will now be class() of data.frame\n\n\nturnout &lt;- read.csv(\"turnout.csv\")\n\n\n\nClick here for an alternative function for csv files.\n\nSome scholars prefer to use the function read_csv to load csv data. It is better at handling more complicated types of data. We will not need to use this function in this course, but you may encounter it elsewhere.\nTo use this function, the first time we will go about using it, we have to first install a “package” called readr. Packages in R give us additional tools beyond what the base version of R provides. It is like installing an extra app on your phone.\n\ninstall.packages(\"readr\")\n\nOnce we have that installed, now anytime we want to use the function, we will call (open) the “readr” package using library(), and then the syntax is just like using the read.csv function.\n\nlibrary(readr)\nturnout &lt;- read_csv(\"turnout.csv\")\n\n\nOption 2: Read file from a url provided\n\nNeed an active internet connection for this to work\nURL generally must be public\nInclude the url inside the function used to read the data\n\n\nturnout &lt;- read.csv(\"https://raw.githubusercontent.com/ktmccabe/teachingdata/main/turnout.csv\")\n\n\nclass(turnout)\n\n[1] \"data.frame\"\n\n\nYou can also open up a window to view the data:\n\nView(turnout)\n\n\n\n2.6.2 Measuring the Turnout in the US Elections\nRelevant questions with voter turnout\n\nWhat is a typical level of voter turnout?\nIs turnout higher in presidential years or in midterm years?\nIs turnout higher or lower based on voting-eligible (VEP) or voting-age (VAP) populations? We have a lot of people who are citizens 18 and older who are ineligible to vote. This makes the VEP denominator smaller than the VAP.\n\nVoter Turnout in the U.S.\n\nNumerator: total: Total votes cast (in thousands)\nDenominator:\n\nVAP: (voting-age population) from Census\nVEP (voting-eligible population) VEP = VAP + overseas voters - ineligible voters\n\nAdditional Variables and Descriptions\n\nyear: election year\nANES: ANES self-reported estimated turnout rate\nVEP: Voting Eligible Population (in thousands)\nVAP: Voting Age Population (in thousands)\ntotal: total ballots cast for highest office (in thousands)\nfelons: total ineligible felons (in thousands)\nnoncitizens: total non-citizens (in thousands)\noverseas: total eligible overseas voters (in thousands)\nosvoters: total ballots counted by overseas voters (in thousands)\n\n\n\n\n2.6.3 Getting to know your data\n\n## How many observations (the rows)?\nnrow(turnout)\n\n[1] 14\n\n## How many variables (the columns)?\nncol(turnout)\n\n[1] 9\n\n## What are the variable names?\nnames(turnout)\n\n[1] \"year\"     \"VEP\"      \"VAP\"      \"total\"    \"ANES\"     \"felons\"   \"noncit\"  \n[8] \"overseas\" \"osvoters\"\n\n## Show the first six rows\nhead(turnout)\n\n  year    VEP    VAP total ANES felons noncit overseas osvoters\n1 1980 159635 164445 86515   71    802   5756     1803       NA\n2 1982 160467 166028 67616   60    960   6641     1982       NA\n3 1984 167702 173995 92653   74   1165   7482     2361       NA\n4 1986 170396 177922 64991   53   1367   8362     2216       NA\n5 1988 173579 181955 91595   70   1594   9280     2257       NA\n6 1990 176629 186159 67859   47   1901  10239     2659       NA\n\n\nExtract a particular column (vector) from the data using the $.\n\nturnout$year\n\n [1] 1980 1982 1984 1986 1988 1990 1992 1994 1996 1998 2000 2002 2004 2008\n\n\nExtract the 10th year. Just like before! We use 10 to indicate the value of the year column in position (row 10) of the data.\n\nturnout$year[10]\n\n[1] 1998\n\n\nWe can take the mean() of a particular column, too. Let’s take it of the total number of voters.\n\nmean(turnout$total)\n\n[1] 89778.29\n\n\nAnd get the class() (Note: integer is just a type of numeric variable)\n\nclass(turnout$total)\n\n[1] \"integer\"\n\n\nWe can also use brackets in the full data frame, but because our data frame has BOTH rows and columns, we cannot just supply one position i. Instead, we have to tell R which row AND which column by using a comma between the positions.\n\nturnout[1,2] # value in row 1, column 2\n\n[1] 159635\n\n\nWe can use the column name instead\n\nturnout[1, \"VEP\"]\n\n[1] 159635\n\n\nIf we leave the second entry blank, it will return all columns for the specified row\n\nturnout[1,] # All variable values for row 1\n\n  year    VEP    VAP total ANES felons noncit overseas osvoters\n1 1980 159635 164445 86515   71    802   5756     1803       NA\n\n\nThe opposite is true if we leave the first entry blank.\n\nturnout[,2] # VEP for all rows\n\n [1] 159635 160467 167702 170396 173579 176629 179656 182623 186347 190420\n[11] 194331 198382 203483 213314",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Description</span>"
    ]
  },
  {
    "objectID": "02-Description.html#comparing-vep-and-vap-turnout",
    "href": "02-Description.html#comparing-vep-and-vap-turnout",
    "title": "2  Description",
    "section": "2.7 Comparing VEP and VAP turnout",
    "text": "2.7 Comparing VEP and VAP turnout\n\n2.7.1 Creating new variables in R\nLet’s create a new variable that is VAP that adds overseas voters.\n\n# Use $ to add a new variable (i.e., column) to a dataframe\nturnout$VAPplusoverseas &lt;- turnout$VAP + turnout$overseas\n\nUnder the hood, what this is doing is taking each value of turnout$VAP and adding it to its corresponding values of turnout$overseas.\nAnd, yes, this new variable shows up as a new column in turnout. Go ahead, View() it\n\nView(turnout)\n\nThis does not change the underlying turnout.csv file, only the turnout data.frame we are working with in the current R session.\n\nThis is an advantage of using an R script.\nYou don’t have to worry about overwriting/messing up the raw data.\nYou start from the original raw data when you load turnout.csv, and then everything else is done within R.\n\nThis is our new denominator. Now we can calculate turnout based on this denominator.\n\nturnout$newVAPturnout &lt;- turnout$total / turnout$VAPplusoverseas\n\nJust like with adding two vectors, when we divide, each value in the first vector is divided by its corresponding value in the second vector.\n\nturnout$newVAPturnout\n\n [1] 0.5203972 0.4024522 0.5253748 0.3607845 0.4972260 0.3593884 0.5404097\n [8] 0.3803086 0.4753376 0.3483169 0.4934211 0.3582850 0.5454777 0.5567409\n\n\nLet’s calculate the VEP turnout rate and turn it into a percentage. This time, we do it in one step.\n\n(total votes / VEP) \\(\\times\\) 100:\n\n\nturnout$newVEPturnout &lt;- (turnout$total / turnout$VEP) * 100\nturnout$newVEPturnout\n\n [1] 54.19551 42.13701 55.24860 38.14115 52.76848 38.41895 58.11384 41.12625\n [9] 51.65793 38.09316 54.22449 39.51064 60.10084 61.55433\n\n\nLet’s change it from a proportion to a percentage. How? Multiply each value of turnout$newVAP by 100\n\nturnout$newVAPturnout &lt;- turnout$newVAPturnout * 100\n\nThis multiplies each number within the vector by 100.\n\nturnout$newVAPturnout\n\n [1] 52.03972 40.24522 52.53748 36.07845 49.72260 35.93884 54.04097 38.03086\n [9] 47.53376 34.83169 49.34211 35.82850 54.54777 55.67409\n\n\nWhat is typical turnout?\n\nmean(turnout$newVAPturnout)\n\n[1] 45.45658\n\nmean(turnout$newVEPturnout)\n\n[1] 48.94937\n\n\nWe find that turnout based on the voting age population is lower than turnout based on the voting eligible population. This is a pattern that political scientists have examined, going back several decades. For example, in a 2001 article McDonald and Popkin show that is it the ineligible population that grew from the 1970s onward and not the population of people who simply prefer not to vote. (See more here.)\n\n\n\nMcDonald and Popkin 2001",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Description</span>"
    ]
  },
  {
    "objectID": "02-Description.html#comparing-presidential-vs.-midterm-turnout",
    "href": "02-Description.html#comparing-presidential-vs.-midterm-turnout",
    "title": "2  Description",
    "section": "2.8 Comparing Presidential vs. Midterm turnout",
    "text": "2.8 Comparing Presidential vs. Midterm turnout\nHow does turnout compare in presidential vs. midterm years? Sometimes using a single summary of turnout may obscure important underlying differences in the data. To detect these differences, we may want to summarize different parts of the data.\nOh dear. We need to extract specific years from the turnout data frame. Which rows contain the years we want?\n\nturnout$year\n\n [1] 1980 1982 1984 1986 1988 1990 1992 1994 1996 1998 2000 2002 2004 2008\n\n\nOk: rows 1,3,5,7,9,11,13,14 are the presidential. And rows 2,4,6,8,10,12 are midterms.\n\n## we can extract all of these at once by using c()\nturnout$year[c(1,3,5,7,9,11,13,14)] # presidential\n\n[1] 1980 1984 1988 1992 1996 2000 2004 2008\n\n\nLet’s take the mean VEP turnout for presidential years.\n\nmean(turnout$newVEPturnout[c(1,3,5,7,9,11,13,14)])\n\n[1] 55.983\n\n\nLet’s take the mean VEP turnout for midterm years.\n\nmean(turnout$newVEPturnout[c(2,4,6,8,10,12)])\n\n[1] 39.5712\n\n\nLet’s take the difference by storing each mean and then subtracting\n\nmean.VEP.pres &lt;- mean(turnout$newVEPturnout[c(1,3,5,7,9,11,13,14)])\nmean.VEP.mid &lt;- mean(turnout$newVEPturnout[c(2,4,6,8,10,12)])\nmean.VEP.pres -  mean.VEP.mid\n\n[1] 16.41181\n\n\nPresidential turnout, on average, is higher than midterm turnout.\n\n2.8.1 R shortcut for writing vectors\nSometimes we write numbers that are in a predictable sequence (e.g., 1,2,3,4,5). In R, we have functions that prevent us from having to type each number when this is the case.\n\nc(1,2,3,4,5) # is equivalent to:\n\n[1] 1 2 3 4 5\n\n1:5 # is equivalent to:\n\n[1] 1 2 3 4 5\n\nseq(from = 1, to = 5, by = 1)\n\n[1] 1 2 3 4 5\n\n\nWe can use the last one to our advantage to extract the midterm years, which go by 2\n\nmean(turnout$newVEPturnout[c(2,4,6,8,10,12)]) # is the same as\n\n[1] 39.5712\n\nmean(turnout$newVEPturnout[seq(2, 12, 2)])\n\n[1] 39.5712\n\n\nNot a big deal now, but imagine if you had to write 100 numbers or 1 MILLION NUMBERS!",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Description</span>"
    ]
  },
  {
    "objectID": "02-Description.html#creating-dataframes-from-within-r",
    "href": "02-Description.html#creating-dataframes-from-within-r",
    "title": "2  Description",
    "section": "2.9 Creating dataframes from within R",
    "text": "2.9 Creating dataframes from within R\nA reminder that while importing data from outside of R is the most common way to work with dataframes in R, you can create dataframes from inside R. Ultimately, a dataframe just binds together multiple vectors / columns to create a rectangular object. Let’s get additional practice with this using our voter turnout data.\nLet’s say we want to create a dataframe with columns indicating just the midterm years and their VEP turnout. These correspond to the two vectors:\n\nturnout$newVEPturnout[seq(2, 12, 2)]\nturnout$year[seq(2, 12, 2)]\n\nIn R, you can create a rectangular data.frame object with the data.frame function.\n\nWithin this function, you can make several entries that follow the syntax colname = values. We supply what we would like the name of the column to be, such as midyear, and then provide R with a set of values. We can then provide a comma and add more columns.\n\nYou just want to make sure each column has the same number of values.\n\n\n\nmidtermdata &lt;- data.frame(midyear = turnout$year[seq(2, 12, 2)], \n                          VEPturnout = turnout$newVEPturnout[seq(2, 12, 2)])\n\nYou can supply the values for each column using objects or just vectors of raw numeric values like the below:\n\nmidtermdata &lt;- data.frame(midyear = c(1982, 1986, 1990, 1994, 1998, 2002), \n                          VEPturnout = c(42.13701, 38.14115, 38.41895, 41.12625, 38.09316, 39.51064))\n\nThe result is a nice rectangular dataframe similar to what we loaded using the turnout.csv dataset from outside of R.\n\nmidtermdata\n\n  midyear VEPturnout\n1    1982   42.13701\n2    1986   38.14115\n3    1990   38.41895\n4    1994   41.12625\n5    1998   38.09316\n6    2002   39.51064\n\n\nNow, because our dataframe has a different name. If we want to access columns from this dataframe, we start with midterm$ followed by the variable name.\n\nmidtermdata$midyear\n\n[1] 1982 1986 1990 1994 1998 2002",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Description</span>"
    ]
  },
  {
    "objectID": "02-Description.html#wrapping-up-description",
    "href": "02-Description.html#wrapping-up-description",
    "title": "2  Description",
    "section": "2.10 Wrapping Up Description",
    "text": "2.10 Wrapping Up Description\nIn this section, we have described voter turnout using multiple measures and types of elections. There are several other questions that political scientists may be interested in when it comes to voter turnout.\nFor example, during and following the 2020 elections, many states passed laws that changed election procedures: Ability to vote by mail, Ballot dropboxes, Length of early voting. What else?\n\nWhat effect (if any) do these laws have on voter turnout?\n\nIn the next section, we start to examine how to evaluate causal claims.\n\n2.10.1 Summary of R tools\nWe have touched on a number of R tools thus far. Here is a summary of some of the key items to remember going forward:\n\nsetwd(): sets the working directory in R, which tells R which folder on your computer contains the datasets or other R files where you will be working. You should get into the habit of setting your working directory each time you work in RStudio.\n\nCan set this in the toolbar Session -&gt; Set Working Directory -&gt; Choose Directory, followed by clicking the “Open” button on the folder where you want to work.\nExample: setwd(\"~/Downloads/Data Science\")\n\n##: Hashtags are used to help annotate your code. Anything behind a hashtag is treated as plain text\n+ - * /: These are some of the mathematical operators you can use in R\n\nYou can also control which operations are performed first using () just like you would do with math outside of R. For example, try to compare the answer to 6 + 4 * 3 with (6 + 4) * 3\n\n&lt;-: This is an assignment tool that allows us to store calculations, vectors, datasets, and more as objects in R.\n\nExample: sum53 &lt;- 5 + 3 creates an object called sum53 that stores the calculation on the right.\n\n[]: Brackets are used to extract specific components of objects we create. The number(s) inside the brackets tell us which entries to extract.\n\nExample: Outcome[2] will tell us to extract the second entry in the object Outcome\nNote: when we use datasets, the brackets will have two entries, one corresponding to the row entry and one corresponding to the column. Example turnout[1,2] means the entry in the first row and second column.\n\n\nFunctions We have already started using a number of functions in R, which are operations we ask R to do for us, such as creating vectors, importing data, or summarizing data by finding the mean, range, etc. Functions come in the same format, which starts with the function name followed by parentheses. Example: mean(). Each function then takes a particular input(s). When you “run” a line of code with a function, R applies the function to the input.\n\nc(): This is a function that combines a set of values into a vector in R. The values can be numbers or text items and should be separated by commas. If text, each text item should be in quotation marks.\n\nExample: Outcome &lt;- c(3, 4, 6, 2, 1)\nExample: People &lt;- c(\"Sam\", \"Julie\", \"Mark\")\n\nmean(), median(), min(), max(), range(): These functions summarize vectors that are numeric/integers in nature.\n\nExample mean(Outcome) takes the average of the values in the Outcome vector\n\nread.csv(): This function loads a rectangular .csv file into R as a data.frame\n\nExample: turnout &lt;- read.csv(\"turnout.csv\")\nNot all datasets will be .csv files. In the future, we will use other functions, such as load() or read.dta() to import datasets of different file types.\n\n\nDataframes\nWe have started working with dataframes in R. These objects are rectangular datasets that include a collection of vectors. Every column in a dataframe generally represents a different concept or “variable,” while each row represents a different unit or “observation.”\n\n$: When we are working with vectors that are inside of a dataframe (the columns inside of a dataframe), we use the $ to access them.\n\nExample: turnout$year will show us the values in the year column vector inside our turnout rectangular dataframe\n\nnrow(), ncol(), dim(), head(), names(): These functions help us explore the dataframes by telling us the number of rows and columns (the dimensions), giving us a sneak peek of the first 6 rows of the dataframe, or showing us the names of the variables (columns) in the data.\n\nExample: nrow(turnout)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Description</span>"
    ]
  },
  {
    "objectID": "03-CausalityI.html",
    "href": "03-CausalityI.html",
    "title": "3  Causation with Experiments",
    "section": "",
    "text": "3.1 What separates causation from correlation?\nRecall that we said, four primary goals of social science include:\nIn this section, we start to explore the goal of explanation–making causal claims.\nHere’s an example. In 2016, researchers at the NY Times noticed that areas in the country where the television show Duck Dynasty was popular also tended to support Donald Trump at higher rates.\nIf we put our social scientist hat on, we might want to distinguish whether this is a causal or, more likely, just a correlational relationship:\nCausal Question: Does the manipulation of one factor (the treatment), (holding everything else constant), cause a change in an outcome?",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Causation with Experiments</span>"
    ]
  },
  {
    "objectID": "03-CausalityI.html#what-separates-causation-from-correlation",
    "href": "03-CausalityI.html#what-separates-causation-from-correlation",
    "title": "3  Causation with Experiments",
    "section": "",
    "text": "Correlation: Areas that watch Duck Dynasty are more likely to support Trump (degree to which two variables “move together”)\nCausality: Watching Duck Dynasty (vs. not watching) increases your support of Trump.\n\n\n\n3.1.1 Potential Outcomes Framework\nWhen studying causal relationships, we distinguish two concepts:\n\ntreatment: variable whose change may produce a change in the outcome (e.g., watching vs. not watching Duck Dynasty)\noutcome (\\(Y\\)): what may change as a result (e.g., their support for Trump)\n\nWe imagine two states of the world or “potential outcomes.”\n\n\\(Y(1)\\): the outcome if the treatment is administered (e.g., watching the show)\n\\(Y(0)\\): the outcome if the treatment is NOT administered or maybe something else is (e.g., not watching the show)\n\nPolitical Science Example: How does voter turnout (\\(Y\\)) change as a result of varying whether someone receives a mail-in ballot (the treatment)?\n\n\\(Y(\\text{sent a mail-in ballot})\\): do you vote or not\n\\(Y(\\text{not sent a mail-in ballot})\\): do you vote or not\n\nWe compare your likelihood of turning out to vote in a world where you did receive a mail-in ballot vs. a counterfactual state of the world in which you did not receive a mail-in ballot, generally assuming that this is the only thing that is different between these two potential states of the world.\nIn many cases in social science, we might start by observing some connection in the real world. To make a causal claim, we then have to imagine what that counterfactual state of the world would be. Examples:\nCausal Question: Does the minimum wage increase the unemployment rate?\n\n(Hypothetical) Factual: An unemployment rate went up after the minimum wage increased\nImplied Counterfactual: Would the unemployment rate have gone up, had the minimum wage increase not occurred?\n\nCausal Question: Does the gender of a political messenger influence the persuasiveness of the message?\n\n(Hypothetical) Factual: Suppose a political messenger perceived as a man had a somewhat persuasive effect delivering a message on abortion.\nImplied Counterfactual: Would a political messenger perceived as a woman have a similar or different persuasive effect?\n\nWe use causal logic all of the time outside of social science.\nFor example, many viewers get angry after watching the movie Titanic because they believe Jack did not have to die. We can place their claims in our causal framework:\n\n\nOutcome: Jack Surviving the Titanic\nPotential Outcomes in two states of the world\n\nRose did not share the floating door, and Jack died.\nCounterfactual question: If Rose had shared the floating door, would Jack have lived?\n\n\nIn Bit by Bit, Matt Salganik notes that sometimes cause-and-effect questions are implicit. For example, in more general questions about maximization of some performance metric, we might want to compare several alternatives:\nThe question “What color should the donate button be on an NGO’s website?” is really lots of questions about the effect of different button colors on donations.\n\nFactual: A voter donates some amount with a black button\nCounterfactual: What would a voter donate if the button were blue?\nCounterfactual: What would a voter donate if the button were red?\n\nWhat other causal questions might social scientists or data scientists ask?\n\n\n3.1.2 Causal Effects\nWhen we are conducting a causal analysis, we will want to estimate a causal effect.\n\nCausal effects are all about ideal comparisons between treated vs. untreated\n\nA causal effect is the change in the outcome Y that is caused by a change in the treatment variable.\n\n\\(Y(1) - Y(0)\\) = causal effect or “treatment effect”\ne.g., Donation if contacted - Donation if not contacted\n\nWe often want to know the average treatment effect in some population, not just the causal effect for a single individual. Here, we might ask, on average, how much would our outcome change if our units were treated instead of untreated. To do so, we simply sum up all of the causal effects and divide them by the number of units in our population.\n\n\\(\\frac{1}{N} \\sum_{i=1}^N (Y_i (1)-Y_i (0))\\) = “average treatment effect” (ATE)\n\ne.g., Average donations if contacted - Average donations if not contacted\n\n\nNote: If the math above is helpful, you can use it. If it is difficult to read, focus on the plain language definitions that go before it. The notation here is less important than the conceptual understanding.\n\n\n3.1.3 Fundamental Problem of Causal Inference\nThe problem: Fundamental Problem of Causal Inference\nWhat makes the evaluation of causal claims difficult, is that in the real world, we suffer from the fundamental problem of causal inference:\n\nFor any individual, we only get to see (observe) the result from one state of the world\n\nThis makes that subtraction of potential outcomes impossible.\n\n\n(Unless we are in Groundhog Day)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Causation with Experiments</span>"
    ]
  },
  {
    "objectID": "03-CausalityI.html#randomized-controlled-trials",
    "href": "03-CausalityI.html#randomized-controlled-trials",
    "title": "3  Causation with Experiments",
    "section": "3.2 Randomized Controlled Trials",
    "text": "3.2 Randomized Controlled Trials\nOne approach for addressing the fundamental problem of causal inference is to simulate two potential states of the world through random assignment: Randomized Controlled Trials / Experiments\nExperiments approximate an ideal factual vs. counterfactual comparison\n\nWe randomly assign one group to receive a “treatment” and another not to receive a treatment (the control)\n\nThere can be more than two groups. The key is that each group varies (is manipulated) in some way.\n\nWhen treatment assignment is randomized, the only thing that distinguishes the treatment group from the control group, besides the treatment itself, is chance.\n\n\n\n\nSalganik Bit by Bit Chapter 4.4\n\n\nThis allows us to compare the average outcomes between groups in order to estimate our causal effects (more on this below).\n\n3.2.1 Experiments: Why Randomize?\nRandomization is essential for being able to identify and isolate the causal effect of the treatment on the outcome.\nWithout randomization, there may be several reasons why two groups differ beyond the treatment of interest.\n\nFor example, if we randomly assigned half of Rutgers seniors to go to a Sabrina Carpenter concert and half to go to a Bruce Springsteen concert we would expect the groups to have about equal proportions of female students, average age, racial composition, majors, etc.\n\n(If we didn’t randomly assign, and just let people “select” into watching a particular concert, the groups could look very different.)\n\n\nBut because we randomized assignment, on average, we’d expect the two groups to be identical except for the treatment– in this case, which concert they attended.\n\nGreat news! This means any differences in the outcomes between the two groups can be attributed to the treatment. So if we wanted to see if going to a Bruce Springsteen show leads people to hold more favorable opinions of New Jersey, we could compare the average attitudes toward NJ among seniors who attended the show vs. attended the Carpenter show.\n\n\n\n3.2.2 Experiments: How to Analyze\nDifference in Means: We compare each group’s average outcome by subtracting one from the other to estimate the average treatment effect (ATE) aka the average causal effect of the treatment.\n\n\\(\\widehat{ATE} = \\bar{Y}(treatment) - \\bar{Y}(control)\\)\n\nThis is an estimate of, on average, how much our outcome would change if units went from being untreated to treated.\n\nE.g., on average how much a person donates to a campaign if contacted by phone compared to if not contacted by phone.\n\n\n\n3.2.3 Ingredients of an Experiment\nFrom Bit by Bit\n\nFor every experiment, you should be able to\n\nState the causal question or relationship of interest\nDescribe how the experiment will be implemented (e.g., recruitment of subjects)\nIdentify and describe the randomization into treatment group(s) and control group and what happens in each group\nIdentify the outcome of interest, how it is measured\nEvaluate the relevant comparison (between two different experimental conditions)\n\nWe will turn to an example in the next section.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Causation with Experiments</span>"
    ]
  },
  {
    "objectID": "03-CausalityI.html#application-is-there-racial-discrimination-in-the-labor-market",
    "href": "03-CausalityI.html#application-is-there-racial-discrimination-in-the-labor-market",
    "title": "3  Causation with Experiments",
    "section": "3.3 Application: Is there racial discrimination in the labor market?",
    "text": "3.3 Application: Is there racial discrimination in the labor market?\nMarianne Bertrand and Sendhil Mullainathan. 2004. “Are Emily and Greg more employable than Lakisha and Jamal? A field experiment on labor market discrimination.”\n“We perform a field experiment to measure racial discrimination in the labor market. We respond with fictitious resumes to help-wanted ads in Boston and Chicago newspapers.”\n\nRecruitment: Construct resumes to send to ads\nRandomization: To manipulate perception of race, each resume is (randomly) assigned\nTreatment: either a very African American sounding name\nControl: or a very White sounding name\nOutcome: Does the resume receive a callback?\nComparison: Callback rates for African American (sounding) names vs. White (sounding) names (the difference in means between groups)\n\nFor a video explainer of the code in this section, see below. The video only discusses the code. Use the notes and lecture discussion for additional context. (Via youtube, you can speed up the playback to 1.5 or 2x speed.)\n\nLet’s load the data. Note: When we have variables that are text-based categories, we may want to tell R to treat these “strings” of text information as factor variables, a particular type of variable that represents data as a set of nominal (unordered) or ordinal (ordered) categories. We do this with the stringsAsFactors argument.\n\nresume &lt;- read.csv(\"resume.csv\", stringsAsFactors = T)\n\n\nresume &lt;- read.csv(\"https://raw.githubusercontent.com/ktmccabe/teachingdata/main/resume.csv\",\n                   stringsAsFactors = T)\n\nVariables and Description\n\nfirstname: first name of the fictitious job applicant\nsex: sex of applicant (female or male)\nrace: race of applicant (black or white)\ncall: whether a callback was made (1 = yes, 0 = no)\n\nThe data contain 4870 resumes and 4 variables.\n\nnrow(resume) # number of rows\n\n[1] 4870\n\nncol(resume) # number of columns\n\n[1] 4\n\ndim(resume) # number of rows and columns\n\n[1] 4870    4\n\n\nNote: These data look a little different from what we used last week. For example, the sex and race variables contain words, not numbers.\n\nhead(resume)\n\n  firstname    sex  race call\n1   Allison female white    0\n2   Kristen female white    0\n3   Lakisha female black    0\n4   Latonya female black    0\n5    Carrie female white    0\n6       Jay   male white    0\n\n\n\n3.3.1 Variable classes\nWe can check the class of each variable: Look, we have a new type, a “factor” variable.\n\nclass(resume$firstname)\n\n[1] \"factor\"\n\nclass(resume$sex)\n\n[1] \"factor\"\n\nclass(resume$race)\n\n[1] \"factor\"\n\nclass(resume$call)\n\n[1] \"integer\"\n\n\nWe have now encountered numeric, character, and factor vectors and/or variables in R. Note: This is simply how R understands them. Sometimes R can get it wrong. For example, if we write:\n\nsomenumbers &lt;- c(\"1\", \"3\", \"4\")\nclass(somenumbers)\n\n[1] \"character\"\n\n\nBecause we put our numbers in quotation marks, R thinks the values in somenumbers are text. The number “3” might as well be the word “blue” for all R knows. Fortunately, we can easily switch between classes.\n\nsomenumbers &lt;- as.numeric(somenumbers)\nclass(somenumbers)\n\n[1] \"numeric\"\n\n\nHere, we used as.numeric() to overwrite and change the character vector into a numeric vector.\nRules of Thumb\n\nUsually, we want character variables to store text (e.g., open-ended survey responses)\nWe want numeric variables to store numbers.\nUsually, we want factor variables to store categories.\n\nWithin R, factor variables assign a number to each category, which is given a label or level in the form of text.\nCategories might be ordinal or “ordered” (e.g., Very likely, Somewhat likely, Not likely) or\nUnordered (e.g., “male”, “female”)\nR won’t know if a factor variable is ordered or unordered. Alas, we have to be smarter than R.\nR might think you have a character variable when you want it to be a factor or the reverse.\n\nThat’s when as.factor() and as.character() are useful.\n\n\nAlways check class() to find out the variable type",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Causation with Experiments</span>"
    ]
  },
  {
    "objectID": "03-CausalityI.html#making-tables",
    "href": "03-CausalityI.html#making-tables",
    "title": "3  Causation with Experiments",
    "section": "3.4 Making tables",
    "text": "3.4 Making tables\nA nice thing about numeric and factor variables is we can use the table command to see how many observations in our data fall into each category or numerical value.\n\n## Example: how many black vs. white sounding resumes\ntable(resume$race)\n\n\nblack white \n 2435  2435 \n\n\nAs mentioned, factor variables have levels:\n\nlevels(resume$race)\n\n[1] \"black\" \"white\"\n\n\n\n3.4.1 Crosstabulation\nWe can also use the table command to show a crosstabulation: a table that displays the frequency of observations across two variables.\n\n## Example: how many black vs. white sounding resumes by call backs\n## We can label the two dimensions of the table with the =\ntable(calledback = resume$call, race = resume$race)\n\n          race\ncalledback black white\n         0  2278  2200\n         1   157   235",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Causation with Experiments</span>"
    ]
  },
  {
    "objectID": "03-CausalityI.html#conditional-means",
    "href": "03-CausalityI.html#conditional-means",
    "title": "3  Causation with Experiments",
    "section": "3.5 Conditional Means",
    "text": "3.5 Conditional Means\nRecall how to take a mean of a variable in our data. For example, let’s take the mean of the variable call.\n\nmean(resume$call)\n\n[1] 0.08049281\n\n\nThis gives us the average callbacks (or callback rate) for everyone in our data. In experiments, we want to take the mean for a specific group within our data– the treatment group, and then the mean for the control group.\nSomehow, we have to identify, within our data, which rows were part of the treatment group and which were a part of the control group. In this study, we want to identify resumes with an assigned name perceived to be black vs. perceived to be white. This is in our race variable.\nWe will cover a couple of tools to do this, with the first being tapply.\nTo find how the average of one variable (e.g., our outcome- the callback rate) varies across different categories of our factor variable, we use tapply().\n\n## take the mean of input1 by categories of input2\n## mean of the call variable conducted separately by race\ntapply(resume$call, INDEX=resume$race, mean)\n\n     black      white \n0.06447639 0.09650924 \n\n\nThis tells us the callback rate for each group of people in our data. That’s not the only way to do this, however. We can also use the tools below.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Causation with Experiments</span>"
    ]
  },
  {
    "objectID": "03-CausalityI.html#relational-operators-in-r",
    "href": "03-CausalityI.html#relational-operators-in-r",
    "title": "3  Causation with Experiments",
    "section": "3.6 Relational Operators in R",
    "text": "3.6 Relational Operators in R\nGoal: Compare callback rates for white sounding names to black sounding names, so we need to be able to filter by race.\nGood news: We have several relational operators in R that evaluate logical statements:\n\n==, &lt;, &gt;, &lt;=, &gt;=, !=\nWe have a statement and R evaluates it as TRUE or FALSE\n\n\n## for each observation, does the value of race equal \"black\"?\nresume$race == \"black\"\n\nBy putting this logical statement within [ ], we are asking R to take the mean() of the variable resume$call for the subset of observations for which this logical statement is TRUE.\n\nmean(resume$call[resume$race == \"black\"])\n\n[1] 0.06447639\n\n\nUltimately, each of these paths has led us to a place where we can estimate the average treatment effect by calculation the difference in means: the difference in callback rates for black and white applicants.\nWe said the ATE = \\(\\bar{Y}(treatment) - \\bar{Y}(control)\\)\n\nate &lt;- mean(resume$call[resume$race == \"black\"]) - \n  mean(resume$call[resume$race == \"white\"])\nate\n\n[1] -0.03203285\n\n\nHow can we interpret this? Do white applicants have an advantage?",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Causation with Experiments</span>"
    ]
  },
  {
    "objectID": "03-CausalityI.html#subsetting-data-in-r",
    "href": "03-CausalityI.html#subsetting-data-in-r",
    "title": "3  Causation with Experiments",
    "section": "3.7 Subsetting data in R",
    "text": "3.7 Subsetting data in R\nSubsetting Dataframes in R\nMaybe we are interested in differences in callbacks for females. One approach for looking at the treatment effect for female applicants, only, is to subset our data to include only female names.\n\nTo do this, we will assign a new data.frame object that keeps only those rows where sex == \"female\" and retains all columns\nBelow are two approaches for this subsetting, one that uses brackets and one that uses the subset function\n\n\n## option one\nfemales &lt;- resume[resume$sex == \"female\", ]\n## option two using subset()- preferred\nfemales &lt;- subset(resume, sex == \"female\")\n\nNow that we have subset the data, this simplifies estimating the ATE for female applicants only.\nWe said the ATE = \\(\\bar{Y}(treatment) - \\bar{Y}(control)\\)\n\nate.females &lt;- mean(females$call[females$race == \"black\"]) -\n  mean(females$call[females$race == \"white\"])\nate.females\n\n[1] -0.03264689\n\n\n\n3.7.1 Getting Booooooooolean\nWe can make this slightly more complex by adding more criteria. Let’s say we wanted to know the callback rates for just female black (sounding) names.\n\nR allows use to use & (and) and | (or)\n\n\nfemaleblack &lt;- subset(resume, sex == \"female\" & race == \"black\")\n\nWe could now find the callback rate for Black females using the tools from above:\n\nmean(femaleblack$call)\n\n[1] 0.06627784",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Causation with Experiments</span>"
    ]
  },
  {
    "objectID": "03-CausalityI.html#creating-new-variables-using-conditional-statements",
    "href": "03-CausalityI.html#creating-new-variables-using-conditional-statements",
    "title": "3  Causation with Experiments",
    "section": "3.8 Creating New Variables using Conditional statements",
    "text": "3.8 Creating New Variables using Conditional statements\nNote: We will cover each of these tools in this section, time permitting. Otherwise, we will return to it in a future section.\nWe can instead create a new variable in our main dataframe. Let’s make a variable that takes the value 1 if a name is female and black sounding and 0, otherwise\n\n# Initialize a new variable called femaleblackname\nresume$femaleblackname &lt;- NA\n# Assign a 1 to our new variable where sex is female and race is black\nresume$femaleblackname[resume$sex == \"female\" & resume$race == \"black\"] &lt;- 1\n# Assign a 0 if sex is not female OR if race is not black\nresume$femaleblackname[resume$sex != \"female\" | resume$race != \"black\"] &lt;- 0\n\nWe can check our work\n\ntable(name = resume$firstname, femaleblack = resume$femaleblackname)\n\n          femaleblack\nname         0   1\n  Aisha      0 180\n  Allison  232   0\n  Anne     242   0\n  Brad      63   0\n  Brendan   65   0\n  Brett     59   0\n  Carrie   168   0\n  Darnell   42   0\n  Ebony      0 208\n  Emily    227   0\n  Geoffrey  59   0\n  Greg      51   0\n  Hakim     55   0\n  Jamal     61   0\n  Jay       67   0\n  Jermaine  52   0\n  Jill     203   0\n  Kareem    64   0\n  Keisha     0 183\n  Kenya      0 196\n  Kristen  213   0\n  Lakisha    0 200\n  Latonya    0 230\n  Latoya     0 226\n  Laurie   195   0\n  Leroy     64   0\n  Matthew   67   0\n  Meredith 187   0\n  Neil      76   0\n  Rasheed   67   0\n  Sarah    193   0\n  Tamika     0 256\n  Tanisha    0 207\n  Todd      68   0\n  Tremayne  69   0\n  Tyrone    75   0\n\n\nLet’s say we wanted to know the callback rates for just female black (sounding) names.\n\nmean(femaleblack$call)\n\n[1] 0.06627784\n\nmean(resume$call[resume$femaleblackname == 1])\n\n[1] 0.06627784\n\n\nBINGO: two ways to do the same thing.\n\n3.8.1 ifelse statements\nRemember how we created the variable femaleblack, well there is another way to do that in R using what are called conditional statements with ifelse().\n\nCan be read: If this relational statement is TRUE, I assign you A, otherwise I assign you B\n\n\nresume$femaleblackname &lt;- ifelse(resume$sex == \"female\" &\n                                   resume$race == \"black\", 1, 0)\n\nCan be read: If sex is female and race is black, give the observation in the new variable a 1, otherwise give it a 0.\nLike most things, we can also get more complicated here. Let’s say we wanted to create a variable that indicated both race and sex.\n\nCan be read: If this relational statement is TRUE, I assign you A,\nOtherwise if this second relational statement is TRUE, I assign you B,\nOtherwise if this third relational statement is TRUE, I assign you C,\nOtherwise I assign you D\n\n\nresume$racesex &lt;- ifelse(resume$sex == \"female\" &\n                                   resume$race == \"black\", \"FemaleBlack\", \n                         ifelse(resume$sex == \"female\" &\n                                   resume$race == \"white\", \"FemaleWhite\",\n                                ifelse(resume$sex == \"male\" &\n                                   resume$race == \"white\", \"MaleWhite\", \"MaleBlack\")))\n\nNote: what you assign can be numeric or text.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Causation with Experiments</span>"
    ]
  },
  {
    "objectID": "03-CausalityI.html#types-of-experiments",
    "href": "03-CausalityI.html#types-of-experiments",
    "title": "3  Causation with Experiments",
    "section": "3.9 Types of Experiments",
    "text": "3.9 Types of Experiments\nExperiments can vary:\n\nSetting: Lab, Survey, Field\nMode: Analog vs. Digital\nAnd in Validity\n\nInternal: were the processes conducted in a correct, reliable way?\nExternal: can we generalize from the experiment to the real world, or would the results change?\nContext: Would people act the same way outside of the experiment?\nRecruitment: Are the people in our experiment representative of the people we care about?\nConstruct\n\nTreatment: Is the experimental treatment similar to what people see in the real world?\nOutcome: Is the outcome something we care about in the real world? Are we measuring it in a realistic, accurate way?\n\n\n\nReview Bit by Bit chapter 4 for more examples of social science experiments.\nExample: Televised Incivility, Trust and Emotions (Mutz and Reeves)\n\nParticipants sat alone in a room with electrodes attached to their hands to measure skin conductance. Subjects viewed 20 minutes of a political debate created for the experiment, which varied in civility and politeness. Results showed respondents had more of an emotional response to the uncivil condition and expressed less trust in politicians.\nExample: Online Survey Experiment\nAudience Costs (Tomz)\nA country sent its military to take over a neighboring country. The attacking country was led by a [dictator, who invaded OR democratically elected government, which invaded] [to get more power and resources OR because of a longstanding historical feud.\nThe attacking country had a [strong military, so it would OR weak military, so it would not] have taken a major effort for the United States to help push them out.\nA victory by the attacking country would [hurt OR not affect] the safety and economy of the United States.\n\nParticipants provided a different version of the vignette above, and a reaction by the president\nPresidential approval varies depending on the president’s response and the nature of the situation\n\nExample: Digital Field Experiments in Campaigns\nExample: A/B Testing in Campaigns\n\nEmails are virtually costless. Very easy to ask: Are people more likely to open them with X subject or Y subject or Z subject?",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Causation with Experiments</span>"
    ]
  },
  {
    "objectID": "03-CausalityI.html#wrapping-up-causation-with-experiments",
    "href": "03-CausalityI.html#wrapping-up-causation-with-experiments",
    "title": "3  Causation with Experiments",
    "section": "3.10 Wrapping Up Causation with Experiments",
    "text": "3.10 Wrapping Up Causation with Experiments\nIn this section, we have discussed what it means to make a causal claim, why it is essentially impossible to make causal comparisons in real life due to the fundamental problem of causal inferences, and how experiments can help us make comparisons that approximate our causal ideals.\nIn the next section, we start to examine how to visualize data.\n\n3.10.1 Summary of R tools in this section\nHere are some of the R tools we used in this section:\n\ntable(): this function summarizes the frequency of observations that take a particular value. The input is one or more variables in your data.\n\nE.g., table(resume$sex) or table(resume$sex, resume$call)\n\ntapply(): this function applies a given operation like mean to whichever variable is in the first position, separately or “conditionally” by different values of the variable in the second “index” position.\n\nE.g., tapply(resume$call, INDEX=resume$race, mean) finds the average callbacks for applicants separately for different races of applicants in the data.\n\n== &gt; &lt; &gt;= &lt;= !=: Relational operators help us set up “logical statements” in R that are evaluated as TRUE or FALSE\n\nE.g., resume$race == \"black\" evaluates whether for each observation in the race column is “black” in which case the statement is TRUE or not black, in which case the statement is FALSE\nE.g., resume$call &lt; 1 evaluates whether for each observation in the call column has a value less than one in which case the statement is TRUE or not less than 1, in which case the statement is FALSE\nWe can then isolate certain parts of columns using relational operators and the brackets []. For example we can take the mean callbacks for applicants who are black using mean(resume$call[resume$race == \"black\"])\n\n& and |: These are boolean operators that allow us to combine multiple relational operators using an AND statement (&) or an OR statement |. Note the bar is a bar that is usually above your backslash key and not a capitalized i.\n\nE.g., mean(resume$call[resume$race == \"black\" & resume$sex == \"female\"])\n\nsubset(): We can subset whole rows of our data using this function. It takes two inputs– the first is the name of the original dataframe, and the second is a relational statement. Usually we store this output in R by assigning the results to a new object, a dataframe that contains only those rows for which the logical statement using the relational operators is true. E.g., females &lt;- subset(resume, sex == \"female\") subsets our data to keep only those rows where applicants were female.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Causation with Experiments</span>"
    ]
  },
  {
    "objectID": "04-Visualization.html",
    "href": "04-Visualization.html",
    "title": "4  Visualization",
    "section": "",
    "text": "4.1 Application: Social Status and Economic Views\nIn this section, we discuss a set of tools for data visualization in R.\nGoals of data visualization\nThere are many resources for ideas and best practices for data visualization. See here and here.\nWe will cover many types of visuals, each typically designed for a different purpose.\nWhat to communicate?\nWe are going to explore different types of visualizations through different social science examples. The first application we visit is a survey experiment.\nThal, A. (2020). The desire for social status and economic conservatism among affluent Americans. American Political Science Review, 114(2), 426-442.\nIn the experiment, affluent Americans are randomly assigned to encounter Facebook posts in which others broadcast their economic success. These posts are designed in a way that encourages affluent respondents to view economic success as a means of achieving social status.\nCausal claims\nThe experiment includes a sample of 2010 affluent Americans– people who report household incomes in the top 10 percent of the U.S. income distribution.\nExperiment Ingredients:\nSnapshot of status conditions\nSnapshot of Concrete and Placebo comparison conditions\nCan you put this into the potential outcomes framework?",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "04-Visualization.html#application-social-status-and-economic-views",
    "href": "04-Visualization.html#application-social-status-and-economic-views",
    "title": "4  Visualization",
    "section": "",
    "text": "“I expect that exposure to these posts will cause affluent Americans to become more supportive of conservative economic policies.”\n“I also expect that exposure to these posts will cause especially large increases in economic conservatism among affluent men.”\n\n\n\n\nCausal Question: Does desire for social status influence economic views of affluent Americans?\nRecruitment: Ask affluent Americans to take a survey online\nRandomization: Randomly assign respondents to view different fictional Facebook posts designed to signal different motivations\nOutcome: an index based on respondents’ support for decreasing “taxes on households making $150,000 or more a year,” support for decreasing the “taxes on money people make from selling investments, also referred to as capital gains,” and support for decreasing “government regulation of business and industry.”\nComparison: Average economic views between experimental conditions.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "04-Visualization.html#boxplots",
    "href": "04-Visualization.html#boxplots",
    "title": "4  Visualization",
    "section": "4.2 Boxplots",
    "text": "4.2 Boxplots\nFor a video explainer of the code for boxplots and barplots, see below. The video only discusses the code. Use the notes and lecture discussion for additional context. (Via youtube, you can speed up the playback to 1.5 or 2x speed.)\n\nLet’s load the data! Here, note that the data file is in a .RData format instead of .csv. This means that instead of using read.csv, we should use a function to load the data that is suitable for the .RData format. This will be load. That function works the following way:\n\nload(\"status.RData\")\n\nAfter running the above code, an object will show up in your R environment.\n\nhead(status)\n\n        condition male   econcon\n2        Concrete    1 0.7500000\n3     Self-Esteem    1 1.0000000\n4         Placebo    1 0.6666667\n5     Self-Esteem    0 0.2500000\n6     Self-Esteem    0 1.0000000\n7 Social Approval    0 0.8333333\n\n\nThe data include the following variables\n\ncondition: Placebo, Concrete, Self-Esteem, Social Approval, Conspicuous Consumption\ngender: 1= male; 0= otherwise\neconcon: Economic views. Numeric variable from 0 to 1, with higher values reflecting more conservative views\n\n\n4.2.1 Data Summary: Boxplot\nCharacterize the distributions of continuous numeric variables at once\n\nFeatures: box, whiskers, outliers\nWe will supply the function with a column in our data, and the boxplot displays the distribution of that variable.\n\n\nFigure from Will Lowe\nHere is an example of the boxplot using our econcon variable.\n\nWe have added a title and y-axis label to the plot through the main and ylab arguments. Play around with changing the words in those arguments.\n\n\nboxplot(status$econcon,\n        main=\"Economic Views in the Survey Sample\",\n        ylab=\"Economic Views\")\n\n\n\n\n\n\n\n\nAfter you execute the plot code, a preview of the plot should appear in the bottom-right window of RStudio.\nBoxplots are also useful for data summary across multiple distribution: boxplot(y ~ x, data = d)\n\nboxplot(econcon ~ condition, data=status,\n        main=\"Economic Views by Experimental Condition\",\n        ylab=\"Economic Views\",\n        names = c(\"Placebo\", \"Concrete\", \"Conspicuous\", \n                  \"Self-Esteem\", \"Social\"),\n        xlab = \"Experimental Condition\",\n        col = c(\"red3\", rep(\"dodgerblue\", 4)))\n\n\n\n\n\n\n\n\nThe additional arguments are just aesthetics. Play around with different settings.\n\nFor example, can you change the code to make the first two boxes red? Colors are supplied as a vector using the col = argument.\n\nTo explore colors in R, run this function colors() in your R console.\n\n\nHow should we interpret these results? Does status or social approval motivation, specifically, influence economic views? What about other potential motivations?",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "04-Visualization.html#barplots",
    "href": "04-Visualization.html#barplots",
    "title": "4  Visualization",
    "section": "4.3 Barplots",
    "text": "4.3 Barplots\nComparing frequencies (raw N), proportions, and/or means across categories\n\n\n\n\n\n\n\n\n\nWe will use the barplot() function.\n\nIn contrast to the boxplot, the barplot function takes a vector of values that will serve as the top of the bars in the plot– it does not summarize a variable from within the function\n\nE.g., we could supply it a set of means to plot, not a raw variable\n\nMany of the other arguments are aesthetics similar to those when working with boxplot.\nThis means that barplots are pretty easy to create in R. We can supply it a short vector of any values (e.g., valuesbar &lt;- c(20, 30, 40, 10)), and we could also supply it a vector of any names to label those values.\n\n\n## Example\nvaluesbar &lt;- c(20, 30, 40, 10)\n\nnamesbar &lt;- c(\"Livingston Dining \\n Commons\",\n              \"Neilson \\n Dining Hall\",\n              \"Busch \\n Dining Hall\",\n              \"Brower \\n Commons\")\n\nbarplot(valuesbar,\n        names=namesbar,\n        cex.names = .6,\n        main=\"Hypothetical Evaluation of RU Dining\",\n        ylab=\"Percent Prefer Dining Option\",\n        cex.lab = .7, \n        col=\"red3\")\n\n-   For real applications, this means we could supply a barplot with the output of a `tapply()` function, a `table()` summarizing a single variable, or a set of `mean()` values we have combined into a vector using `c()`.\nFor example, in experiments, we may use barplots to compare the mean from the treatment group(s) \\(\\bar{Y}(1)\\) to the control \\(\\bar{Y}(0)\\) on some outcome. Let’s do it!\n\nFirst, we need the means. Let’s find the conditional means of economic views.\n\n\ncondmeans &lt;- tapply(status$econcon, status$condition, mean)\ncondmeans # save as object to supply to the barplot function\n\n                Placebo                Concrete Conspicuous Consumption \n              0.6340948               0.6647485               0.6724065 \n            Self-Esteem         Social Approval \n              0.6564103               0.6904444 \n\n\nThe first input is the vector of means/proportions/frequency you want to plot.\n\nbarplot(condmeans,\n        ylim =  c(0,1), # y-axis dimensions\n        names = c(\"Placebo\", \"Concrete\", \"Conspicuous\", \n                  \"Self-Esteem\", \"Social\"),\n        col = \"black\", # color of bars\n        main = \"Mean Economic Views by Condition\", # plot title\n        cex.main = .8, # size of plot title\n        cex.names = .8, # size of name labels\n        ylab = \"Mean Views\", # yaxis label\n        cex.lab = .8,# size of yaxis label\n        las = 1) # controls angle of axis labels\n\n\n\n\n\n\n\n\nThe remaining arguments alter the look of the plot to make it more informative.\n\nHow could we improve this plot to make the interpretation easier?\n\n\n4.3.1 Saving Plots\nYou can save an image of your plot as a png() to your working directory. Place png() just before your plot with a name in quotations, and then specify the dimensions. Place dev.off() at the bottom.\n\npng(\"mybarplot.png\", width = 7, height = 4, res=300, units=\"in\")\nbarplot(condmeans,\n        ylim =  c(0,1), # y-axis dimensions\n        names = c(\"Placebo\", \"Concrete\", \"Conspicuous\", \n                  \"Self-Esteem\", \"Social\"),\n        col = \"black\", # color of bars\n        main = \"Mean Economic Views by Condition\", # plot title\n        cex.main = .8, # size of plot title\n        cex.names = .8, # size of name labels\n        ylab = \"Mean Views\", # yaxis label\n        cex.lab = .8,# size of yaxis label\n        las = 1) # controls angle of axis labels\ndev.off()\n\nAlternatively, you can save it as an image, by going to the plot window in your RStudio environment, and clicking on Export -&gt; Save as Image. Here, you can save it in any file format you would like, as well as change the dimensions.\n\n\n\n4.3.2 Creating New Variables\nThe author theorizes that social approval, self-esteem, and conspicuous consumption are all elements of “status motivation.” We could analyze the results by collapsing them into a single category called “status motivation” and compare it to the other experimental groups.\n\nCreate a new variable conditionnew\nCode the variable into new categories based on the values in the original condition variable\nCheck the class of the new variable and convert if necessary\nVerify new variable by exploring values\n\n\nstatus$conditionnew &lt;- NA # create new variable\n## Code new variable\nstatus$conditionnew[status$condition == \"Placebo\"] &lt;- \"Placebo\"\nstatus$conditionnew[status$condition == \"Concrete\"] &lt;- \"Concrete\"\nstatus$conditionnew[status$condition == \"Conspicuous Consumption\" |\n                     status$condition == \"Self-Esteem\" |  \n                      status$condition == \"Social Approval\"] &lt;- \"Status\"\n\n# class(status$conditionnew) check the class\nstatus$conditionnew &lt;- as.factor(status$conditionnew) # convert\n\nRecall, an alternative way to create the new variable is through an ifelse statement.\n\nCan be read: If this relational statement is TRUE, I assign you A, otherwise I assign you B\nThis often works best when we change factor variables to character\n\n\nstatus$conditionnew2 &lt;- as.character(status$condition)\nstatus$conditionnew2 &lt;- ifelse(status$condition == \"Conspicuous Consumption\" |\n                     status$condition == \"Self-Esteem\" |  \n                      status$condition == \"Social Approval\", \n                     \"Status\", status$conditionnew2)\nstatus$conditionnew2 &lt;- as.factor(status$conditionnew2)\ntable(status$conditionnew2)\n\n\nConcrete  Placebo   Status \n     391      394     1157 \n\n\nNote: Barplots don’t have to display means. We could also display frequencies. For example, let’s make a plot of the number of people in each condition using our new variable.\n\nfreqobs &lt;- table(status$conditionnew)\n\n\nbarplot(freqobs,\n        ylim = c(0, 1200),\n        col = \"black\", # color of bars\n        main = \"Number of People per Condition\", # plot title\n        cex.main = .8, # size of plot title\n        cex.names = .8, # size of name labels\n        ylab = \"N of Observations\", # yaxis label\n        cex.lab = .8,# size of yaxis label\n        las = 1) # controls angle of axis labels",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "04-Visualization.html#application-changing-minds-on-gay-marriage",
    "href": "04-Visualization.html#application-changing-minds-on-gay-marriage",
    "title": "4  Visualization",
    "section": "4.4 Application: Changing Minds on Gay Marriage",
    "text": "4.4 Application: Changing Minds on Gay Marriage\nWe now turn to a study that asks the question\n\nResearch Question Can we effectively persuade people to change their minds?\n\nContact Hypothesis: outgroup hostility diminishes through extended positive contact\n\n\nThe authors conduct two randomized control trials in Los Angeles\n\nTarget population: voters in Los Angeles\nRecruitment: select people from a registered voter list\nRandomized treatment conditions:\n\nCanvassers have a conversation about same-sex marriage vs.\nRecycling scripts (placebo)\nControl group: no canvassing\n\nOutcome measures:\n\nFeeling towards gay couples (survey responses over multiple waves)\n\nComparison\n\nCompare average change in feelings between treatment conditions\n\n\nLet’s load the data. Data available through QSS. See QSS Chapter 2 for additional discussion.\n\nstudy: Which study is the data from (1 = Study1, 2 = Study2)\ntreatment: Five possible treatment assignment options\ntherm1: Survey thermometer rating of feeling towards gay couples in waves 1 (0–100) (asked before people were canvassed)\ntherm2: Survey thermometer rating of feeling towards gay couples in waves 2 (0–100) (asked after people were canvassed)\n\n\nmarriage &lt;- read.csv(\"gayreshaped.csv\", stringsAsFactors = T)\n\n\n## How many rows and columns\ndim(marriage)\n\n[1] 11948     6\n\n## How many observations in each treatment group, in each study\ntable(marriage$treatment, marriage$study)\n\n                                                \n                                                    1    2\n  No Contact                                     5238 1203\n  Recycling Script by Gay Canvasser              1046    0\n  Recycling Script by Straight Canvasser         1039    0\n  Same-Sex Marriage Script by Gay Canvasser      1151 1238\n  Same-Sex Marriage Script by Straight Canvasser 1033    0\n\n\nFor a video explainer of the code for the barplot, scatter plot and histogram created with this application, see below. The video only discusses the code. Use the notes and lecture discussion for additional context. (Via youtube, you can speed up the playback to 1.5 or 2x speed.)\n\nLet’s focus on study 1 only.\n\nmarriage1 &lt;- subset(marriage, study ==  1)\n\nWe have to do some work to prepare our outcome and treatment conditions.\nIn experiments, we compare the mean from the treatment group(s) \\(\\bar{Y}(1)\\) to the control \\(\\bar{Y}(0)\\) on some outcome\n\nHere are outcome is Change in Support for gay couples: Wave 2 - Wave 1 feeling thermometer scores\n\n\nmarriage1$outcome &lt;- marriage1$therm2 - marriage1$therm1\n\n\n4.4.1 Recall: Creating new variables\nLet’s create a new variable treatmentnew that collapses the two Recycling and Same-Sex marriage conditions.\n\nmarriage1$treatmentnew &lt;- NA\nmarriage1$treatmentnew[marriage1$treatment == \"No Contact\"] &lt;- \"No Contact\"\nmarriage1$treatmentnew[marriage1$treatment == \"Recycling Script by Gay Canvasser\" |\n                         marriage1$treatment == \n                         \"Recycling Script by Straight Canvasser\"] &lt;- \"Recycling\"\nmarriage1$treatmentnew[marriage1$treatment == \"Same-Sex Marriage Script by Gay Canvasser\" |\n                         marriage1$treatment ==\n                         \"Same-Sex Marriage Script by Straight Canvasser\"] &lt;- \"Marriage\"\nmarriage1$treatmentnew &lt;- as.factor(marriage1$treatmentnew)\n\ntable(marriage1$treatmentnew)\n\n\n  Marriage No Contact  Recycling \n      2184       5238       2085 \n\n\n\n\n4.4.2 Recall: Using ifelse to create new variable\nAn alternative way we could create a variable is to use ifelse\nLet’s try another way using the ifelse command.\n\nCan be read: If this relational statement is TRUE, I assign you A (in this case “No Contact”), otherwise (ifelse())\nif this alternative relational statement is TRUE, I assign you B (in this case “Recycling”), otherwise (ifelse())\nif this alternative relational statement is TRUE, I assign you C (in this case “Marriage”), otherwise\nIf all of those were FALSE I assign you D (in this case an NA)\n\n\nmarriage1$treatmentnew2 &lt;- ifelse(marriage1$treatment == \"No Contact\", \"No Contact\",\n                                  ifelse(marriage1$treatment == \n                                           \"Recycling Script by Gay Canvasser\" |\n                                           marriage1$treatment ==  \n                                           \"Recycling Script by Straight Canvasser\",  \n                                         \"Recycling\",\n                                    ifelse(marriage1$treatment ==\n                                        \"Same-Sex Marriage Script by Gay Canvasser\" |  \n                                            marriage1$treatment ==\n                                        \"Same-Sex Marriage Script by Straight Canvasser\",\n                                        \"Marriage\", \n                                        NA)))\nmarriage1$treatmentnew2 &lt;- as.factor(marriage1$treatmentnew2)\n\n\n\n4.4.3 Calculating the Average Treatment Effect\nWe now have our outcome and our treatment conditions. In an experiment, we want to look at the difference in means between conditions. Let’s calculate the means.\n\nouts &lt;- tapply(marriage1$outcome, marriage1$treatmentnew, mean, na.rm=T)\n\nNote: Sometimes data include missing cells. In R, these have an NA. To ignore these when calculating a mean, we add na.rm = T to the mean() or tapply() functions.\n\n\n4.4.4 Visualize means in a barplot\nLet’s also add a line at 0 using abline()\n\nbarplot(outs,\n        col=\"black\",\n        ylim =  c(-2, 2), # y-axis dimensions\n        border = NA, # removes bar borders\n        main = \"Change in FT W2-W1 by Type of Treatment\", # plot title\n        cex.main = .8, # size of plot title\n        ylab = \"Mean Change in FT W2-W1\", # yaxis label\n        cex.lab = .8,# size of yaxis label\n        las = 1) # controls angle of axis labels\nabline(h=0, lty=2, col = \"red\", lwd=2) # adds horizontal line at 0 with dashes \n\n\n\n\n\n\n\n\nHow should we interpret these results?\n\nIn the Marriage condition, it looks like on average, views toward gay couples became warmer (the bar is positive) after the conversations with canvassers about same-sex marriage.\nIn contrast, the views of people in the Recycling or No Contact conditions did not change much and if anything, became slightly colder.\nComparing between these bars, then, it seems like there is an “average treatment effect” given that the change in the Marriage condition was different from the Recycling an No Contact control groups.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "04-Visualization.html#scatterplots",
    "href": "04-Visualization.html#scatterplots",
    "title": "4  Visualization",
    "section": "4.5 Scatterplots",
    "text": "4.5 Scatterplots\nIt turns out that study was completely fabricated, and the article was eventually retracted.\nHow did people know? Well a team of researchers became suspicious based on exploratory analyses they conducted with the data. Let’s do a few of these to learn about scatterplots and histograms.\nScatter plots show the relationship between two numeric variables.\nA common way to describe and quantify a relationship is through correlation.\n\nCorrelation: When \\(x\\) changes, \\(y\\) also changes by a fixed proportion\n\nAsks: If you are a certain degree above the mean of \\(x\\), are you similarly that much above the mean of \\(y\\)?\nPositive correlation: data cloud slopes up;\nNegative correlation: data cloud slopes down;\nHigh positive or negative correlation: data cluster tightly around a sloped line\nNot affected by changes of scale: cm vs. inch, etc.\n\n\nRange of Correlation is between \\(-1\\) and \\(1\\)\n\nLook at the graphs below for examples of high and low positive and negative correlations.\n\n\n\n\nFrom R for Dummies\n\n\nThe plot() function in R works using x and y coordinates.\n\nWe have to tell R precisely at which x- and y- coordinates to place points (e.g., place a point at x=20 and y=40)\nIn practice, we will generally supply R with a vector of x-coordindates and a vector of corresponding y-coordinates.\n\nTo illustrate a scatterplot, we will examine the relationship between the Wave 1 and Wave 2 feeling thermometer scores in the field experiment, for just the control “No Contact” condition.\n\n## Subset data to look at control only\ncontrolonly &lt;- subset(marriage1, treatment == \"No Contact\")\n\nIn the plot(), we supply the x and y vectors.\n\nxlim and ylim specify the range of the x and y axis.\npch is the point type. You can play around with that number to view different plot types\n\n\nplot(x=controlonly$therm1, y=controlonly$therm2, \n     main = \"Relationship between W1 and  W2\",\n     xlab = \"Wave 1\", xlim = c(0, 100),\n     ylab = \"Wave 2\", ylim = c(0, 100),\n     pch = 20)\n\n\n\n\n\n\n\n\nThe correlation looks extremely high! It is positively sloped and tightly clustered.\nIn fact, if we use R’s function to quantify a correlation between two variables, we will see it is a correlation above .99, very close to the maximum value.\n\nBy default, R calculate the “pearson” correlation coefficient, a number that will be between -1 and 1. It represents the strength of the linear association between two variables.\n\n\n## use = \"pairwise\" means to use all observations where neither variable has missing NA data\ncor(marriage1$therm1, marriage1$therm2, use = \"pairwise\")\n\n[1] 0.995313\n\n\nThis high correlation was unusual for this type of data.\n\nFeeling thermometers suffer from low reliability. How a person answers the question at one point in time (perhaps 83) in Wave 1 often differs from the numbers they say when asked again at a future point in time in Wave 2. A person’s responses often aren’t that stable.\nBecause there was such a high correlation, it suggested that the data might not have been generated by real human responses",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "04-Visualization.html#histograms",
    "href": "04-Visualization.html#histograms",
    "title": "4  Visualization",
    "section": "4.6 Histograms",
    "text": "4.6 Histograms\nThe researchers later discovered the Wave 1 data was suspiciously correlated with an existing survey: 2012 CCAP.\n\nThey believe the researcher likely used CCAP for Wave 1 - used survey responses from real humans that took a real survey – but not the humans that the researcher claimed to interview in the experiment.\nThen the researcher generated the Wave 2 data by adding random noise to the Wave 1 data\nPart of why they believe this has to do with a histogram plot they generated to compare Waves 1 and 2\n\nA histogram is a useful plot for summarizing the distribution of a single variable.\n\nIt shows the frequency of observations (e.g., the number of survey respondents) who give an answer within a particular interval of numeric values\n\nBecause a histogram is a single variable summary, we just supply R with the numeric variable we want to summarize.\n\nThe new argument here breaks tells R how many of the individual rectangles we want. You can play around with that number to see how the plot changes.\n\n\nhist(x=controlonly$therm1, breaks=50,\n     main = \"W1 Histogram\", ylim = c(0,1000))\n\n\n\n\n\n\n\nhist(x=controlonly$therm2,breaks=50,\n     main = \"W2 Histogram\", ylim = c(0,1000))  \n\n\n\n\n\n\n\n\nThe researchers noticed that the heaping patterns were different between Wave 1 and Wave 2.\n\nWhen real humans answer these types of feeling thermometer questions, we often see heaping (tall spikes) at values of 0, 50, and 100. Humans tend to gravitate toward those nice round numbers to anchor their responses. In addition, often researchers might recode people with missing responses (people who skip a question), as having a score of 50, increasing the number at that point.\n\nWave 1 has a lot of this heaping– look at the higher bars around 0, 50, and 100, suggesting a lot of survey respondents gave those answers.\nHowever, Wave 2 has less heaping, particularly at 50. This suggested to the researchers that the Wave 2 data were likely generated by a computer and not real humans\n\n\n\n4.6.1 Happy research ending\nWhile the original article was retracted\n\nResearchers who found irregularities received funding to conduct similar studies with real data this time\nMultiple publications suggest the canvassing approach was effective:\n\nBroockman and Kalla. 2016. “Durably reducing transphobia: A field experiment on door-to-door canvassing” Science 352 no. 6282.\nBroockman and Kalla. 2020. “Reducing exclusionary attitudes through interpersonal conversation: evidence from three field experiments.” American Political Science Review\nKalla and Broockman. 2021. “Which narrative strategies durably reduce prejudice? Evidence from field and survey experiments supporting the efficacy of perspective-getting.” American Journal of Political Science. Forthcoming.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "04-Visualization.html#line-plots",
    "href": "04-Visualization.html#line-plots",
    "title": "4  Visualization",
    "section": "4.7 Line Plots",
    "text": "4.7 Line Plots\nIn this application, we will create a line plot in R. Line plots are built very similarly to scatterplots. We provide R an input of values for the x-axis and corresponding values on the y-axis.\nFor example, if we wanted to plot the US life expectancy for the past few years from 2018-2023 from , we could do the following based on data from the National Center for Health Statistics https://www.cdc.gov/nchs/fastats/life-expectancy.htm:\n\nyears &lt;- c(2018, 2019, 2020, 2021, 2022, 2023)\nyvalues &lt;- c(78.7, 78.8, 77, 76.4, 77.5, 78.4)\n\n## Key to making this a line plot is type=\"l\"\nplot(x=years,\n     y=yvalues,\n     type=\"l\",\n     main=\"US Life Expectancy by year\",\n     xlab = \"Year\",\n     ylab = \"Life Expectancy at birth\",\n     las=2 ) # orientation of axis labels\n\n\n\n\n\n\n\n\n\n## Alternate approach is to customize axis\nplot(x=1:6,\n     y=yvalues,\n     type=\"l\",\n     main=\"US Life Expectancy by year\",\n     xlab = \"Year\",\n     ylab = \"Life Expectancy at birth\",\n     las=2, # orientation of axis labels\n     xaxt=\"n\") # remove original axis\naxis(1, at=1:6, labels = years) # label points only at relevant ticks\n\n\n\n\n\n\n\n\nThe two vectors of values may come from variables in your data or may come from calculations you make using those variables.\nLet’s do a more complex example and break this down step by step.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "04-Visualization.html#application-trends-during-covid",
    "href": "04-Visualization.html#application-trends-during-covid",
    "title": "4  Visualization",
    "section": "4.8 Application: Trends during COVID",
    "text": "4.8 Application: Trends during COVID\nSince the onset of the pandemic in 2020, researchers have evaluated attitudinal and behavioral responses to policy changes, political messages, and COVID case/hospitalization/death rates.\n\nSurvey data on attitudes and self-reported behavior\nHealth care provider administrative data\nMobile phone data to track locations\nSocial media data to track attitudes and mobility\n\nExample: Using Survey data from over 1.1 million responses to measure concern about the coronavirus over time.\n\nClinton, Joshua, et al. “Partisan pandemic: How partisanship and public health concerns affect individuals’ social mobility during COVID-19.” Science advances 7.2 (2021): eabd7204.\n\n\nExample: Using the geotracking data of 15 million smartphones per day to compute percentage reduction in general movement and visiting non-essential services relative to before COVID-19 (before March 9).\n\nGollwitzer, Anton, et al. “Partisan differences in physical distancing are linked to health outcomes during the COVID-19 pandemic.” Nature human behaviour 4.11 (2020): 1186-1197.\n\n\nExample: Using Twitter geolocation data to track how much movement users have by looking at the distances from all locations where a given user has tweeted.\n\nPaiheng Xu, Mark Dredze, David A Broniatowski. “The Twitter Social Mobility Index: Measuring Social Distancing Practices from Geolocated Tweets.” Journal of Medical Internet Research (JMIR), 2020.\n\n\nWe will use the Twitter social mobility index to study how the movement of geo-located Twitter users changed from 2019 into April 2022.\n\nWe will compare this movement for users located in the Northeast vs. South\n\nEach row of the dataset represents a week of the year. Each column represents a particular geography for which social mobility was calculated by the researchers.\n\nDates indicates the date\nNortheast: social mobility data for those in the northeast of the U.S.\nSouth: social mobility data for those in the south of the U.S.\n\n\n## Load the data from the author Mark Dredze's website\ncovid &lt;- read.csv(\"https://raw.githubusercontent.com/mdredze/covid19_social_mobility.github.io/master/data/longitudinal_compiled.csv\")\n\nJust like we have encountered numeric, factor, and character variables, R also has the ability to treat variables specifically as dates. We will want R to treat the date variable we read in as a date, and not as raw text or some other variable type. To do this, we will use the as.Date function.\n\n## Date variable original format and class\nrange(covid$Dates)\n\n[1] \"2019-01-01\" \"2022-12-26\"\n\nhead(covid$Dates)\n\n[1] \"2019-01-01\" \"2019-01-07\" \"2019-01-14\" \"2019-01-21\" \"2019-01-28\"\n[6] \"2019-02-04\"\n\nclass(covid$Dates)\n\n[1] \"character\"\n\n## Convert to class Date\ncovid$Dates &lt;- as.Date(covid$Date)\nhead(covid$Dates)\n\n[1] \"2019-01-01\" \"2019-01-07\" \"2019-01-14\" \"2019-01-21\" \"2019-01-28\"\n[6] \"2019-02-04\"\n\nclass(covid$Dates)\n\n[1] \"Date\"\n\n\nThe researchers continue to add to these data. Let’s look at the portion of data from 2019 to April 2022.\n\nNote the use of as.Date again to make sure R knows our text should be treated as a date\nNote the use of the greater than or equal to &gt;= and less than or equal signs &lt;= to specify which rows we want to keep in the data. We want rows that are in dates after January 1, 2019 and (&) on or before April 25, 2022.\n\n\ncovidsub &lt;- subset(covid, Dates &gt;= as.Date(\"2019-01-01\") &\n                     Dates &lt;= as.Date(\"2022-04-25\"))\n\nThese data are collected by week. That is very detailed. While that may be useful, let us create another variable that contains just the month and year, which will allow us to calculate the average per month. With a date variable, we can use the format function to change the format to just year and month.\n\ncovidsub$monthyear &lt;- format(covidsub$Dates, \"%Y-%m\")\nrange(covidsub$monthyear)\n\n[1] \"2019-01\" \"2022-04\"\n\n\nWhere we are going …\n\n\n\n\n\n\n\n\n\nStarting from basics …\n\nLet’s first create a scatterplot by providing R with our two variables\nIn a trend/line plot, we want each month on the x-axis\nWe want our outcome on the y-axis, in this case, average social mobility by month\nUltimately we will want to compare the Northeast with the South. We will plot one line at a time, starting with the Northeast\n\nWe first need to find the average by month. Recall our tapply() function.\n\nmobilitybymonthNE &lt;- tapply(covidsub$Northeast, covidsub$monthyear, mean,\n                          na.rm=T)\n\nmobilitybymonthSO &lt;- tapply(covidsub$South, covidsub$monthyear, mean,\n                          na.rm=T)\n\nLet’s look at the output for the Northeast. Each value is what we ultimately want on the y-axis– the average social mobility in a given month.\n\nmobilitybymonthNE\n\n 2019-01  2019-02  2019-03  2019-04  2019-05  2019-06  2019-07  2019-08 \n51.22066 52.26420 63.20130 61.38417 61.27622 60.49753 58.91779 61.20730 \n 2019-09  2019-10  2019-11  2019-12  2020-01  2020-02  2020-03  2020-04 \n54.44546 54.93814 56.59830 55.44538 51.12414 45.80660 34.55917 18.15076 \n 2020-05  2020-06  2020-07  2020-08  2020-09  2020-10  2020-11  2020-12 \n23.29190 28.71901 27.02149 32.73828 29.07536 32.07877 29.83641 30.56208 \n 2021-01  2021-02  2021-03  2021-04  2021-05  2021-06  2021-07  2021-08 \n28.75507 28.76227 35.35340 45.02537 48.19897 50.18401 52.96105 51.19241 \n 2021-09  2021-10  2021-11  2021-12  2022-01  2022-02  2022-03  2022-04 \n45.81695 49.15654 48.69051 51.24941 46.96813 53.55241 59.70933 54.04312 \n\n\nWe want to plot them each at their own point on the x-axis, from the first month to the last month. We can start by creating a vector of the same length as we have months:\n\n1:length(mobilitybymonthNE)\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\n\n\nThese become our two inputs in the plot.\n\nplot(x=1:length(mobilitybymonthNE),\n     y=mobilitybymonthNE, pch=16) # pch is point type\n\n\n\n\n\n\n\n\nWe now transform it to a line by specifying type=\"l\"\n\nBy default, R creates a plot with type=p for points. R also has type=b which has both a line and points.\n\n\nplot(x=1:length(mobilitybymonthNE),\n     y=mobilitybymonthNE, type=\"l\") # makes it a line\n\n\n\n\n\n\n\n\nLet us change the aesthetics a bit by adding labels and removing the border with bty=\"n\".\n\nplot(x=1:length(mobilitybymonthNE),\n     y=mobilitybymonthNE,\n     type=\"l\", \n     main=\"Social Mobility by Month and Region\",\n     ylab=\"Twitter Social Mobility Index\",\n     xlab=\"\",\n     ylim = c(0, 80), # y-axis limits\n     las=1, # orientation of axis labels\n     lwd=2, # line width\n     bty=\"n\") # removes border\n\n\n\n\n\n\n\n\nLet’s add a comparison line with the lines() function to look at trends for the south.\n\nNote that this is outside of the plot() function, but the inputs are very similar. We supply a set of x and y coordindates.\n\n\nplot(x=1:length(mobilitybymonthNE),\n     y=mobilitybymonthNE,\n     type=\"l\", \n     main=\"Social Mobility by Month and Region\",\n     ylab=\"Twitter Social Mobility Index\",\n     xlab=\"\",\n     ylim = c(0, 80), # y-axis limits\n     las=1, # orientation of axis labels\n     lwd=2, # line width\n     bty=\"n\") # removes border\n## Add line to the plot \nlines(x=1:length(mobilitybymonthSO),\n     y=mobilitybymonthSO, col=\"red3\", lwd=2)\n\n\n\n\n\n\n\n\nLet’s create our own axis for the plot to add detail. To do this, we add xaxt to the plot function and then use axis() below the function.\nThe labels we will add are the actual months in the data. These happen to be the labels or names of our vectors:\n\nnames(mobilitybymonthNE)\n\n [1] \"2019-01\" \"2019-02\" \"2019-03\" \"2019-04\" \"2019-05\" \"2019-06\" \"2019-07\"\n [8] \"2019-08\" \"2019-09\" \"2019-10\" \"2019-11\" \"2019-12\" \"2020-01\" \"2020-02\"\n[15] \"2020-03\" \"2020-04\" \"2020-05\" \"2020-06\" \"2020-07\" \"2020-08\" \"2020-09\"\n[22] \"2020-10\" \"2020-11\" \"2020-12\" \"2021-01\" \"2021-02\" \"2021-03\" \"2021-04\"\n[29] \"2021-05\" \"2021-06\" \"2021-07\" \"2021-08\" \"2021-09\" \"2021-10\" \"2021-11\"\n[36] \"2021-12\" \"2022-01\" \"2022-02\" \"2022-03\" \"2022-04\"\n\n\n\nplot(x=1:length(mobilitybymonthNE),\n     y=mobilitybymonthNE,\n     type=\"l\", \n     main=\"Social Mobility by Month and Region\",\n     ylab=\"Twitter Social Mobility Index\",\n     xlab=\"\",\n     ylim = c(0, 80),\n     las=1, \n     lwd=2, \n     bty=\"n\",\n     xaxt=\"n\") # removes original x-axis\n## Add line to the plot \nlines(x=1:length(mobilitybymonthSO),\n     y=mobilitybymonthSO, col=\"red3\", lwd=2)\n## add the axis the \"1\" means x-axis. A \"2\" would create a y-axis\naxis(1, at = 1:length(mobilitybymonthNE), \n     labels=names(mobilitybymonthNE), las=2)\n\n\n\n\n\n\n\n\nFinally, let’s add a legend(). Now we’re here!\n\nplot(x=1:length(mobilitybymonthNE),\n     y=mobilitybymonthNE,\n     type=\"l\", \n     main=\"Social Mobility by Month and Region\",\n     ylab=\"Twitter Social Mobility Index\",\n     xlab=\"\",\n     ylim = c(0, 80),\n     las=1, \n     lwd=2, \n     bty=\"n\",\n     xaxt=\"n\") # removes original x-axis\n## Add line to the plot \nlines(x=1:length(mobilitybymonthSO),\n     y=mobilitybymonthSO, col=\"red3\", lwd=2)\n## add the axis the \"1\" means x-axis. A \"2\" would create a y-axis\naxis(1, at = 1:length(mobilitybymonthNE), \n     labels=names(mobilitybymonthNE), las=2)\n\n## Add legend, \"bottomleft\" indicates where on the plot to locate it\n## Could use \"topright\" instead, for example\nlegend(\"bottomleft\",  col=c(\"red3\", \"black\"), \n       c(\"South\", \"Northeast\"), \n       cex = .7, # size of legend\n       lwd=2,\n       bty=\"n\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "04-Visualization.html#visual-tips-and-tricks",
    "href": "04-Visualization.html#visual-tips-and-tricks",
    "title": "4  Visualization",
    "section": "4.9 Visual tips and tricks",
    "text": "4.9 Visual tips and tricks\nRecall we said the goals of visualization are to communicate information\n\nTransparently (show me the data!)\nQuickly\nSimply\nAccurately\nAnd with a little work: beautifully\n\nWhat NOT to communicate?\n\nClaus Wilke provides an overview of rules of thumb to fall when creating a data visualization on the Serial Mentor website.\nAn example is below\n\nOverall, the best thing to do is to look at your visual from a consumer’s point of view. You want your visuals to be intuitive enough for a viewer to be able to interpret it without too much help from you or explanatory text elsewhere in a paper or presentation. Our goal is to help consumers of our data understand the main takeaways of our research easily and accurately.\n\nWe want to make sure our visuals always have informative labels that a lay person can understand (instead of technical variable names, we can use plain language)\n\nWe may need to add a legend or additional text to a visual to help with this\n\nWe want to choose colors to convey information. We want to avoid colors that are hard to see or might distract consumers.\nThe axis dimensions should not be misleading. If the goal is to compare two or more plots to each other, we would want them to have similar axes, for example.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "04-Visualization.html#common-r-plotting-functions-and-arguments",
    "href": "04-Visualization.html#common-r-plotting-functions-and-arguments",
    "title": "4  Visualization",
    "section": "4.10 Common R plotting functions and arguments",
    "text": "4.10 Common R plotting functions and arguments\nHere is a refresher of several of the functions and arguments we have come across.\nCreate a plot\n\nplot(): for scatterplots and trend plots\nbarplot(): for barplot comparisons across categories\nboxplot(): boxplot for summaries of numeric variables\nhist(): for histogram summaries of a single numeric variable\n\nAesthetic arguments within a plot\n\nmain =: Specifies the main title of the plot. Supply text (e.g., main = \"my title\")\nylab =: Specifies the title of the y-axis. Supply text (e.g., ylab = \"Mean of variable\")\nxlab =: Specifies the title of the x-axis. Supply text (e.g., xlab = \"X variable name\")\nylim =: Specifies the range of the y-axis. Supply vector of two numbers (e.g., ylim = c(0, 100))\nxlim =: Specifies the range of the x-axis. Supply vector of two numbers (e.g., xlim = c(0, 100))\nbty=\"n\": Removes the border box around the plot\ncex, cex.main, cex.names, cex.lab, cex.axis: Changes the size of different elements of a plot. Default is 1, so a value of .8 would be smaller than default, and 1.2 would be bigger than normal.\ntype =: Specifies the type of plot (e.g., type=\"l\" is a line plot, type=\"b\" is a plot with points and lines connecting them)\nlwd=: Specifies the width of a line on a plot. Default is 1. E.g., lwd=3 makes a line much thicker\npch=: Specifies the point type. E.g., pch=15\nlty=: Specifies the line type. E.g., lty=2 is a dashed line\ncol=: Specifies the color of the central element of the plot. Can take a single color or vector of colors. Use colors() in the console to see all R colors.\nnames: Specifies a set of labels in a barplot\n\nWays to annotate a plot (generally added below the initial plotting function)\n\nabline(): Adds a line to the plot at a particular point on the x- or y- intercept, either horizontal, vertical, or of a particular slope\n\nExample: Adding a horizontal line at a particular at a y value of 2 abline(h=2)\nExample: Adding a vertical line at a particular at a x value of 2 abline(v=2)\n\nlines(x=, y=): Adds a line connecting pairs of x- and y-coordinates. We used this to add the South line to the social mobility plot.\naxis(): Used to replace the default x- or y- axis that R will create with a customized axis\n\nTo create an original y-axis, use axis(2, vectorofvalues, labels) and specify yaxt=\"n\" inside the plotting function to remove the original y-axis.\nTo create an original x-axis, use axis(1, vectorofvalues, labels) and specify xaxt=\"n\" inside the plotting function to remove the original x-axis.\n\nlegend(): Adds a legend to a plot. Can specify the location as the first argument (e.g., \"bottomleft\" or \"topright\")\ntext(): Adds text to a plot at specific x- and y- locations. (E.g., text(x=3, y=4, \"Here is a point\"). The x and y arguments can be single numbers or a vector of numbers. x and y need to be the same length.\npoints(): Adds points to a plot at specific x- and y- locations. Inputs are much like plot",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "04-Visualization.html#a-note-on-ggplot",
    "href": "04-Visualization.html#a-note-on-ggplot",
    "title": "4  Visualization",
    "section": "4.11 A note on ggplot",
    "text": "4.11 A note on ggplot\nR has a number of open-source packages that people can use to expand the set of capabilities for visualization and analysis. These can be installed through RStudio. We will look at one of these packages: ggplot2.\nUsing ggplot will be extra-credit at this point in the course. We may return to it later in the semester as part of the main curriculum. Reviewing this section of the notes is optional.\nThe “gg” in ggplot2 stands for the “Grammar of Graphics.” This program provides another framework for creating figures in R. According to Hadley Wickham, “ggplot2 provides beautiful, hassle-free plots that take care of fiddly details like drawing legends.”\nPractically speaking, ggplot() is another tool to plot the same types of figures we have been making in class. Some people prefer ggplot2 because they find the logic of building figures more intuitive using this framework and/or more aesthetically pleasing. However, both ggplot() and the plots we have been making in class can accomplish the same ultimate goals of data visualization– to communicate information transparently, quickly, accurately, simply, and beautifully. Which types of plots you may prefer is up to your own taste.\nThink of packages like apps on a smartphone.\n\nIf RStudio is our smartphone, we install a package like you install an app on the phone. You only have to do this once, though occasionally you may want or need to update the installation to a new version.\n\n\n## Run this line in your R console\ninstall.packages(\"ggplot2\")\n\n\nOn a smartphone, every time you want to use an app after you have installed it, you have to open the app. Similarly, every time we want to open a package in RStudio, we have to open it by using the library() command\n\n\n## Add and run this line in your R script, above the code where you will use functions from the package\nlibrary(ggplot2)\n\nThe main plotting function in ggplot2 is the ggplot() function. It will give you access to barplots, boxplots, scatterplots, histograms, etc.\n\nThe syntax within this package is a little different from the base R plotting functions. We will investigate below. For now, here is an example of using ggplot to create a boxplot using the experiment on social status from earlier in this section.\n\n\nggplot(data=status, mapping = aes(x=condition, y=econcon)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nThe three primary components of a ggplot() are a dataframe (data =), a set of mapping aesthetics (aes()), and geoms (e.g., geom boxplot, geom bar, geom point, geom line, etc.).\n\nThe function ggplot() first takes a dataframe that includes the values you would like to plot (e.g., data = status).\nThe aesthetics then include the variable names that you want to plot on the x and y axis (e.g., aes(x=condition, y=econcon))\n\nAdditional mapping aesthetics can be specified. For example, a third variable (or a repeat of a previous variable) can also be specified (e.g., fill =, colour =, shape =), which acts as a grouping variable. If this is specified, ggplot() will create a corresponding legend for the plot and will color/make different shapes for different groups within this third variable (See the boxplot below for an example of grouping by condition).\n\nAfter closing out the first ggplot() parentheses, you then annotate the plot by adding (+) a geometric layer. This is essentially where you specify the type of plot (though it is possible to have multiple geometric layers).\nJust like with the other plotting functions in R, you can also specify a number of other arguments to make your plot more informative and aesthetically pleasing. Here, you do this by adding (+) additional arguments. See examples below (e.g., ggtitle, xlab, ylab for titles, ylim for y-axis limits, etc.)\nLikewise, just like with the other plotting functions, you can save your plots as a pdf or png. To do so here, you include the line ggsave() just below your plot.\n\nThere are many more possibilities for plotting with ggplot(), but these should get you started. For additional resources on all that is gg, I recommend the R Graphics Cookbook.\nHere is a second version of the boxplot with more aesthetics specified.\n\nWe will color in the boxes based on the collapsed condition variable.\n\n\nggplot(data=status, mapping = aes(x=condition, y=econcon, fill=conditionnew)) +\n  ## Specifies plot type. E.g., also have geom_point(), geom_bar()\n  geom_boxplot()+\n  ## Note many arguments are similar to other R functions but the syntax is a little different\n  ggtitle(\"Economic Views by Experimental Condition\")+\n  ylab(\"Economic Views\")+\n  xlab(\"Experimental Condition\")+\n  ylim(0,1)+\n  ## Changes the overall theme (i.e., color scheme, borders, etc.)\n  theme_bw()+\n  theme(legend.position=\"bottom\")\n\n\n\n\n\n\n\nggsave(\"myboxplot.pdf\", width=7, height=5)\n\nHere is an example of a histogram from the application on views toward gay couples.\n\nggplot(controlonly, aes(x=therm1)) +\n  geom_histogram(binwidth = 1) +\n  ggtitle(\"W1 Histogram\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nInstead of displaying multiple categories through different shapes or colors, we could also create multiple mini plots instead. This is done through facet. Let’s look at a histogram for each condition for the thermometers in wave 2.\n\nggplot(marriage1, aes(x=therm2)) +\n  geom_histogram(binwidth = 1) +\n  ggtitle(\"W2 Histogram by Condition\") +\n  xlab(\"Feeling Thermometer Wave 2\")+\n  theme_bw()+\n  facet_wrap(~treatmentnew)\n\nWarning: Removed 1042 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\nWe can similarly create a scatter and line plot. Let’s use the social mobility data. Here we see geom_point and geom_line.\n\n## Scatterplot\nggplot(covidsub, aes(x=Dates, y=avg_USA)) +\n  geom_point() +\n  ggtitle(\"Average Social Mobility in US\") +\n  xlab(\"Date\")+\n  ylab(\"Avg Social Mobility\")\n\nWarning: Removed 4 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n## Line plot\nggplot(covidsub, aes(x=Dates, y=avg_USA)) +\n  geom_line() +\n  ggtitle(\"Average Social Mobility in US\") +\n  xlab(\"Date\")+\n  ylab(\"Avg Social Mobility\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualization</span>"
    ]
  },
  {
    "objectID": "05-Causalityii.html",
    "href": "05-Causalityii.html",
    "title": "5  Causality with Non-Experimental Data",
    "section": "",
    "text": "5.1 Why can’t we always experiment?\nIn this section, we continue to evaluate causal claims, but this time we will not have the benefit of experiments.\nRecall: What are causal claims?\nLet’s put this into our causal potential outcomes framework.\nExample: Can you cause your favorite sports team to win a game by an action that you take (e.g., wearing a particular shirt, eating a particular snack, etc.)?\nDue to this problem, we have to find ways around estimating causal effects.\nWhen we make a comparison, we have to think about our counterfactual states of the world.\nHere was the Rams vs. Eagles scoreline\nIt was 19-7, with the Eagles losing at halftime, a -12 difference. The causal claim is that the actions of Hannah and Kylie caused the Eagles to win.\nIn the state of the world where they turned around at halftime, the Eagles won by 7. To estimate the causal effect, we need to build a causal comparison:\nExample: Do political leaders tend to matter for democracy?\nWe have problems!!",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Causality with Non-Experimental Data</span>"
    ]
  },
  {
    "objectID": "05-Causalityii.html#why-cant-we-always-experiment",
    "href": "05-Causalityii.html#why-cant-we-always-experiment",
    "title": "5  Causality with Non-Experimental Data",
    "section": "",
    "text": "Our outcome: how democratic nations are\nOur causal effect of interest:\n\nOn average, how democratic nations are with their current leaders -\nOn average, how democratic nations would be with different leaders\n\nPossible Experimental Designs to randomly assign half of countries to receive a different political leader\n\nRig elections? (I.e., Election fraud- Illegal, unethical)\n\n\n\n\n5.1.1 What can we do instead?\nLet’s say we want to make a causal claim about the effect of one variable on an outcome, but we can’t think of an experimental design that will help us estimate this.\nWhat do you do?",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Causality with Non-Experimental Data</span>"
    ]
  },
  {
    "objectID": "05-Causalityii.html#causal-identification-strategies",
    "href": "05-Causalityii.html#causal-identification-strategies",
    "title": "5  Causality with Non-Experimental Data",
    "section": "5.2 Causal Identification Strategies",
    "text": "5.2 Causal Identification Strategies\nOur goal: Try to “identify” the causal effect of one variable on an outcome.\n\nUse data we have (that exist out in the world)\nCompare those who are “treated” to a relevant comparison group who is not treated\n\nHowever, we can’t randomize treatment so….\n\nWe do our best to try to choose a good comparison (one very similar to the treatment group, but happens not to be treated)\n\nWe want to rule out all possible confounding variables and “alternative explanations” for the outcomes we observed.\n\n5.2.1 Causal claims from before vs. after comparisons\nWhat types of research questions could these trends generate?\n\n\n\n\n\n\n\n\n\nWhat would you want to know about how movement has changed over time. Think about examples of causal claims you might make:\nSo what can we do to test causal claims?\n\nWhat is the fundamental problem of causal inference in this case?\nCan we do an experiment?\nResearchers try to form comparison groups, in a strategic way, with the data they have (i.e., “observational” or “non-experimental” data).\nBecause they cannot randomly assign two different experiences of the world, instead they choose two cases or two groups of cases that\n\nSeem extremely similar except\nOne has the treatment of interest, and one does not\n\n\nExample: Before vs. After Comparison\nLet’s examine social mobility just before vs. just after the federal announcement of social distancing guidelines to stop the spread of COVID-19.\n\nTo do so, we will draw a vertical line at March 2020\n\nNote we use abline(v=) to indicate a vertical line at a location to cross the x-axis\n\n\nThis is the 15th entry in our vector, which means at point 15 on the x-axis.\n\nmobilitybymonthNE[\"2020-03\"]\n\n 2020-03 \n34.55917 \n\nmobilitybymonthNE[15]\n\n 2020-03 \n34.55917 \n\n\n\nWe will also add text to inform views what that line represents\n\nNote we use text(x= , y=, labels) to indicate where to put text\n\n\n\nplot(x=1:length(mobilitybymonthNE),\n     y=mobilitybymonthNE,\n     type=\"l\", \n     main=\"Social Mobility by Month and Region\",\n     ylab=\"Twitter Social Mobility Index\",\n     xlab=\"\",\n     ylim = c(0, 80),\n     las=1, \n     lwd=2, \n     bty=\"n\",\n     xaxt=\"n\") # removes original x-axis\n## Add line to the plot \nlines(x=1:length(mobilitybymonthSO),\n     y=mobilitybymonthSO, col=\"red3\", lwd=2)\n\n## add the axis the \"1\" means x-axis. A \"2\" would create a y-axis\naxis(1, at = 1:length(mobilitybymonthNE), \n     labels=names(mobilitybymonthNE), las=2)\n## add dashed blue vertical line\nabline(v=15, lty=2, col=\"dodgerblue\", lwd=1.5)\n\n## add text near the line\n## the \\n breaks the text into different lines\ntext(x=15, y=65, labels = \"Federal \\n Announcement\", cex=.6)\n\n\n\n\n\n\n\n\nWe see mobility does appear to be lower after the announcement relative to before the announcement. Is this causal?\n\nAssumption: We would want to be able to argue that social mobility in the weeks following the announcement (after time period) would look similar to social mobility in the weeks prior to the announcement (before period) if not for the federal announcement\n\nThat the before vs. after time periods would be similar in any meaningful way if not for the presence of the treatment in the after period.\n\n\nDoes this seem like a plausible argument? Could other things (confounders) occurring around the time of the federal announcement also have caused the steep decline in social mobility?\n\nIf we think something else happened around the same time that might have caused mobility to go down anyway, then we may be doubtful that this is a causal effect.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Causality with Non-Experimental Data</span>"
    ]
  },
  {
    "objectID": "05-Causalityii.html#three-common-identification-strategies",
    "href": "05-Causalityii.html#three-common-identification-strategies",
    "title": "5  Causality with Non-Experimental Data",
    "section": "5.3 Three Common Identification Strategies",
    "text": "5.3 Three Common Identification Strategies\nExample: Does drinking Sprite make a person a better basketball player? (Inspired by 1990s commercial where a kid believes drinking Sprite will cause him to play basketball better.)\n\n\nCross-section comparison: Compare Grant Hill (who drinks Sprite) to others (who don’t)\nBefore-and-after: Compare Grant Hill after he started drinking Sprite to Grant Hill before\nDifference-in-differences: Compare Grant Hill before and after drinking Sprite and subtract from this the difference for some other person (who never drank Sprite) during the same two periods\n\n(Note: “drinking Sprite” is our treatment.)\n\n5.3.1 Threats to Cross-Section Designs\nAssumption: Must assume no confounders and any alternative explanations related to differences between the treated and control subjects that also relate to the outcome. The Threat: Your two groups may differ in ways beyond the “treatment” in ways that are relevant to the outcome you care about.\n\nCompare Grant Hill, a tall NBA player who currently drinks Sprite (treatment group) to\nYourself, assuming you and they do not drink Sprite (control group)\nCompare your basketball skill levels (the outcome).\nSuppose Grant Hill is better (a positive treatment effect).\n\nCan we conclude Sprite causes a person to be a better player?\n\n\nNope, because other things that affect basketball talent differ between you and Grant Hill, and these things, not Sprite, may explain the difference in basketball talent.\nMoreover, even if we compared just among NBA players (Grant Hill vs. non-Sprite drinking players of his era), it’s possible that Sprite targeted all-stars to recruit to drink Sprite. In this way, pre-existing basketball talent (a confounder) both explains why Grant Hill drank Sprite (relates to the treatment) and explains his higher level of basketball talent (relates to the outcome) in the time period after drinking Sprite.\n\nFor a cross-sectional comparison to be plausible, we need to choose a very similar comparison in order to isolate the treatment as the main variable that is causing a change in an outcome.\n\n\n\n5.3.2 Threats to Before-After Designs\nAssumption: Must assume no confounding time trend. Threat: Something else may be changing over time, aside from the treatment, that is affecting your outcome.\n\nCompare Grant Hill in the years after he started drinking Sprite (treated) to\nGrant Hill the years before he started drinking Sprite (control)\nCompare his basketball skill levels (outcome).\nSuppose Grant Hill after Sprite is better (a positive treatment effect).\nCan we conclude Sprite causes a person to be a better player?\n\nNot if something else Grant Hill started doing during that time period made him better (e.g., maybe during that time the NBA provided higher quality coaches and trainers, and everyone (including Grant Hill) got better).\n\nYou want your treatment to be the only thing relevant to basketball talent changing over time.\n\n\n\n5.3.3 Threats to Diff-in-Diff Designs\nAssumption: Must assume parallel trends: That in the absence of treatment, your treatment group would have changed in the same way as your control\n\nCompare Grant Hill in the years before vs. after he started drinking Sprite to Grant Hill’s teammate, who never drank sprite, in the same two time periods (before Hill drinks Sprite vs. after Hill drinks Sprite)\nCompare the change in each player’s basketball skill levels. Suppose Grant Hill’s skills increased to a greater degree than his teammate’s over the same time period.\nCan we conclude Sprite causes a person to be a better player?\n\nIf we are confident that Grant Hill did not have a unique (non-Sprite) advantage over that time period relative to other players, then our assumption might be plausible– that Grant Hill and other players would have experienced a similar growth in their skills if not for Grant Hill getting the extra benefit of Sprite.\nInstead, if, for example, Grant Hill got a new trainer during this period AND his teammate did not, then we might have expected Grant Hill to see more improvement even if he didn’t start drinking Sprite. A violation of the parallel trends assumption!\n\nCausality is hard!",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Causality with Non-Experimental Data</span>"
    ]
  },
  {
    "objectID": "05-Causalityii.html#application-economic-effects-of-basque-terrorism",
    "href": "05-Causalityii.html#application-economic-effects-of-basque-terrorism",
    "title": "5  Causality with Non-Experimental Data",
    "section": "5.4 Application: Economic Effects of Basque Terrorism",
    "text": "5.4 Application: Economic Effects of Basque Terrorism\nResearch Question: What is the economic impact of terrorism?\n\nFactual (\\(Y(1)\\)): Economy given Basque region hit with terrorism in early 1970s\n\nFrom 1973 to late 1990s, ETA killed almost 800 people\nActivity localized to Basque area\n\nCounterfactual (\\(Y(0)\\)): How would Basque economy have fared in the absence of the terrorism?\n\nBasque was the 3rd richest region in Spain at onset\nDropped to the 6th position by late 1990s\nWould this fall have happened in the absence of terrorism?\n\n\nProblem: We can’t observe the counterfactual. We can’t go back in time to manipulate the experience of terrorism.\n\n5.4.1 Applying 3 Identification Strategies\n\nCompare Basque to others after 1973 (Cross-section comparison)\nCompare Basque before and after 1973 (Before-and-after)\nCompare others before and after 1973 and subtract the difference from Basque’s difference (Difference-in-differences)\n\nFor a video explainer of the code for this application, see below. (Via youtube, you can speed up the playback to 1.5 or 2x speed.)\n\n\nbasque &lt;- read.csv(\"basque.csv\")\n\n\nhead(basque)\n\n     region year   gdpcap\n1 Andalucia 1955 1.688732\n2 Andalucia 1956 1.758498\n3 Andalucia 1957 1.827621\n4 Andalucia 1958 1.852756\n5 Andalucia 1959 1.878035\n6 Andalucia 1960 2.010140\n\n\nVariables\n\nregion: 17 regions including Basque\nyear: 1955 – 1997\ngdpcap: real GDP per capita (in 1986 USD, thousands)\n\nSubset Basque Data into Four Groups\n\n## Basque before terrorism\nbasqueBefore &lt;- subset(basque, (year &lt; 1973) &\n                            (region == \"Basque Country\"))\n## Basque after terrorism\nbasqueAfter &lt;- subset(basque, (year &gt;= 1973) &\n                           (region == \"Basque Country\"))\n## others before terrorism\nothersBefore &lt;- subset(basque, (year &lt; 1973) &\n                            (region != \"Basque Country\"))\n## others after terrorism\nothersAfter &lt;- subset(basque, (year &gt;= 1973) &\n                           (region != \"Basque Country\"))\n\nWhat is the economic impact of terrorism?\nCross-section comparison\n\nmean(basqueAfter$gdpcap) - mean(othersAfter$gdpcap)\n\n[1] 1.132917\n\n\nBefore-and-after design\n\nmean(basqueAfter$gdpcap) - mean(basqueBefore$gdpcap)\n\n[1] 2.678146\n\n\nDifference-in-Differences design\n\ntreatDiff &lt;- mean(basqueAfter$gdpcap) -\n    mean(basqueBefore$gdpcap)\ncontrolDiff &lt;- mean(othersAfter$gdpcap) -\n    mean(othersBefore$gdpcap)\ntreatDiff - controlDiff\n\n[1] -0.48316\n\n\nHere is a way to visualize this difference-in-differences. Our estimated causal effect is the difference between the observed post-1973 economy in the Basque region mean(basqueAfter$gdpcap) and what we assume the economy would have been in the absence of terrorism (the treatment) using the dotted line– adding the control group’s trajectory to the pre-1973 Basque economy (mean(basqueBefore$gdpcap) + controlDiff).\n\n\n\n\n\n\n\n\n\nWhat should we conclude from each approach?\n\nEach approach resulted in a different estimate of the impact of terrorism on the economy. We should choose the approach for which we think the underlying assumptions are most plausible.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Causality with Non-Experimental Data</span>"
    ]
  },
  {
    "objectID": "05-Causalityii.html#placebo-tests",
    "href": "05-Causalityii.html#placebo-tests",
    "title": "5  Causality with Non-Experimental Data",
    "section": "5.5 Placebo Tests",
    "text": "5.5 Placebo Tests\nWhich Results Should We Believe? Role of Placebo Tests\nCross-section comparison\n\n## were there pre-existing differences between the groups?\nmean(basqueBefore$gdpcap) - mean(othersBefore$gdpcap)\n\n[1] 1.616077\n\n\nBefore-and-After design\n\n## was there a change in a group we don't think should have changed?\nmean(othersAfter$gdpcap) - mean(othersBefore$gdpcap)\n\n[1] 3.161306\n\n\nWhat about the Difference-in-Differences design?\n\n## here we go back in time even further to examine \"pre-treatment\" trends\n## we want them to be similar\n(basqueBefore$gdpcap[basqueBefore$year == 1972] -\n basqueBefore$gdpcap[basqueBefore$year == 1955]) -\n    (mean(othersBefore$gdpcap[othersBefore$year == 1972]) -\n     mean(othersBefore$gdpcap[othersBefore$year == 1955]))\n\n[1] 0.07147071\n\n\nThese “placebo” checks are closest to zero for diff-in-diff, so we may believe that the most.\nThanks to Will Lowe and QSS for providing the foundations for this example",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Causality with Non-Experimental Data</span>"
    ]
  },
  {
    "objectID": "05-Causalityii.html#wrapping-up-causality",
    "href": "05-Causalityii.html#wrapping-up-causality",
    "title": "5  Causality with Non-Experimental Data",
    "section": "5.6 Wrapping Up Causality",
    "text": "5.6 Wrapping Up Causality\nDo you get this joke?",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Causality with Non-Experimental Data</span>"
    ]
  },
  {
    "objectID": "06-Loops.html",
    "href": "06-Loops.html",
    "title": "6  Loops in R",
    "section": "",
    "text": "6.1 The anatomy of a loop\nIn this brief section, we will go over conducting loops in R.\nLoops are a tool in R that are useful for situations where we want to do something over and over and over and … over again, where we just change something small each time.\nA quick example using the Basque data from the previous section:\nLet’s say I wanted to know the GDP for each region for the earliest year they are in the data.\nUghhh can we automate this? we have 17 regions!!!\nWhere we will be going by the end of this section:\nWe got all of the answers with just one chunk of code!\nA short video introduction to the anatomy of a loop\nIn many situations, we want to repeat the same calculations with different inputs. Loops allow you to avoid writing many similar code chunks.\nWe use the following syntax:\nfor (i in X) {\ncommand1...\ncommand2...\n...\n}\nto indicate we want to repeat command1 and command2 and …. as many commands as we want, for each i in the set of possible values for i stored in X.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Loops in R</span>"
    ]
  },
  {
    "objectID": "06-Loops.html#the-anatomy-of-a-loop",
    "href": "06-Loops.html#the-anatomy-of-a-loop",
    "title": "6  Loops in R",
    "section": "",
    "text": "The function for(i in X){}} will create a loop in your programming code where i is a counter and\nX is a placeholder for a vector for the possible values of the counter.\n\n\n\n\n\n\n\n\n\n6.1.1 The key parts of a loop\nThe meat: the command or set of commands you want to do over and over.\n\n## the meat\nresult &lt;- 6 + 2\nresult &lt;- 8 + 2\nresult &lt;- 4 + 2\nresult &lt;- 7 + 2\nresult &lt;- 11 + 2\n\nNote the pattern: we take some number and + 2 each time.\n\nIt is the number that is changing -&gt; what we will iterate.\n\nFor a loop, you want to:\n\nThe Meat: Write down the code for one version.\n\n\nresult &lt;- 6 + 2\n\n\nThe Bread: Embed this code in the loop syntax (for(i in X){})\n\n\nfor(i in X){\n    result &lt;- 6 + 2\n    }\n\n\nCreate a vector that contains the values you want to loop through\n\n\nsomenumbers &lt;- c(6, 8, 4, 7, 11)\n\n\nCreate a storage vector that will contain the results\n\n\nresult &lt;- rep(NA, length(somenumbers))\n\n\nModify the meat and bread to iterate by using [i], and replace X.\n\n\nfor(i in 1:length(somenumbers)){\n  result[i] &lt;- somenumbers[i] + 2\n}\n\n  where `1:length(somenumbers)` reflects possible values `i` will take \n\n1:length(somenumbers)\n\n[1] 1 2 3 4 5\n\n\n\n\n6.1.2 A short example\nLet’s put these parts together:\nSuppose we want to add 2 to a set of numbers c(6, 8, 4, 7, 11)\n\nsomenumbers &lt;- c(6, 8, 4, 7, 11) # iteration vector\nresult &lt;- rep(NA, length(somenumbers)) # container vector\n\nfor(i in 1:length(somenumbers)){\n  result[i] &lt;- somenumbers[i] + 2\n}\nresult\n\n[1]  8 10  6  9 13\n\n\nHow does this work? Every iteration, the value of i changes.\n\nFor example, when i is 1, we take the first value in our somenumbers vector somenumbers[1], add 2 to it, and store it in the first position of our container vector result[1]. When i is 2, we switch the number in the brackets to 2, corresponding to the second entry in each vector, and so on.\n\n\n# Suppose i is 1\nresult[1] &lt;- somenumbers[1] + 2\nresult[1]\n\n[1] 8\n\n# Suppose i is 2\nresult[2] &lt;- somenumbers[2] + 2\nresult[2]\n\n[1] 10\n\n# Suppose i is 3\nresult[3] &lt;- somenumbers[3] + 2\nresult[3]\n\n[1] 6\n\n\n\n\n6.1.3 Troubleshooting a loop\nThe inside part of the loop should run if we set i to a particular value.\n\ni &lt;- 1\nresult[i] &lt;- somenumbers[i] + 2\n\nIf you get an error here, there is something wrong with the meat! (and not necessarily the loop)\n\nresult[i]\n\n[1] 8\n\n\nFor example, if we had a typo, we’d get an error. Try running the below!\n\ni &lt;- 1\nresult[i] &lt;- somenumberz[i] + 2\n\n\n\n6.1.4 Your turn\nUsing a loop, for each value in our poll results, add 10 and divide by 100. Store in a vector called adjustedpollresults.\n\npollresults &lt;- c(70, 40, 45, 60, 43, 80, 23)\n\nRemember the steps:\n\nThe Meat: Write down the code for one version.\nThe Bread: Embed this code in the loop syntax (for(i in X){})\nCreate a vector that contains the values you want to loop through (here it’s pollresults)\nCreate a storage vector that will contain the results (here it’s adjustedpollresults)\nModify the meat and bread to iterate by using [i] and replace X.\n\n\n\nTry on your own, then expand for the solution.\n\n\npollresults &lt;- c(70, 40, 45, 60, 43, 80, 23)\nadjustedpollresults &lt;- rep(NA, length(pollresults))\n\nfor(i in 1:length(pollresults)){\n  adjustedpollresults[i] &lt;- (pollresults[i] + 10)/100 \n}\nadjustedpollresults\n\n[1] 0.80 0.50 0.55 0.70 0.53 0.90 0.33",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Loops in R</span>"
    ]
  },
  {
    "objectID": "06-Loops.html#application-u.s.-supreme-court",
    "href": "06-Loops.html#application-u.s.-supreme-court",
    "title": "6  Loops in R",
    "section": "6.2 Application: U.S. Supreme Court",
    "text": "6.2 Application: U.S. Supreme Court\nA video explainer of the loop in this section using a similar dataset that goes through 2020. We now have data going through 2023! \nThe Court has changed a lot recently in its composition (and will continue to do so).\n\n \n\n\n\n\n\n\n\nIdeology on the U.S. Supreme Court over the past decade:\n\nWith Justice Anthony Kennedy out, Kavanaugh in, did the Court have a Conservative shift?\nWhat about with the death of Ruth Bader Ginsburg and confirmation of Amy Coney Barrett?\nWhat about with the introduction of Justice Kentanji Brown Jackson?\n\nMany people predicted it would. See this FiveThirtyEight article as an example. The graph from the article shows Kavanaugh’s predicted ideology.\n\n\nWe will explore how the Court has changed ideologically, with a focus on how the location of the median U.S. Supreme Court Justice shifted over time.\nWhy does the median matter? A refresher on the Court\n\nPresident nominates the justice. Senate must confirm.\nJustices serve lifetime appointments.\nTrump nominated Gorsuch, following Scalia death, confirmed 2017.\nTrump nominated Kavanaugh, following Kennedy retirement, confirmed 2018.\nThe Court typically has 9 justices, so whichever justice is the median in terms of ideology, can act as the “swing” vote in cases where the Court is divided\n\nAnthony Kennedy was often the “swing” justice for a decade.\n\nWith Kennedy out, the prediction was that the Court would return to similar balance as when O’Connor was the median.\nIn 2020, Ruth Bader Ginsburg died and Amy Coney Barrett was confirmed to Court late that year, likely shifting the Court again.\nWe don’t yet have a lot of data on changes to the Court that have come about since Justice Ketanji Brown Jackson was confirmed following the retirement of Justice Breyer, but we can examine changes to the court median through 2023.\n\nLet’s load and explore our data.\n\nterm: is the year of the SC (1991-2023 except for 2005),\njusticeName: contains the name of the Justice, and\n\npost_mn: includes the “ideal point”– this is the estimated ideology\n\nMartin-Quinn Scores assess ideology based on how judges “cluster” together in their voting patterns. Every Justice gets an ideology score, and this score can change each SC term (year) they are on the Court. Higher scores are more conservative justices, and lower, more liberal. More information is available at the MQScores website\n\njustices &lt;- read.csv(\"justices25.csv\", stringsAsFactors = T)\n\n## alternative\njustices &lt;- read.csv(\"https://raw.githubusercontent.com/ktmccabe/teachingdata/main/justices25.csv\", stringsAsFactors = T)\n\nWe are going to make the name variable a character class. This will make R treat the names as raw text rather than valued categories. This will be useful later on in the application.\n\n## justice Name as character\njustices$justiceName &lt;- as.character(justices$justiceName)\n\nWe can use tapply() to see the median “ideal point” (ideology score) each term in our data.\n\n## Note: we use tapply like before but replace mean with median\nmedians &lt;- tapply(justices$post_mn, justices$term, median)\n\nplot(x =names(medians),\n     y= medians, \n    ylim = c(-.4, 1),\n     type = \"b\",\n    cex=1.5,\n     ylab=\"Conservatism\",\n     xlab=\"Term\",\n     main=\"Median of US Supreme Court over Time\")\n\n\n\n\n\n\n\n\nWe see a conservative shift at the end of the plot. However, we cannot tell from this specific data result whether this represents a shift within a particular justice’s ideology or a shift in which justice has become the median, due perhaps, to the change in the Court’s composition.\nWe need to find which justice is the median!\nLoops to the rescue!\nWe will start our process by defining the meat of the operation.\n\nWe want to find the median SC Justice for each term. To get started, let’s pretend we only have to find the median Supreme Court Justice for one term.\n\n\nSCterms &lt;- sort(unique(justices$term))\nSCterms\n\n [1] 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2006\n[16] 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021\n[31] 2022 2023\n\n\nNote that where you have a vector where some entries in the vector are repeated (such as terms on the Supreme Court), you can extract the unique elements of that vector using the unique() function. You can also sort() them in numeric or alphabetical order. This won’t be necessary most times.\nFirst, let’s think about how we would do this for just one of the Supreme Court terms. Well we would first subset our data frame to contain only that one Supreme Court term.\n\n## Example for the first term\nSCterms[1]\n\n[1] 1991\n\n## Subset data to include only rows from 1991\nsubterm &lt;- subset(justices, term == 1991)\n\nThen, we would take the median of these ideal points\n\nmedian.ip &lt;- median(subterm$post_mn)\n\nFinally, we would figure out which justice has this median.\n\nresult &lt;- subterm$justiceName[subterm$post_mn == median.ip]\nresult\n\n[1] \"SDOConnor\"\n\n\nNow let’s put it into our loop syntax\n\n# for(i  in . . . ){\n#  subterm &lt;- subset(justices, term == 1991)\n#  median.ip &lt;- median(subterm$post_mn)\n#  result &lt;- subterm$justiceName[subterm$post_mn == median.ip]\n#}\n\nNow, we need our container vector and iteration vectors.\n\nSCterms &lt;- sort(unique(justices$term))\nresults &lt;- rep(NA, length(SCterms))\nnames(results) &lt;- SCterms\n\nFinally, we would modify our loop syntax with i and [i]\n\nfor(i  in 1:length(SCterms)){\n  subterm &lt;- subset(justices, term == SCterms[i])\n  median.ip &lt;- median(subterm$post_mn)\n  results[i] &lt;- subterm$justiceName[subterm$post_mn == median.ip]\n}\n\nDid it work?\n\nresults\n\n         1991          1992          1993          1994          1995 \n  \"SDOConnor\"   \"SDOConnor\"   \"AMKennedy\"   \"SDOConnor\"   \"AMKennedy\" \n         1996          1997          1998          1999          2000 \n  \"AMKennedy\"   \"AMKennedy\"   \"AMKennedy\"   \"SDOConnor\"   \"SDOConnor\" \n         2001          2002          2003          2004          2006 \n  \"SDOConnor\"   \"SDOConnor\"   \"SDOConnor\"   \"SDOConnor\"   \"AMKennedy\" \n         2007          2008          2009          2010          2011 \n  \"AMKennedy\"   \"AMKennedy\"   \"AMKennedy\"   \"AMKennedy\"   \"AMKennedy\" \n         2012          2013          2014          2015          2016 \n  \"AMKennedy\"   \"AMKennedy\"   \"AMKennedy\"   \"AMKennedy\"   \"AMKennedy\" \n         2017          2018          2019          2020          2021 \n  \"AMKennedy\"   \"JGRoberts\"   \"JGRoberts\" \"BMKavanaugh\" \"BMKavanaugh\" \n         2022          2023 \n\"BMKavanaugh\" \"BMKavanaugh\" \n\n\nOur evidence aligns with others:\n\n\n6.2.1 Troubleshooting the loop\nRecall, the inside part of the loop should run if we set i to a particular value.\n\n  i &lt;- 1\n  subterm &lt;- subset(justices, term == SCterms[i])\n  median.ip &lt;- median(subterm$post_mn)\n  results[i] &lt;- subterm$justiceName[subterm$post_mn == median.ip]\n  \n  results[i]\n\n       1991 \n\"SDOConnor\" \n\n\nWe are in good shape! If we had a typo, we’d get an error message there, and that would be a sign that we need to work on the inside part of the code before putting it back into the loop structure.\n\n\n6.2.2 Visualizing the Results\nTo get a bit more practice with plots, let’s visualize the results and make our interpretations.\n\nmedians &lt;- tapply(justices$post_mn, justices$term, median)\nplot(x =names(medians),\n     y= medians, \n     ylim = c(-.4, 1),\n     type = \"b\",\n     cex=1.5,\n     ylab=\"Conservatism\",\n     xlab=\"Term\",\n     main=\"Median of US Supreme Court over Time\")\n\n## Add the names to the plot\n## Note: we want to make sure medians and results are in the same order for this to work\ntext(x=names(results), y=(medians - .14), labels=results, cex=.35)\n\n\n\n\n\n\n\n\nWe have now used the text() function. Similar to plot, the text() takes a set of x and y coordinates that tells R the location of where you want to add a piece(s) of text to the plot. The third input is the actual text.\nWhy did the Court shift more conservative at the end of the time trend?\n\nWell we see that Justice Roberts and then Justice Kavanaugh became the median!\n\n\n\n\nFiveThirtyEight\n\n\nAs FiveThirtyEight notes, just because Justice Roberts is the new median, does not mean he has become more liberal. The Court composition is shifting, and the MQ scores also depend on the issues being heard before the Court.\n\nRecall, the Martin-Quinn scores measure justice ideology based on voting patterns. What are the strengths and weaknesses of using this type of information to score the ideology of a justice?\n\n\n6.2.3 Enhancing the plot\nLet’s make the plot more beautiful by color coding.\n\nmedians &lt;- tapply(justices$post_mn, justices$term, median)\nplot(x =names(medians),\n     y= medians, \n     ylim = c(-.4, 1),\n     type = \"b\",\n     ylab=\"Conservatism\",\n     xlab=\"Term\",\n     main=\"Median of US Supreme Court over Time\",\n     xaxt=\"n\", ## removes the x-axis\n     las=1)\n\n## Adds text\ntext(x=names(results), y=(medians - .14), results, cex=.35)\n\n## Adds color-coded points on top of existing points\npoints(x =names(medians),\n     y= medians,\n     \n     ## Adds colors according to how results is coded\n     col= ifelse(results == \"AMKennedy\", \"orange\", \n                 ifelse(results ==\"SDOConnor\", \"light blue\", \n                        ifelse(results == \"JGRoberts\", \"purple\",\n                        \"red3\"))), \n     pch=15, # point type- squares \n     cex=1.5) # size of points\n\n## Adds custom x-axis at the specific years included in names(medians)\naxis(1, names(medians), cex.axis=.6)\n\n\n\n\n\n\n\n\nWe have used the points() function. This adds an additional layer of points to a plot. It works much like the plot function in that in takes a set of x and y coordinates.\nWe could change the look of the plot even more by adding a legend and altering the borders and look of the plot.\n\nmedians &lt;- tapply(justices$post_mn, justices$term, median)\nplot(x =names(medians),\n     y= medians, \n     ylim = c(-.4, 1),\n     type = \"b\",\n     ylab=\"Conservatism\",\n     xlab=\"Term\",\n     main=\"Median of US Supreme Court over Time\",\n     xaxt=\"n\", # removes x axis\n     las=1, # changes the orientation of the axis labels\n     lwd=2, # increases the thickness of the lines\n     tick=F, # removes the tick marks from the axis\n     bty=\"n\") # removes the plot border\n\n## adds horizontal dashed gray lines\nabline(h=seq(-.4, 1, .2), lty=2, col=\"light gray\")\n\n## Adds a legend\nlegend(\"bottomleft\", pch=15, col = c(\"orange\", \"light blue\", \"purple\", \"red3\"),\n       c(\"Kennedy\", \"O'Connor\", \"Roberts\", \"Kavanaugh\"), bty=\"n\")\n\n## Adds the color-coded points\npoints(x =names(medians), y= medians,\n          col= ifelse(results == \"AMKennedy\", \"orange\", \n                 ifelse(results ==\"SDOConnor\", \"light blue\", \n                        ifelse(results == \"JGRoberts\", \"purple\",\n                        \"red3\"))), \n     pch=15, cex=2)\n\n## Adds our custom x-axis\naxis(1, names(medians), cex.axis=.6, tick=F)\n\n\n\n\n\n\n\n\n\n\n6.2.4 Wrapping Up\nWe have calculated and visualized how the median U.S. Supreme Court Justice and Justice’s ideology has changed over the past three decades.\n\nThis gave us additional practice with loops and visualization\nWe also gained exposure to an example of how political scientists take a large amount of information– votes on all Supreme Court cases– and try to summarize it using a single number that represents how liberal or conservative a justice is\n\nThis type of information can be used for many social science goals: 1) To describe trends in the Court 2) To help explain why the Court has voted a particular way on recent cases 3) To predict how the Court will vote in the future as new justices arrive.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Loops in R</span>"
    ]
  },
  {
    "objectID": "07-Prediction.html",
    "href": "07-Prediction.html",
    "title": "7  Prediction",
    "section": "",
    "text": "7.1 Prediction Overview\nIn this section, we move to our next social science goal\nMost of the tools we have been working on thus far have focused on first describing our data and then conducting tests through different types of comparisons and visualizations, in order to assess a deductive hypothesis, explaining the relationship between two variables.\nNow we turn to a different goal.\nRecall the difference between Correlation vs. Causality using our graphic showing the popularity of Duck Dynasty in different parts of the country. In 2016, researchers at the NY Times noticed that areas in the country where the television show Duck Dynasty was popular also tended to support Donald Trump at higher rates.\nFor those used to working with the goal of explanation, shifting to prediction and classification may mean we need to shift what types of information we think is important.\nIf we were interested in the goal of explaining voting decisions (what causes someone to vote a certain way?), we might not care if someone watches the show. However, if we were just interested in predicting vote share or voting decisions, a strong correlation could still be useful. Without spending a single dollar on surveying a community, we might have a general sense of their support for a candidate.\nOur goal: Predict (estimate/guess) some unknown using information we have as accurately and precisely as possible\nSome political science examples of this might include\nOther examples\nWhat other types of things might we try to predict or classify in political science?",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Prediction</span>"
    ]
  },
  {
    "objectID": "07-Prediction.html#prediction-overview",
    "href": "07-Prediction.html#prediction-overview",
    "title": "7  Prediction",
    "section": "",
    "text": "Prediction could involve estimating a numeric outcome. Alternatively, prediction also involves classification– predicting a categorical outcome (e.g., prediction of who wins vs. who loses).\n\n\n\nCategorizing comments on social media as being toxic/nasty/uncivil\n\n\n\n\nWired\n\n\n\nDetecting Fake news and misinformation\n\n\n\n\nPBS\n\n\n\nForecasting election results\n\n\n\n\nTrying to detect hate speech online\nPredicting where or when an attack might occur\nTrying to classify a large amount of text into subject or topic categories for analysis",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Prediction</span>"
    ]
  },
  {
    "objectID": "07-Prediction.html#process-of-prediction",
    "href": "07-Prediction.html#process-of-prediction",
    "title": "7  Prediction",
    "section": "7.2 Process of Prediction",
    "text": "7.2 Process of Prediction\nPredict (estimate/guess) some unknown using information we have – and do so as accurately and precisely as possible.\n\nChoose an approach\n\nUsing an observed (known) measure as a direct proxy to predict an outcome\nUsing one or more observed (known) measures in a regression model to predict an outcome\n(Beyond the course) Using a statistical model to select the measures to use for predicting an outcome\n\nAssess accuracy and precision\n\nPrediction error: \\(Prediction - Truth\\)\nBias: Average prediction error: \\(\\text{mean}(Prediction - Truth)\\)\n\nA prediction is `unbiased’ if the bias is zero (If the prediction is on average true)\n\nRoot-mean squared error: \\(\\sqrt{\\text{mean}((Prediction - Truth)^2)}\\)\n\nLike `absolute’ error– the average magnitude of the prediction error\nthe typical distance the prediction is from the truth\n\nConfusion Matrix\n\nA cross-tab of predictions you got correct vs. predictions you got wrong (misclassified)\nGives you true positives and true negatives vs. false positives and false negatives\n\n\nIterate to improve the prediction/classification\n\nOften, we repeat steps 1-3 until we are confident in your method for predicting.\n\nDanger Zone: Eventually, after you have tested the approach and are satisfied with the accuracy, you may start applying it to new data for which you do not know the right answer.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Prediction</span>"
    ]
  },
  {
    "objectID": "07-Prediction.html#example-forecasting-2024-us-election-based-on-2020-results",
    "href": "07-Prediction.html#example-forecasting-2024-us-election-based-on-2020-results",
    "title": "7  Prediction",
    "section": "7.3 Example: Forecasting 2024 US Election based on 2020 Results",
    "text": "7.3 Example: Forecasting 2024 US Election based on 2020 Results\nLet’s try to predict the 2024 election results using just the 2020 results.\nFor a video explainer of the code for a similar application, see below. (Via youtube, you can speed up the playback to 1.5 or 2x speed.)\n\n\nresults2024 &lt;- read.csv(\"elecresults24.csv\", stringsAsFactors = T)\nresults2024 &lt;- read.csv(\"https://raw.githubusercontent.com/ktmccabe/teachingdata/refs/heads/main/elecresults24.csv\", stringsAsFactors = T)\n\nVariables\n\nstate_abbrev and state: state or state and district\ncalled2024: result of 2024 election, R or D\ncalled2020: result of 2020 election, R or D\ncalled2016: result of 2016 election, R or D\ndem_percent24: percentage for the Democratic candidate\nrep_percent24: percentage for the Republican candidate\ndem_percent20: percentage for the Democratic candidate\nrep_percent20: percentage for the Republican candidate\nev_total: Electoral votes associated with a state/ district of a state during the 2024 election\n\n\n\nsum(results2024$ev_total[results2024$called2024 == \"R\"])\n\n[1] 312\n\nsum(results2024$ev_total[results2024$called2024 == \"D\"])\n\n[1] 226\n\n\n\n7.3.1 Choose Approach\n\nChoose an approach: Using an observed (known) measure as a direct proxy to predict an outcome\n\n\nLet’s use the 2020 result as a direct proxy to predict 2024.\n\n\nresults2024$predicted2024 &lt;- results2024$called2020\n\n\n\n7.3.2 Assess Accuracy\n\nAssess accuracy\n\nWhat proportion of states did we get correct?\n\nmean(results2024$predicted2024 == results2024$called2024)\n\n[1] 0.8928571\n\n\n\n\n7.3.3 Classification\nWe want to correctly predict the winner of each state\nPrediction of binary outcome variable = classification problem\n\ntrue positive: correctly predicting Trump to be the winner\nfalse positive : incorrectly predicting Trump to be the winner (misclassification)\ntrue negative : correctly predicting Trump to be the loser\nfalse negative : incorrectly predicting Trump to be the loser (misclassification)\n\nWe define one outcome as the “positive” and one as the “negative.” For now, we will say a Trump win is the positive and a Harris win is the negative. This terminology comes from settings where a positive result just means “an event has occurred” (e.g., a positive medical test result might mean, yes, you broke your leg). You could flip this and make a Harris win the positive and a Trump win the negative as long as you interpret things correctly.\nConfusion Matrix: Tells us how we went right, how we went wrong.\n\ntable(predicted=results2024$predicted2024, actual = results2024$called2024)\n\n         actual\npredicted  D  R\n        D 22  6\n        R  0 28\n\n\nWhich states did we get wrong?\n\nresults2024$state[results2024$predicted2024 != results2024$called2024]\n\n[1] Arizona      Georgia      Michigan     Nevada       Pennsylvania\n[6] Wisconsin   \n56 Levels: Alabama Alaska Arizona Arkansas California Colorado ... Wyoming\n\n\n\n\n7.3.4 Iterate to improve predictions\nStart back at step one. We continue to repeat steps 1 and 2 until we are confident in our predictions.\nHow could we improve our predictions of elections? What other information could we use?",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Prediction</span>"
    ]
  },
  {
    "objectID": "07-Prediction.html#polling-as-predictive",
    "href": "07-Prediction.html#polling-as-predictive",
    "title": "7  Prediction",
    "section": "7.4 Polling as Predictive",
    "text": "7.4 Polling as Predictive\nMany forecasters use pre-election polls in their models to predict election outcomes. In 2016 and 2020, polling-based forecasts received a lot of criticism\nPrior to the 2016 elections, forecasts that used polls seemed confident that Hillary Clinton would win the election. Political analysts also seemed to think the polls were favorable to Clinton.\n\n\n\nNY Upshot\n\n\nWe all know that afterwards, Clinton did not win.\n\n\n\nPew\n\n\nThis led public opinion scholars and practitioners to do a deep investigation into the quality of pre-election polling. Like 2016, following the 2020 election, a similar team investigated the quality of pre-election polling in 2020. Here, while many polls pointed to a favorable outcome for Biden, the results seemed closer than one might have anticipated.\n\nThe results of these findings are in the AAPOR report.\n\n7.4.1 Choose an Approach: Let’s use some polls!\nWe will load polls from the 2024 election cycle. This cycle was unique because we had a change in candidates somewhat late in the campaign. Not all states were able to conduct polls with Harris on the ballot, and even if they did, not all polling aggregators have included data from these polls.\nAs a results, our polling dataset is somewhat incomplete. It contains polls only from states we might think are more competitive, or at least, more likely to be polled in an election.\nIn this next exercise, we will break our prediction activitiy into two sections. For states with polls available, we will make polling-based predictions for every state. For states without polls, we will rely on the 2016 party result as our prediction. We then combine both to get a prediction for the full election.\nLet’s load the data!\n\npolls24 &lt;- read.csv(\"polls24bothsources.csv\")\npolls24 &lt;- read.csv(\"https://raw.githubusercontent.com/ktmccabe/teachingdata/refs/heads/main/polls24bothsources.csv\")\n\nVariables\n\nHarris, Trump, poll-based percent going for each candidate\nstate: state or state and district\nsamplesize: sample size of the poll\nsampletype: if it was a poll of likely voters, registered voters, or some other population\ndaystoelection: how close we are to 11/5/2024\ncalled2024: result of 2024 election, R or D\ncalled2020: result of 2020 election, R or D\ncalled2016: result of 2016 election, R or D\ndem_percent24: percentage for the Democratic candidate\nrep_percent24: percentage for the Republican candidate\ndem_percent20: percentage for the Democratic candidate\nrep_percent20: percentage for the Republican candidate\nev_total: Electoral votes associated with a state/ district of a state during the 2024 election\n\nLet’s make a variable that shows us the predicted margin for Trump based on the poll in a given row, and a variable for the actual margin on Election Day.\n\npolls24$pollmargin24 &lt;- polls24$Trump - polls24$Harris\npolls24$resultmargin24 &lt;- polls24$rep_percent2024 - polls24$dem_percent2024\n\nLet’s also see what states are in our polling data.\n\n## Iteration vector\nstates &lt;- unique(polls24$state)\nstates\n\n [1] \"Arizona\"        \"Florida\"        \"Georgia\"        \"Iowa\"          \n [5] \"Michigan\"       \"Minnesota\"      \"Nevada\"         \"New Hampshire\" \n [9] \"North Carolina\" \"Pennsylvania\"   \"Texas\"          \"Virginia\"      \n[13] \"Wisconsin\"      \"California\"     \"Illinois\"       \"Maine\"         \n[17] \"Maine CD-1\"     \"Maine CD-2\"     \"Maryland\"       \"Missouri\"      \n[21] \"Montana\"        \"Nebraska\"       \"Nebraska CD-2\"  \"New Mexico\"    \n[25] \"New York\"       \"Ohio\"           \"Oregon\"         \"Tennessee\"     \n[29] \"Utah\"           \"Vermont\"        \"Washington\"     \"West Virginia\" \n\n\n\n\n7.4.2 Imagine the process for one state\nFor each state with polling data, we will make our prediction for the election by taking the average of the most recent polls in the state. We will define this as all polls within 15 days of the election, or, if some states only had polls taken much earlier, we will grab whatever the most recent poll’s result was.\n\n## Subset to just Arizona\nstates[1]\n\n[1] \"Arizona\"\n\nsubdata &lt;- subset(polls24, state == states[1])\n\n## Further subset to the \"latest polls\"\nsubdata &lt;- subset(subdata, daystoelection &lt; 15 | \n                      daystoelection == min(subdata$daystoelection) )\n\nNow let’s extract the actual margin for Trump, the poll-based predicted margin, and finally, let’s assign electoral votes based on our prediction.\n\n## Find the margin for the actual result\nresult.marginAZ &lt;- mean(subdata$resultmargin24)\nresult.marginAZ\n\n[1] 0.0552723\n\n## Find the margin for our prediction\npolls.marginAZ &lt;- mean(subdata$pollmargin24)\npolls.marginAZ\n\n[1] 0.02588636\n\n## Allocate votes for Biden according to the margin\ntrumpvotesAZ &lt;- ifelse(mean(subdata$pollmargin24) &gt; 0, \n                            unique(subdata$ev_total), 0)\ntrumpvotesAZ\n\n[1] 11\n\n\nWe predicted Trump would win Arizona because the polls.marginAZ is positive. Therefore, we assigned Trump 11 electoral votes in this example.\n\n\n7.4.3 Loop through all states\nNow let’s repeat this process for all states.\n\n## Iteration vector\nstates &lt;- unique(polls24$state)\n\n## Container vectors\npolls.margin24 &lt;- result.margin24 &lt;- trumpvotes_pred &lt;- trumpvotes_act &lt;- \n  rep(NA, length(states))\n\nnames(polls.margin24) &lt;- names(result.margin24) &lt;- \n  names(trumpvotes_pred) &lt;- names(trumpvotes_act)  &lt;-as.character(unique(states))\n\n\n## Loop\nfor(i in 1:length(states)){\n  subdata &lt;- subset(polls24, state == states[i] )\n  subdata &lt;- subset(subdata, daystoelection &lt; 15 | \n                      daystoelection == min(subdata$daystoelection) )\n  result.margin24[i] &lt;- mean(subdata$resultmargin24)\n  polls.margin24[i] &lt;- mean(subdata$pollmargin24)\n  trumpvotes_pred[i] &lt;- ifelse(mean(subdata$pollmargin24) &gt; 0, \n                            unique(subdata$ev_total), 0)\n  trumpvotes_act[i] &lt;- ifelse(mean(subdata$resultmargin24) &gt; 0, \n                            unique(subdata$ev_total), 0)\n }\nsum(trumpvotes_pred) # predicted\n\n[1] 198\n\nsum(trumpvotes_act) # predicted\n\n[1] 224\n\n\nLess competitive states\nWe also need to assign Trump votes to states not included in the poll data. Here, we will continue to predict based on the results of the 2020 election.\n\n## Subset only states without polling data for Harris\nelecresults_noncomp &lt;- subset(results2024, (! state %in% states))\n\n## predicted EV\ntrumpvotes_lesscomp_pred &lt;- ifelse(elecresults_noncomp$called2020 == \"R\", elecresults_noncomp$ev_total, 0) \nnames(trumpvotes_lesscomp_pred) &lt;- elecresults_noncomp$state\n\n## actual EV\ntrumpvotes_lesscomp_result &lt;- ifelse(elecresults_noncomp$called2024 == \"R\", elecresults_noncomp$ev_total, 0) \nnames(trumpvotes_lesscomp_result) &lt;- elecresults_noncomp$state\n\n\n\n# predicted Trump votes from less competitive states vs. actual\nsum(trumpvotes_lesscomp_pred) \n\n[1] 88\n\nsum(trumpvotes_lesscomp_result) \n\n[1] 88\n\n\nThe overall prediction combines the less competitive and competitive states:\n\npredictedEV &lt;- c(trumpvotes_lesscomp_pred,trumpvotes_pred)\nsum(predictedEV)\n\n[1] 286\n\nactualEV &lt;- c(trumpvotes_lesscomp_result, trumpvotes_act)\nsum(actualEV)\n\n[1] 312\n\n\n\n\n7.4.4 Check Accuracy\n\n7.4.4.1 Quantitative Measures of Accuracy\nFrom the polls, let’s calculate two common measures of prediction error: bias (the average prediction error) and root-mean-squared error (a typical magnitude of the prediction error).\n\n## Calculate Bias (Predicted Trump - True Trump)\npredictionerror &lt;- polls.margin24 -result.margin24 \nbias &lt;- mean(predictionerror)\nbias\n\n[1] -0.03228962\n\n## Root Mean Squared Error\nsqrt(mean((predictionerror)^2))\n\n[1] 0.06040716\n\n\n\n## Histogram of Prediction Errors to Show Bias\nhist(predictionerror, \n     xlab = \"Prediction Error (Predicted Trump Margin - Actual)\",\n     main = \"Histogram of Prediction Error in Latest Polls\")\nabline(v=mean(predictionerror), col=\"red\",lwd=2)\nabline(v=0, col=\"blue\", lwd=2)\n\n\n\n\n\n\n\n\nWhat do these results suggest about the polls?\n\n\n7.4.4.2 Classification\nInstead of quantifying how far we were off, let’s see where we were right vs. where we were wrong.\nClassification\n\ntrue positive: correctly predicting Trump to be the winner\nfalse positive: incorrectly predicting Trump to be the winner\ntrue negative: correctly predicting Trump to be the loser\nfalse negative: incorrectly predicting Trump to be the loser\n\nConfusion Matrix\nLet’s classify our predictions.\n\nactualwins &lt;- ifelse(trumpvotes_act &gt; 0, \"Trump Won\", \"Harris Won\")\npredictedwins &lt;- ifelse(trumpvotes_pred &gt; 0, \"Trump Won\", \"Harris Won\")\n\n\ntable(predictedwins, actualwins)\n\n             actualwins\npredictedwins Harris Won Trump Won\n   Harris Won         14         3\n   Trump Won           0        15\n\n\nWhere did the polls get it wrong?\n\nactualwins[actualwins != predictedwins]\n\n   Michigan   Wisconsin  Maine CD-2 \n\"Trump Won\" \"Trump Won\" \"Trump Won\" \n\ntrumpvotes_act[actualwins != predictedwins]\n\n  Michigan  Wisconsin Maine CD-2 \n        15         10          1 \n\n\nWhat’s your conclusion?\n\nAre the polls alright?\nHow could you improve the prediction?\nWait a second… why even poll?\n\nNate Silver’s analysis of the 2025 polls is available here:https://www.natesilver.net/p/so-how-did-the-polls-do-in-2024-its",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Prediction</span>"
    ]
  }
]